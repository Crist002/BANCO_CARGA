
BANCO_CARGA_STM_1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cac4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000800  0800cbd8  0800cbd8  0001cbd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3d8  0800d3d8  000200f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800d3d8  0800d3d8  000200f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d3d8  0800d3d8  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3d8  0800d3d8  0001d3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d3dc  0800d3dc  0001d3dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  0800d3e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001418  200000f4  0800d4d4  000200f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000150c  0800d4d4  0002150c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017bc6  00000000  00000000  0002011d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033c4  00000000  00000000  00037ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  0003b0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001490  00000000  00000000  0003c650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a926  00000000  00000000  0003dae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aaf3  00000000  00000000  00058406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000926b6  00000000  00000000  00072ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001055af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006318  00000000  00000000  00105604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000f4 	.word	0x200000f4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cbbc 	.word	0x0800cbbc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000f8 	.word	0x200000f8
 800014c:	0800cbbc 	.word	0x0800cbbc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2101      	movs	r1, #1
 8000a70:	4803      	ldr	r0, [pc, #12]	; (8000a80 <SELECT+0x18>)
 8000a72:	f003 ff50 	bl	8004916 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000a76:	2001      	movs	r0, #1
 8000a78:	f003 f926 	bl	8003cc8 <HAL_Delay>
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40010c00 	.word	0x40010c00

08000a84 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	4803      	ldr	r0, [pc, #12]	; (8000a9c <DESELECT+0x18>)
 8000a8e:	f003 ff42 	bl	8004916 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000a92:	2001      	movs	r0, #1
 8000a94:	f003 f918 	bl	8003cc8 <HAL_Delay>
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40010c00 	.word	0x40010c00

08000aa0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000aaa:	bf00      	nop
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <SPI_TxByte+0x30>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d1f8      	bne.n	8000aac <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000aba:	1df9      	adds	r1, r7, #7
 8000abc:	2364      	movs	r3, #100	; 0x64
 8000abe:	2201      	movs	r2, #1
 8000ac0:	4803      	ldr	r0, [pc, #12]	; (8000ad0 <SPI_TxByte+0x30>)
 8000ac2:	f005 fbcf 	bl	8006264 <HAL_SPI_Transmit>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200007e0 	.word	0x200007e0

08000ad4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000ae0:	bf00      	nop
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <SPI_TxBuffer+0x30>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	f003 0302 	and.w	r3, r3, #2
 8000aec:	2b02      	cmp	r3, #2
 8000aee:	d1f8      	bne.n	8000ae2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000af0:	887a      	ldrh	r2, [r7, #2]
 8000af2:	2364      	movs	r3, #100	; 0x64
 8000af4:	6879      	ldr	r1, [r7, #4]
 8000af6:	4803      	ldr	r0, [pc, #12]	; (8000b04 <SPI_TxBuffer+0x30>)
 8000af8:	f005 fbb4 	bl	8006264 <HAL_SPI_Transmit>
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200007e0 	.word	0x200007e0

08000b08 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000b0e:	23ff      	movs	r3, #255	; 0xff
 8000b10:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000b12:	bf00      	nop
 8000b14:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <SPI_RxByte+0x34>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	2b02      	cmp	r3, #2
 8000b20:	d1f8      	bne.n	8000b14 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000b22:	1dba      	adds	r2, r7, #6
 8000b24:	1df9      	adds	r1, r7, #7
 8000b26:	2364      	movs	r3, #100	; 0x64
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	4803      	ldr	r0, [pc, #12]	; (8000b3c <SPI_RxByte+0x34>)
 8000b2e:	f005 fcd5 	bl	80064dc <HAL_SPI_TransmitReceive>

	return data;
 8000b32:	79bb      	ldrb	r3, [r7, #6]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	200007e0 	.word	0x200007e0

08000b40 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000b48:	f7ff ffde 	bl	8000b08 <SPI_RxByte>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	461a      	mov	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	701a      	strb	r2, [r3, #0]
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <SD_ReadyWait+0x30>)
 8000b64:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b68:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000b6a:	f7ff ffcd 	bl	8000b08 <SPI_RxByte>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	2bff      	cmp	r3, #255	; 0xff
 8000b76:	d004      	beq.n	8000b82 <SD_ReadyWait+0x26>
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <SD_ReadyWait+0x30>)
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d1f3      	bne.n	8000b6a <SD_ReadyWait+0xe>

	return res;
 8000b82:	79fb      	ldrb	r3, [r7, #7]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000c90 	.word	0x20000c90

08000b90 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000b96:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000b9a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000b9c:	f7ff ff72 	bl	8000a84 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	e005      	b.n	8000bb2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000ba6:	20ff      	movs	r0, #255	; 0xff
 8000ba8:	f7ff ff7a 	bl	8000aa0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	2b09      	cmp	r3, #9
 8000bb6:	ddf6      	ble.n	8000ba6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000bb8:	f7ff ff56 	bl	8000a68 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000bbc:	2340      	movs	r3, #64	; 0x40
 8000bbe:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000bd0:	2395      	movs	r3, #149	; 0x95
 8000bd2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	2106      	movs	r1, #6
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff ff7b 	bl	8000ad4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000bde:	e002      	b.n	8000be6 <SD_PowerOn+0x56>
	{
		cnt--;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000be6:	f7ff ff8f 	bl	8000b08 <SPI_RxByte>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d002      	beq.n	8000bf6 <SD_PowerOn+0x66>
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d1f4      	bne.n	8000be0 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000bf6:	f7ff ff45 	bl	8000a84 <DESELECT>
	SPI_TxByte(0XFF);
 8000bfa:	20ff      	movs	r0, #255	; 0xff
 8000bfc:	f7ff ff50 	bl	8000aa0 <SPI_TxByte>

	PowerFlag = 1;
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <SD_PowerOn+0x80>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	701a      	strb	r2, [r3, #0]
}
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000111 	.word	0x20000111

08000c14 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000c18:	4b03      	ldr	r3, [pc, #12]	; (8000c28 <SD_PowerOff+0x14>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000111 	.word	0x20000111

08000c2c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000c30:	4b02      	ldr	r3, [pc, #8]	; (8000c3c <SD_CheckPower+0x10>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	20000111 	.word	0x20000111

08000c40 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000c4a:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <SD_RxDataBlock+0x5c>)
 8000c4c:	22c8      	movs	r2, #200	; 0xc8
 8000c4e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000c50:	f7ff ff5a 	bl	8000b08 <SPI_RxByte>
 8000c54:	4603      	mov	r3, r0
 8000c56:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	2bff      	cmp	r3, #255	; 0xff
 8000c5c:	d104      	bne.n	8000c68 <SD_RxDataBlock+0x28>
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <SD_RxDataBlock+0x5c>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1f3      	bne.n	8000c50 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	2bfe      	cmp	r3, #254	; 0xfe
 8000c6c:	d001      	beq.n	8000c72 <SD_RxDataBlock+0x32>
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e00f      	b.n	8000c92 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	1c5a      	adds	r2, r3, #1
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff61 	bl	8000b40 <SPI_RxBytePtr>
	} while(len--);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	1e5a      	subs	r2, r3, #1
 8000c82:	603a      	str	r2, [r7, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d1f4      	bne.n	8000c72 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8000c88:	f7ff ff3e 	bl	8000b08 <SPI_RxByte>
	SPI_RxByte();
 8000c8c:	f7ff ff3c 	bl	8000b08 <SPI_RxByte>

	return TRUE;
 8000c90:	2301      	movs	r3, #1
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000c92 	.word	0x20000c92

08000ca0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000cb0:	f7ff ff54 	bl	8000b5c <SD_ReadyWait>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2bff      	cmp	r3, #255	; 0xff
 8000cb8:	d001      	beq.n	8000cbe <SD_TxDataBlock+0x1e>
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e02f      	b.n	8000d1e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000cbe:	78fb      	ldrb	r3, [r7, #3]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff feed 	bl	8000aa0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000cc6:	78fb      	ldrb	r3, [r7, #3]
 8000cc8:	2bfd      	cmp	r3, #253	; 0xfd
 8000cca:	d020      	beq.n	8000d0e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000ccc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff feff 	bl	8000ad4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000cd6:	f7ff ff17 	bl	8000b08 <SPI_RxByte>
		SPI_RxByte();
 8000cda:	f7ff ff15 	bl	8000b08 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000cde:	e00b      	b.n	8000cf8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000ce0:	f7ff ff12 	bl	8000b08 <SPI_RxByte>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	f003 031f 	and.w	r3, r3, #31
 8000cee:	2b05      	cmp	r3, #5
 8000cf0:	d006      	beq.n	8000d00 <SD_TxDataBlock+0x60>
			i++;
 8000cf2:	7bbb      	ldrb	r3, [r7, #14]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000cf8:	7bbb      	ldrb	r3, [r7, #14]
 8000cfa:	2b40      	cmp	r3, #64	; 0x40
 8000cfc:	d9f0      	bls.n	8000ce0 <SD_TxDataBlock+0x40>
 8000cfe:	e000      	b.n	8000d02 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000d00:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000d02:	bf00      	nop
 8000d04:	f7ff ff00 	bl	8000b08 <SPI_RxByte>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d0fa      	beq.n	8000d04 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	f003 031f 	and.w	r3, r3, #31
 8000d14:	2b05      	cmp	r3, #5
 8000d16:	d101      	bne.n	8000d1c <SD_TxDataBlock+0x7c>
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e000      	b.n	8000d1e <SD_TxDataBlock+0x7e>

	return FALSE;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b084      	sub	sp, #16
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	6039      	str	r1, [r7, #0]
 8000d30:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000d32:	f7ff ff13 	bl	8000b5c <SD_ReadyWait>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2bff      	cmp	r3, #255	; 0xff
 8000d3a:	d001      	beq.n	8000d40 <SD_SendCmd+0x1a>
 8000d3c:	23ff      	movs	r3, #255	; 0xff
 8000d3e:	e042      	b.n	8000dc6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff feac 	bl	8000aa0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	0e1b      	lsrs	r3, r3, #24
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fea6 	bl	8000aa0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	0c1b      	lsrs	r3, r3, #16
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fea0 	bl	8000aa0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	0a1b      	lsrs	r3, r3, #8
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fe9a 	bl	8000aa0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fe95 	bl	8000aa0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2b40      	cmp	r3, #64	; 0x40
 8000d7a:	d102      	bne.n	8000d82 <SD_SendCmd+0x5c>
 8000d7c:	2395      	movs	r3, #149	; 0x95
 8000d7e:	73fb      	strb	r3, [r7, #15]
 8000d80:	e007      	b.n	8000d92 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	2b48      	cmp	r3, #72	; 0x48
 8000d86:	d102      	bne.n	8000d8e <SD_SendCmd+0x68>
 8000d88:	2387      	movs	r3, #135	; 0x87
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	e001      	b.n	8000d92 <SD_SendCmd+0x6c>
	else crc = 1;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fe83 	bl	8000aa0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	2b4c      	cmp	r3, #76	; 0x4c
 8000d9e:	d101      	bne.n	8000da4 <SD_SendCmd+0x7e>
 8000da0:	f7ff feb2 	bl	8000b08 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000da4:	230a      	movs	r3, #10
 8000da6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000da8:	f7ff feae 	bl	8000b08 <SPI_RxByte>
 8000dac:	4603      	mov	r3, r0
 8000dae:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000db0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	da05      	bge.n	8000dc4 <SD_SendCmd+0x9e>
 8000db8:	7bbb      	ldrb	r3, [r7, #14]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	73bb      	strb	r3, [r7, #14]
 8000dbe:	7bbb      	ldrb	r3, [r7, #14]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d1f1      	bne.n	8000da8 <SD_SendCmd+0x82>

	return res;
 8000dc4:	7b7b      	ldrb	r3, [r7, #13]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <SD_disk_initialize+0x14>
 8000de0:	2301      	movs	r3, #1
 8000de2:	e0d6      	b.n	8000f92 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000de4:	4b6d      	ldr	r3, [pc, #436]	; (8000f9c <SD_disk_initialize+0x1cc>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <SD_disk_initialize+0x2a>
 8000df2:	4b6a      	ldr	r3, [pc, #424]	; (8000f9c <SD_disk_initialize+0x1cc>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	e0cb      	b.n	8000f92 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000dfa:	f7ff fec9 	bl	8000b90 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000dfe:	f7ff fe33 	bl	8000a68 <SELECT>

	/* check disk type */
	type = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000e06:	2100      	movs	r1, #0
 8000e08:	2040      	movs	r0, #64	; 0x40
 8000e0a:	f7ff ff8c 	bl	8000d26 <SD_SendCmd>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	f040 80a6 	bne.w	8000f62 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000e16:	4b62      	ldr	r3, [pc, #392]	; (8000fa0 <SD_disk_initialize+0x1d0>)
 8000e18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e1c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000e1e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000e22:	2048      	movs	r0, #72	; 0x48
 8000e24:	f7ff ff7f 	bl	8000d26 <SD_SendCmd>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d158      	bne.n	8000ee0 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	73fb      	strb	r3, [r7, #15]
 8000e32:	e00c      	b.n	8000e4e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000e34:	7bfc      	ldrb	r4, [r7, #15]
 8000e36:	f7ff fe67 	bl	8000b08 <SPI_RxByte>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	f107 0310 	add.w	r3, r7, #16
 8000e42:	4423      	add	r3, r4
 8000e44:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	73fb      	strb	r3, [r7, #15]
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	2b03      	cmp	r3, #3
 8000e52:	d9ef      	bls.n	8000e34 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000e54:	7abb      	ldrb	r3, [r7, #10]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	f040 8083 	bne.w	8000f62 <SD_disk_initialize+0x192>
 8000e5c:	7afb      	ldrb	r3, [r7, #11]
 8000e5e:	2baa      	cmp	r3, #170	; 0xaa
 8000e60:	d17f      	bne.n	8000f62 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000e62:	2100      	movs	r1, #0
 8000e64:	2077      	movs	r0, #119	; 0x77
 8000e66:	f7ff ff5e 	bl	8000d26 <SD_SendCmd>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d807      	bhi.n	8000e80 <SD_disk_initialize+0xb0>
 8000e70:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000e74:	2069      	movs	r0, #105	; 0x69
 8000e76:	f7ff ff56 	bl	8000d26 <SD_SendCmd>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d005      	beq.n	8000e8c <SD_disk_initialize+0xbc>
				} while (Timer1);
 8000e80:	4b47      	ldr	r3, [pc, #284]	; (8000fa0 <SD_disk_initialize+0x1d0>)
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1eb      	bne.n	8000e62 <SD_disk_initialize+0x92>
 8000e8a:	e000      	b.n	8000e8e <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000e8c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000e8e:	4b44      	ldr	r3, [pc, #272]	; (8000fa0 <SD_disk_initialize+0x1d0>)
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d064      	beq.n	8000f62 <SD_disk_initialize+0x192>
 8000e98:	2100      	movs	r1, #0
 8000e9a:	207a      	movs	r0, #122	; 0x7a
 8000e9c:	f7ff ff43 	bl	8000d26 <SD_SendCmd>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d15d      	bne.n	8000f62 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	73fb      	strb	r3, [r7, #15]
 8000eaa:	e00c      	b.n	8000ec6 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8000eac:	7bfc      	ldrb	r4, [r7, #15]
 8000eae:	f7ff fe2b 	bl	8000b08 <SPI_RxByte>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	f107 0310 	add.w	r3, r7, #16
 8000eba:	4423      	add	r3, r4
 8000ebc:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	73fb      	strb	r3, [r7, #15]
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	2b03      	cmp	r3, #3
 8000eca:	d9ef      	bls.n	8000eac <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000ecc:	7a3b      	ldrb	r3, [r7, #8]
 8000ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <SD_disk_initialize+0x10a>
 8000ed6:	230c      	movs	r3, #12
 8000ed8:	e000      	b.n	8000edc <SD_disk_initialize+0x10c>
 8000eda:	2304      	movs	r3, #4
 8000edc:	73bb      	strb	r3, [r7, #14]
 8000ede:	e040      	b.n	8000f62 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2077      	movs	r0, #119	; 0x77
 8000ee4:	f7ff ff1f 	bl	8000d26 <SD_SendCmd>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d808      	bhi.n	8000f00 <SD_disk_initialize+0x130>
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2069      	movs	r0, #105	; 0x69
 8000ef2:	f7ff ff18 	bl	8000d26 <SD_SendCmd>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d801      	bhi.n	8000f00 <SD_disk_initialize+0x130>
 8000efc:	2302      	movs	r3, #2
 8000efe:	e000      	b.n	8000f02 <SD_disk_initialize+0x132>
 8000f00:	2301      	movs	r3, #1
 8000f02:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000f04:	7bbb      	ldrb	r3, [r7, #14]
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d10e      	bne.n	8000f28 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	2077      	movs	r0, #119	; 0x77
 8000f0e:	f7ff ff0a 	bl	8000d26 <SD_SendCmd>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d80e      	bhi.n	8000f36 <SD_disk_initialize+0x166>
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2069      	movs	r0, #105	; 0x69
 8000f1c:	f7ff ff03 	bl	8000d26 <SD_SendCmd>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d107      	bne.n	8000f36 <SD_disk_initialize+0x166>
 8000f26:	e00d      	b.n	8000f44 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2041      	movs	r0, #65	; 0x41
 8000f2c:	f7ff fefb 	bl	8000d26 <SD_SendCmd>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d005      	beq.n	8000f42 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8000f36:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <SD_disk_initialize+0x1d0>)
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1e1      	bne.n	8000f04 <SD_disk_initialize+0x134>
 8000f40:	e000      	b.n	8000f44 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000f42:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <SD_disk_initialize+0x1d0>)
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d007      	beq.n	8000f5e <SD_disk_initialize+0x18e>
 8000f4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f52:	2050      	movs	r0, #80	; 0x50
 8000f54:	f7ff fee7 	bl	8000d26 <SD_SendCmd>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SD_disk_initialize+0x192>
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000f62:	4a10      	ldr	r2, [pc, #64]	; (8000fa4 <SD_disk_initialize+0x1d4>)
 8000f64:	7bbb      	ldrb	r3, [r7, #14]
 8000f66:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000f68:	f7ff fd8c 	bl	8000a84 <DESELECT>
	SPI_RxByte();
 8000f6c:	f7ff fdcc 	bl	8000b08 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000f70:	7bbb      	ldrb	r3, [r7, #14]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d008      	beq.n	8000f88 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <SD_disk_initialize+0x1cc>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	f023 0301 	bic.w	r3, r3, #1
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <SD_disk_initialize+0x1cc>)
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	e001      	b.n	8000f8c <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000f88:	f7ff fe44 	bl	8000c14 <SD_PowerOff>
	}

	return Stat;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <SD_disk_initialize+0x1cc>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b2db      	uxtb	r3, r3
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd90      	pop	{r4, r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	20000c92 	.word	0x20000c92
 8000fa4:	20000110 	.word	0x20000110

08000fa8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SD_disk_status+0x14>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e002      	b.n	8000fc2 <SD_disk_status+0x1a>
	return Stat;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <SD_disk_status+0x24>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b2db      	uxtb	r3, r3
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr
 8000fcc:	20000000 	.word	0x20000000

08000fd0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	4603      	mov	r3, r0
 8000fde:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d102      	bne.n	8000fec <SD_disk_read+0x1c>
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d101      	bne.n	8000ff0 <SD_disk_read+0x20>
 8000fec:	2304      	movs	r3, #4
 8000fee:	e051      	b.n	8001094 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ff0:	4b2a      	ldr	r3, [pc, #168]	; (800109c <SD_disk_read+0xcc>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <SD_disk_read+0x32>
 8000ffe:	2303      	movs	r3, #3
 8001000:	e048      	b.n	8001094 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001002:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <SD_disk_read+0xd0>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	2b00      	cmp	r3, #0
 800100c:	d102      	bne.n	8001014 <SD_disk_read+0x44>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	025b      	lsls	r3, r3, #9
 8001012:	607b      	str	r3, [r7, #4]

	SELECT();
 8001014:	f7ff fd28 	bl	8000a68 <SELECT>

	if (count == 1)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d111      	bne.n	8001042 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	2051      	movs	r0, #81	; 0x51
 8001022:	f7ff fe80 	bl	8000d26 <SD_SendCmd>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d129      	bne.n	8001080 <SD_disk_read+0xb0>
 800102c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001030:	68b8      	ldr	r0, [r7, #8]
 8001032:	f7ff fe05 	bl	8000c40 <SD_RxDataBlock>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d021      	beq.n	8001080 <SD_disk_read+0xb0>
 800103c:	2300      	movs	r3, #0
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	e01e      	b.n	8001080 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	2052      	movs	r0, #82	; 0x52
 8001046:	f7ff fe6e 	bl	8000d26 <SD_SendCmd>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d117      	bne.n	8001080 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001050:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001054:	68b8      	ldr	r0, [r7, #8]
 8001056:	f7ff fdf3 	bl	8000c40 <SD_RxDataBlock>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00a      	beq.n	8001076 <SD_disk_read+0xa6>
				buff += 512;
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001066:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	3b01      	subs	r3, #1
 800106c:	603b      	str	r3, [r7, #0]
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1ed      	bne.n	8001050 <SD_disk_read+0x80>
 8001074:	e000      	b.n	8001078 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001076:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001078:	2100      	movs	r1, #0
 800107a:	204c      	movs	r0, #76	; 0x4c
 800107c:	f7ff fe53 	bl	8000d26 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001080:	f7ff fd00 	bl	8000a84 <DESELECT>
	SPI_RxByte();
 8001084:	f7ff fd40 	bl	8000b08 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	bf14      	ite	ne
 800108e:	2301      	movne	r3, #1
 8001090:	2300      	moveq	r3, #0
 8001092:	b2db      	uxtb	r3, r3
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000000 	.word	0x20000000
 80010a0:	20000110 	.word	0x20000110

080010a4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	4603      	mov	r3, r0
 80010b2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d102      	bne.n	80010c0 <SD_disk_write+0x1c>
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d101      	bne.n	80010c4 <SD_disk_write+0x20>
 80010c0:	2304      	movs	r3, #4
 80010c2:	e06b      	b.n	800119c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80010c4:	4b37      	ldr	r3, [pc, #220]	; (80011a4 <SD_disk_write+0x100>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SD_disk_write+0x32>
 80010d2:	2303      	movs	r3, #3
 80010d4:	e062      	b.n	800119c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80010d6:	4b33      	ldr	r3, [pc, #204]	; (80011a4 <SD_disk_write+0x100>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <SD_disk_write+0x44>
 80010e4:	2302      	movs	r3, #2
 80010e6:	e059      	b.n	800119c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80010e8:	4b2f      	ldr	r3, [pc, #188]	; (80011a8 <SD_disk_write+0x104>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <SD_disk_write+0x56>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	025b      	lsls	r3, r3, #9
 80010f8:	607b      	str	r3, [r7, #4]

	SELECT();
 80010fa:	f7ff fcb5 	bl	8000a68 <SELECT>

	if (count == 1)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d110      	bne.n	8001126 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	2058      	movs	r0, #88	; 0x58
 8001108:	f7ff fe0d 	bl	8000d26 <SD_SendCmd>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d13a      	bne.n	8001188 <SD_disk_write+0xe4>
 8001112:	21fe      	movs	r1, #254	; 0xfe
 8001114:	68b8      	ldr	r0, [r7, #8]
 8001116:	f7ff fdc3 	bl	8000ca0 <SD_TxDataBlock>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d033      	beq.n	8001188 <SD_disk_write+0xe4>
			count = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	e030      	b.n	8001188 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <SD_disk_write+0x104>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d007      	beq.n	8001142 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001132:	2100      	movs	r1, #0
 8001134:	2077      	movs	r0, #119	; 0x77
 8001136:	f7ff fdf6 	bl	8000d26 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800113a:	6839      	ldr	r1, [r7, #0]
 800113c:	2057      	movs	r0, #87	; 0x57
 800113e:	f7ff fdf2 	bl	8000d26 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	2059      	movs	r0, #89	; 0x59
 8001146:	f7ff fdee 	bl	8000d26 <SD_SendCmd>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d11b      	bne.n	8001188 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001150:	21fc      	movs	r1, #252	; 0xfc
 8001152:	68b8      	ldr	r0, [r7, #8]
 8001154:	f7ff fda4 	bl	8000ca0 <SD_TxDataBlock>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d00a      	beq.n	8001174 <SD_disk_write+0xd0>
				buff += 512;
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001164:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	3b01      	subs	r3, #1
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1ee      	bne.n	8001150 <SD_disk_write+0xac>
 8001172:	e000      	b.n	8001176 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001174:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001176:	21fd      	movs	r1, #253	; 0xfd
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff fd91 	bl	8000ca0 <SD_TxDataBlock>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <SD_disk_write+0xe4>
			{
				count = 1;
 8001184:	2301      	movs	r3, #1
 8001186:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001188:	f7ff fc7c 	bl	8000a84 <DESELECT>
	SPI_RxByte();
 800118c:	f7ff fcbc 	bl	8000b08 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	bf14      	ite	ne
 8001196:	2301      	movne	r3, #1
 8001198:	2300      	moveq	r3, #0
 800119a:	b2db      	uxtb	r3, r3
}
 800119c:	4618      	mov	r0, r3
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000000 	.word	0x20000000
 80011a8:	20000110 	.word	0x20000110

080011ac <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80011ac:	b590      	push	{r4, r7, lr}
 80011ae:	b08b      	sub	sp, #44	; 0x2c
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	603a      	str	r2, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
 80011b8:	460b      	mov	r3, r1
 80011ba:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <SD_disk_ioctl+0x1e>
 80011c6:	2304      	movs	r3, #4
 80011c8:	e115      	b.n	80013f6 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80011d0:	79bb      	ldrb	r3, [r7, #6]
 80011d2:	2b05      	cmp	r3, #5
 80011d4:	d124      	bne.n	8001220 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80011d6:	6a3b      	ldr	r3, [r7, #32]
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d012      	beq.n	8001204 <SD_disk_ioctl+0x58>
 80011de:	2b02      	cmp	r3, #2
 80011e0:	dc1a      	bgt.n	8001218 <SD_disk_ioctl+0x6c>
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d002      	beq.n	80011ec <SD_disk_ioctl+0x40>
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d006      	beq.n	80011f8 <SD_disk_ioctl+0x4c>
 80011ea:	e015      	b.n	8001218 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80011ec:	f7ff fd12 	bl	8000c14 <SD_PowerOff>
			res = RES_OK;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80011f6:	e0fc      	b.n	80013f2 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80011f8:	f7ff fcca 	bl	8000b90 <SD_PowerOn>
			res = RES_OK;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001202:	e0f6      	b.n	80013f2 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001204:	6a3b      	ldr	r3, [r7, #32]
 8001206:	1c5c      	adds	r4, r3, #1
 8001208:	f7ff fd10 	bl	8000c2c <SD_CheckPower>
 800120c:	4603      	mov	r3, r0
 800120e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001210:	2300      	movs	r3, #0
 8001212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001216:	e0ec      	b.n	80013f2 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001218:	2304      	movs	r3, #4
 800121a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800121e:	e0e8      	b.n	80013f2 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001220:	4b77      	ldr	r3, [pc, #476]	; (8001400 <SD_disk_ioctl+0x254>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <SD_disk_ioctl+0x86>
 800122e:	2303      	movs	r3, #3
 8001230:	e0e1      	b.n	80013f6 <SD_disk_ioctl+0x24a>

		SELECT();
 8001232:	f7ff fc19 	bl	8000a68 <SELECT>

		switch (ctrl)
 8001236:	79bb      	ldrb	r3, [r7, #6]
 8001238:	2b0d      	cmp	r3, #13
 800123a:	f200 80cb 	bhi.w	80013d4 <SD_disk_ioctl+0x228>
 800123e:	a201      	add	r2, pc, #4	; (adr r2, 8001244 <SD_disk_ioctl+0x98>)
 8001240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001244:	0800133f 	.word	0x0800133f
 8001248:	0800127d 	.word	0x0800127d
 800124c:	0800132f 	.word	0x0800132f
 8001250:	080013d5 	.word	0x080013d5
 8001254:	080013d5 	.word	0x080013d5
 8001258:	080013d5 	.word	0x080013d5
 800125c:	080013d5 	.word	0x080013d5
 8001260:	080013d5 	.word	0x080013d5
 8001264:	080013d5 	.word	0x080013d5
 8001268:	080013d5 	.word	0x080013d5
 800126c:	080013d5 	.word	0x080013d5
 8001270:	08001351 	.word	0x08001351
 8001274:	08001375 	.word	0x08001375
 8001278:	08001399 	.word	0x08001399
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800127c:	2100      	movs	r1, #0
 800127e:	2049      	movs	r0, #73	; 0x49
 8001280:	f7ff fd51 	bl	8000d26 <SD_SendCmd>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	f040 80a8 	bne.w	80013dc <SD_disk_ioctl+0x230>
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	2110      	movs	r1, #16
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fcd4 	bl	8000c40 <SD_RxDataBlock>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 809e 	beq.w	80013dc <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80012a0:	7b3b      	ldrb	r3, [r7, #12]
 80012a2:	099b      	lsrs	r3, r3, #6
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d10e      	bne.n	80012c8 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80012aa:	7d7b      	ldrb	r3, [r7, #21]
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	7d3b      	ldrb	r3, [r7, #20]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	4413      	add	r3, r2
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	3301      	adds	r3, #1
 80012bc:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80012be:	8bfb      	ldrh	r3, [r7, #30]
 80012c0:	029a      	lsls	r2, r3, #10
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	e02e      	b.n	8001326 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80012c8:	7c7b      	ldrb	r3, [r7, #17]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	7dbb      	ldrb	r3, [r7, #22]
 80012d2:	09db      	lsrs	r3, r3, #7
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	4413      	add	r3, r2
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	7d7b      	ldrb	r3, [r7, #21]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	f003 0306 	and.w	r3, r3, #6
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	4413      	add	r3, r2
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	3302      	adds	r3, #2
 80012ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80012f0:	7d3b      	ldrb	r3, [r7, #20]
 80012f2:	099b      	lsrs	r3, r3, #6
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	7cfb      	ldrb	r3, [r7, #19]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	b29b      	uxth	r3, r3
 8001300:	4413      	add	r3, r2
 8001302:	b29a      	uxth	r2, r3
 8001304:	7cbb      	ldrb	r3, [r7, #18]
 8001306:	029b      	lsls	r3, r3, #10
 8001308:	b29b      	uxth	r3, r3
 800130a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800130e:	b29b      	uxth	r3, r3
 8001310:	4413      	add	r3, r2
 8001312:	b29b      	uxth	r3, r3
 8001314:	3301      	adds	r3, #1
 8001316:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001318:	8bfa      	ldrh	r2, [r7, #30]
 800131a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800131e:	3b09      	subs	r3, #9
 8001320:	409a      	lsls	r2, r3
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800132c:	e056      	b.n	80013dc <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001334:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001336:	2300      	movs	r3, #0
 8001338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800133c:	e055      	b.n	80013ea <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800133e:	f7ff fc0d 	bl	8000b5c <SD_ReadyWait>
 8001342:	4603      	mov	r3, r0
 8001344:	2bff      	cmp	r3, #255	; 0xff
 8001346:	d14b      	bne.n	80013e0 <SD_disk_ioctl+0x234>
 8001348:	2300      	movs	r3, #0
 800134a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800134e:	e047      	b.n	80013e0 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001350:	2100      	movs	r1, #0
 8001352:	2049      	movs	r0, #73	; 0x49
 8001354:	f7ff fce7 	bl	8000d26 <SD_SendCmd>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d142      	bne.n	80013e4 <SD_disk_ioctl+0x238>
 800135e:	2110      	movs	r1, #16
 8001360:	6a38      	ldr	r0, [r7, #32]
 8001362:	f7ff fc6d 	bl	8000c40 <SD_RxDataBlock>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d03b      	beq.n	80013e4 <SD_disk_ioctl+0x238>
 800136c:	2300      	movs	r3, #0
 800136e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001372:	e037      	b.n	80013e4 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001374:	2100      	movs	r1, #0
 8001376:	204a      	movs	r0, #74	; 0x4a
 8001378:	f7ff fcd5 	bl	8000d26 <SD_SendCmd>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d132      	bne.n	80013e8 <SD_disk_ioctl+0x23c>
 8001382:	2110      	movs	r1, #16
 8001384:	6a38      	ldr	r0, [r7, #32]
 8001386:	f7ff fc5b 	bl	8000c40 <SD_RxDataBlock>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d02b      	beq.n	80013e8 <SD_disk_ioctl+0x23c>
 8001390:	2300      	movs	r3, #0
 8001392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001396:	e027      	b.n	80013e8 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001398:	2100      	movs	r1, #0
 800139a:	207a      	movs	r0, #122	; 0x7a
 800139c:	f7ff fcc3 	bl	8000d26 <SD_SendCmd>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d116      	bne.n	80013d4 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80013ac:	e00b      	b.n	80013c6 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80013ae:	6a3c      	ldr	r4, [r7, #32]
 80013b0:	1c63      	adds	r3, r4, #1
 80013b2:	623b      	str	r3, [r7, #32]
 80013b4:	f7ff fba8 	bl	8000b08 <SPI_RxByte>
 80013b8:	4603      	mov	r3, r0
 80013ba:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80013bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013c0:	3301      	adds	r3, #1
 80013c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80013c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013ca:	2b03      	cmp	r3, #3
 80013cc:	d9ef      	bls.n	80013ae <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80013d4:	2304      	movs	r3, #4
 80013d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80013da:	e006      	b.n	80013ea <SD_disk_ioctl+0x23e>
			break;
 80013dc:	bf00      	nop
 80013de:	e004      	b.n	80013ea <SD_disk_ioctl+0x23e>
			break;
 80013e0:	bf00      	nop
 80013e2:	e002      	b.n	80013ea <SD_disk_ioctl+0x23e>
			break;
 80013e4:	bf00      	nop
 80013e6:	e000      	b.n	80013ea <SD_disk_ioctl+0x23e>
			break;
 80013e8:	bf00      	nop
		}

		DESELECT();
 80013ea:	f7ff fb4b 	bl	8000a84 <DESELECT>
		SPI_RxByte();
 80013ee:	f7ff fb8b 	bl	8000b08 <SPI_RxByte>
	}

	return res;
 80013f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	372c      	adds	r7, #44	; 0x2c
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd90      	pop	{r4, r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000000 	.word	0x20000000

08001404 <lcd_send_cmd>:
#define Rw 0x02  // Read/Write bit
#define Rs 0x01  // Register select bit
#define LCD_BACKLIGHT 0x08

void lcd_send_cmd (char cmd)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af02      	add	r7, sp, #8
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	f023 030f 	bic.w	r3, r3, #15
 8001414:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	f043 030c 	orr.w	r3, r3, #12
 8001422:	b2db      	uxtb	r3, r3
 8001424:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	f043 0308 	orr.w	r3, r3, #8
 800142c:	b2db      	uxtb	r3, r3
 800142e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001430:	7bbb      	ldrb	r3, [r7, #14]
 8001432:	f043 030c 	orr.w	r3, r3, #12
 8001436:	b2db      	uxtb	r3, r3
 8001438:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800143a:	7bbb      	ldrb	r3, [r7, #14]
 800143c:	f043 0308 	orr.w	r3, r3, #8
 8001440:	b2db      	uxtb	r3, r3
 8001442:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001444:	f107 0208 	add.w	r2, r7, #8
 8001448:	2364      	movs	r3, #100	; 0x64
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2304      	movs	r3, #4
 800144e:	214e      	movs	r1, #78	; 0x4e
 8001450:	4803      	ldr	r0, [pc, #12]	; (8001460 <lcd_send_cmd+0x5c>)
 8001452:	f003 fbbd 	bl	8004bd0 <HAL_I2C_Master_Transmit>
}
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000658 	.word	0x20000658

08001464 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af02      	add	r7, sp, #8
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	f023 030f 	bic.w	r3, r3, #15
 8001474:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	f043 030d 	orr.w	r3, r3, #13
 8001482:	b2db      	uxtb	r3, r3
 8001484:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	f043 0309 	orr.w	r3, r3, #9
 800148c:	b2db      	uxtb	r3, r3
 800148e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8001490:	7bbb      	ldrb	r3, [r7, #14]
 8001492:	f043 030d 	orr.w	r3, r3, #13
 8001496:	b2db      	uxtb	r3, r3
 8001498:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 800149a:	7bbb      	ldrb	r3, [r7, #14]
 800149c:	f043 0309 	orr.w	r3, r3, #9
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80014a4:	f107 0208 	add.w	r2, r7, #8
 80014a8:	2364      	movs	r3, #100	; 0x64
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2304      	movs	r3, #4
 80014ae:	214e      	movs	r1, #78	; 0x4e
 80014b0:	4803      	ldr	r0, [pc, #12]	; (80014c0 <lcd_send_data+0x5c>)
 80014b2:	f003 fb8d 	bl	8004bd0 <HAL_I2C_Master_Transmit>
}
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000658 	.word	0x20000658

080014c4 <lcd_clear>:


void lcd_clear (void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80014ca:	2080      	movs	r0, #128	; 0x80
 80014cc:	f7ff ff9a 	bl	8001404 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80014d0:	2300      	movs	r3, #0
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	e005      	b.n	80014e2 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80014d6:	2020      	movs	r0, #32
 80014d8:	f7ff ffc4 	bl	8001464 <lcd_send_data>
	for (int i=0; i<70; i++)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3301      	adds	r3, #1
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b45      	cmp	r3, #69	; 0x45
 80014e6:	ddf6      	ble.n	80014d6 <lcd_clear+0x12>
	}
}
 80014e8:	bf00      	nop
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	6039      	str	r1, [r7, #0]
    switch (row)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <lcd_put_cur+0x18>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d005      	beq.n	8001514 <lcd_put_cur+0x22>
 8001508:	e009      	b.n	800151e <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001510:	603b      	str	r3, [r7, #0]
            break;
 8001512:	e004      	b.n	800151e <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800151a:	603b      	str	r3, [r7, #0]
            break;
 800151c:	bf00      	nop
    }

    lcd_send_cmd (col);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff ff6e 	bl	8001404 <lcd_send_cmd>
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <lcd_init>:


void lcd_init (void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001534:	2032      	movs	r0, #50	; 0x32
 8001536:	f002 fbc7 	bl	8003cc8 <HAL_Delay>
	lcd_send_cmd (0x30);
 800153a:	2030      	movs	r0, #48	; 0x30
 800153c:	f7ff ff62 	bl	8001404 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001540:	2005      	movs	r0, #5
 8001542:	f002 fbc1 	bl	8003cc8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001546:	2030      	movs	r0, #48	; 0x30
 8001548:	f7ff ff5c 	bl	8001404 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800154c:	2001      	movs	r0, #1
 800154e:	f002 fbbb 	bl	8003cc8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001552:	2030      	movs	r0, #48	; 0x30
 8001554:	f7ff ff56 	bl	8001404 <lcd_send_cmd>
	HAL_Delay(10);
 8001558:	200a      	movs	r0, #10
 800155a:	f002 fbb5 	bl	8003cc8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800155e:	2020      	movs	r0, #32
 8001560:	f7ff ff50 	bl	8001404 <lcd_send_cmd>
	HAL_Delay(10);
 8001564:	200a      	movs	r0, #10
 8001566:	f002 fbaf 	bl	8003cc8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800156a:	2028      	movs	r0, #40	; 0x28
 800156c:	f7ff ff4a 	bl	8001404 <lcd_send_cmd>
	HAL_Delay(1);
 8001570:	2001      	movs	r0, #1
 8001572:	f002 fba9 	bl	8003cc8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001576:	2008      	movs	r0, #8
 8001578:	f7ff ff44 	bl	8001404 <lcd_send_cmd>
	HAL_Delay(1);
 800157c:	2001      	movs	r0, #1
 800157e:	f002 fba3 	bl	8003cc8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001582:	2001      	movs	r0, #1
 8001584:	f7ff ff3e 	bl	8001404 <lcd_send_cmd>
	HAL_Delay(1);
 8001588:	2001      	movs	r0, #1
 800158a:	f002 fb9d 	bl	8003cc8 <HAL_Delay>
	HAL_Delay(1);
 800158e:	2001      	movs	r0, #1
 8001590:	f002 fb9a 	bl	8003cc8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001594:	2006      	movs	r0, #6
 8001596:	f7ff ff35 	bl	8001404 <lcd_send_cmd>
	HAL_Delay(1);
 800159a:	2001      	movs	r0, #1
 800159c:	f002 fb94 	bl	8003cc8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80015a0:	200c      	movs	r0, #12
 80015a2:	f7ff ff2f 	bl	8001404 <lcd_send_cmd>
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}

080015aa <lcd_send_string>:

void lcd_send_string (char *str)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80015b2:	e006      	b.n	80015c2 <lcd_send_string+0x18>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	1c5a      	adds	r2, r3, #1
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff51 	bl	8001464 <lcd_send_data>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f4      	bne.n	80015b4 <lcd_send_string+0xa>
}
 80015ca:	bf00      	nop
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <lcd_create_character>:


void lcd_create_character  (uint8_t location, const char *charmap){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
	location &= 0x7;
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	71fb      	strb	r3, [r7, #7]
	uint8_t comando = 0x40;
 80015e8:	2340      	movs	r3, #64	; 0x40
 80015ea:	73bb      	strb	r3, [r7, #14]
	comando |= (location << 3);
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	b25a      	sxtb	r2, r3
 80015f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	b25b      	sxtb	r3, r3
 80015fa:	73bb      	strb	r3, [r7, #14]
	lcd_send_cmd(comando);
 80015fc:	7bbb      	ldrb	r3, [r7, #14]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff ff00 	bl	8001404 <lcd_send_cmd>
	HAL_Delay(1);
 8001604:	2001      	movs	r0, #1
 8001606:	f002 fb5f 	bl	8003cc8 <HAL_Delay>
	for (uint8_t i=0; i<8; i++) {
 800160a:	2300      	movs	r3, #0
 800160c:	73fb      	strb	r3, [r7, #15]
 800160e:	e009      	b.n	8001624 <lcd_create_character+0x50>
		lcd_send_data(*charmap++);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	1c5a      	adds	r2, r3, #1
 8001614:	603a      	str	r2, [r7, #0]
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff23 	bl	8001464 <lcd_send_data>
	for (uint8_t i=0; i<8; i++) {
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	3301      	adds	r3, #1
 8001622:	73fb      	strb	r3, [r7, #15]
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	2b07      	cmp	r3, #7
 8001628:	d9f2      	bls.n	8001610 <lcd_create_character+0x3c>
	}
}
 800162a:	bf00      	nop
 800162c:	bf00      	nop
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <lcd_write>:

void lcd_write(uint8_t value) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
	lcd_send_data(value);
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff0f 	bl	8001464 <lcd_send_data>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <User_I2C1_GeneralPurposeOutput_Init>:
char buffer[BUFFER_SIZE];  // to store strings..

int i=0;

static void User_I2C1_GeneralPurposeOutput_Init(I2C_HandleTypeDef* i2cHandle)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct;
    if(i2cHandle->Instance==I2C1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a09      	ldr	r2, [pc, #36]	; (8001684 <User_I2C1_GeneralPurposeOutput_Init+0x34>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d10b      	bne.n	800167a <User_I2C1_GeneralPurposeOutput_Init+0x2a>
    {
        /*   PB10     ------> I2C2_SCL; PB11     ------> I2C2_SDA */
        GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001662:	23c0      	movs	r3, #192	; 0xc0
 8001664:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001666:	2311      	movs	r3, #17
 8001668:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800166a:	2303      	movs	r3, #3
 800166c:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166e:	f107 0308 	add.w	r3, r7, #8
 8001672:	4619      	mov	r1, r3
 8001674:	4804      	ldr	r0, [pc, #16]	; (8001688 <User_I2C1_GeneralPurposeOutput_Init+0x38>)
 8001676:	f002 fef7 	bl	8004468 <HAL_GPIO_Init>
    }
}
 800167a:	bf00      	nop
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40005400 	.word	0x40005400
 8001688:	40010c00 	.word	0x40010c00

0800168c <User_I2C1_AlternateFunction_Init>:


static void User_I2C1_AlternateFunction_Init(I2C_HandleTypeDef* i2cHandle)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct;
    if(i2cHandle->Instance==I2C1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a09      	ldr	r2, [pc, #36]	; (80016c0 <User_I2C1_AlternateFunction_Init+0x34>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d10b      	bne.n	80016b6 <User_I2C1_AlternateFunction_Init+0x2a>
    {
        /*   PB10     ------> I2C2_SCL; PB11     ------> I2C2_SDA */
        GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800169e:	23c0      	movs	r3, #192	; 0xc0
 80016a0:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a2:	2312      	movs	r3, #18
 80016a4:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016a6:	2303      	movs	r3, #3
 80016a8:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	4619      	mov	r1, r3
 80016b0:	4804      	ldr	r0, [pc, #16]	; (80016c4 <User_I2C1_AlternateFunction_Init+0x38>)
 80016b2:	f002 fed9 	bl	8004468 <HAL_GPIO_Init>
    }
}
 80016b6:	bf00      	nop
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40005400 	.word	0x40005400
 80016c4:	40010c00 	.word	0x40010c00

080016c8 <I2CResetBus>:

HAL_StatusTypeDef I2CResetBus(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
    hi2c1.ErrorCode = HAL_I2C_ERROR_AF;
 80016cc:	4b4a      	ldr	r3, [pc, #296]	; (80017f8 <I2CResetBus+0x130>)
 80016ce:	2204      	movs	r2, #4
 80016d0:	641a      	str	r2, [r3, #64]	; 0x40
    /* 1. Disable the I2C peripheral by clearing the PE bit in I2Cx_CR1 register */
    __HAL_I2C_DISABLE(&hi2c1);
 80016d2:	4b49      	ldr	r3, [pc, #292]	; (80017f8 <I2CResetBus+0x130>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b47      	ldr	r3, [pc, #284]	; (80017f8 <I2CResetBus+0x130>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 0201 	bic.w	r2, r2, #1
 80016e0:	601a      	str	r2, [r3, #0]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 80016e2:	21c0      	movs	r1, #192	; 0xc0
 80016e4:	4845      	ldr	r0, [pc, #276]	; (80017fc <I2CResetBus+0x134>)
 80016e6:	f003 f843 	bl	8004770 <HAL_GPIO_DeInit>

    /* 2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR) */
    User_I2C1_GeneralPurposeOutput_Init(&hi2c1);
 80016ea:	4843      	ldr	r0, [pc, #268]	; (80017f8 <I2CResetBus+0x130>)
 80016ec:	f7ff ffb0 	bl	8001650 <User_I2C1_GeneralPurposeOutput_Init>
    HAL_Delay(1);
 80016f0:	2001      	movs	r0, #1
 80016f2:	f002 fae9 	bl	8003cc8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_SET);
 80016f6:	2201      	movs	r2, #1
 80016f8:	21c0      	movs	r1, #192	; 0xc0
 80016fa:	4840      	ldr	r0, [pc, #256]	; (80017fc <I2CResetBus+0x134>)
 80016fc:	f003 f90b 	bl	8004916 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001700:	2001      	movs	r0, #1
 8001702:	f002 fae1 	bl	8003cc8 <HAL_Delay>

    /* 3. Check SCL and SDA High level in GPIOx_IDR */
    if ((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET)||(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET))
 8001706:	2140      	movs	r1, #64	; 0x40
 8001708:	483c      	ldr	r0, [pc, #240]	; (80017fc <I2CResetBus+0x134>)
 800170a:	f003 f8ed 	bl	80048e8 <HAL_GPIO_ReadPin>
 800170e:	4603      	mov	r3, r0
 8001710:	2b01      	cmp	r3, #1
 8001712:	d106      	bne.n	8001722 <I2CResetBus+0x5a>
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	4839      	ldr	r0, [pc, #228]	; (80017fc <I2CResetBus+0x134>)
 8001718:	f003 f8e6 	bl	80048e8 <HAL_GPIO_ReadPin>
 800171c:	4603      	mov	r3, r0
 800171e:	2b01      	cmp	r3, #1
 8001720:	d001      	beq.n	8001726 <I2CResetBus+0x5e>
    {
#ifdef I2C_TEST
        printf("3.PB6=%d, PB7=%d\r\n", HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6), HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7));
#endif
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e065      	b.n	80017f2 <I2CResetBus+0x12a>
    /* 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
     * 5. Check SDA Low level in GPIOx_IDR.
     * 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR)
     * 7. Check SCL Low level in GPIOx_IDR.
     * */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	21c0      	movs	r1, #192	; 0xc0
 800172a:	4834      	ldr	r0, [pc, #208]	; (80017fc <I2CResetBus+0x134>)
 800172c:	f003 f8f3 	bl	8004916 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001730:	2001      	movs	r0, #1
 8001732:	f002 fac9 	bl	8003cc8 <HAL_Delay>
    if ((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_RESET)||(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_RESET))
 8001736:	2140      	movs	r1, #64	; 0x40
 8001738:	4830      	ldr	r0, [pc, #192]	; (80017fc <I2CResetBus+0x134>)
 800173a:	f003 f8d5 	bl	80048e8 <HAL_GPIO_ReadPin>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d106      	bne.n	8001752 <I2CResetBus+0x8a>
 8001744:	2180      	movs	r1, #128	; 0x80
 8001746:	482d      	ldr	r0, [pc, #180]	; (80017fc <I2CResetBus+0x134>)
 8001748:	f003 f8ce 	bl	80048e8 <HAL_GPIO_ReadPin>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <I2CResetBus+0x8e>
    {
#ifdef I2C_TEST
        printf("4-7.PB6=%d, PB7=%d\r\n", HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6), HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7));
#endif
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e04d      	b.n	80017f2 <I2CResetBus+0x12a>
     * 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
     * 9. Check SCL High level in GPIOx_IDR.
     * 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
     * 11. Check SDA High level in GPIOx_IDR.
     */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8001756:	2201      	movs	r2, #1
 8001758:	21c0      	movs	r1, #192	; 0xc0
 800175a:	4828      	ldr	r0, [pc, #160]	; (80017fc <I2CResetBus+0x134>)
 800175c:	f003 f8db 	bl	8004916 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001760:	2001      	movs	r0, #1
 8001762:	f002 fab1 	bl	8003cc8 <HAL_Delay>
    if ((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET)||(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET))
 8001766:	2140      	movs	r1, #64	; 0x40
 8001768:	4824      	ldr	r0, [pc, #144]	; (80017fc <I2CResetBus+0x134>)
 800176a:	f003 f8bd 	bl	80048e8 <HAL_GPIO_ReadPin>
 800176e:	4603      	mov	r3, r0
 8001770:	2b01      	cmp	r3, #1
 8001772:	d106      	bne.n	8001782 <I2CResetBus+0xba>
 8001774:	2180      	movs	r1, #128	; 0x80
 8001776:	4821      	ldr	r0, [pc, #132]	; (80017fc <I2CResetBus+0x134>)
 8001778:	f003 f8b6 	bl	80048e8 <HAL_GPIO_ReadPin>
 800177c:	4603      	mov	r3, r0
 800177e:	2b01      	cmp	r3, #1
 8001780:	d001      	beq.n	8001786 <I2CResetBus+0xbe>
    {
#ifdef I2C_TEST
        printf("8-11.PB6=%d, PB7=%d\r\n", HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6), HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7));
#endif
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e035      	b.n	80017f2 <I2CResetBus+0x12a>
    }

    /* 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain. */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8001786:	21c0      	movs	r1, #192	; 0xc0
 8001788:	481c      	ldr	r0, [pc, #112]	; (80017fc <I2CResetBus+0x134>)
 800178a:	f002 fff1 	bl	8004770 <HAL_GPIO_DeInit>
    User_I2C1_AlternateFunction_Init(&hi2c1);
 800178e:	481a      	ldr	r0, [pc, #104]	; (80017f8 <I2CResetBus+0x130>)
 8001790:	f7ff ff7c 	bl	800168c <User_I2C1_AlternateFunction_Init>

    /* 13. Set SWRST bit in I2Cx_CR1 register. */
    hi2c1.Instance->CR1 |=  I2C_CR1_SWRST;
 8001794:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <I2CResetBus+0x130>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <I2CResetBus+0x130>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017a2:	601a      	str	r2, [r3, #0]
    HAL_Delay(2);
 80017a4:	2002      	movs	r0, #2
 80017a6:	f002 fa8f 	bl	8003cc8 <HAL_Delay>
    /* 14. Clear SWRST bit in I2Cx_CR1 register. */
    hi2c1.Instance->CR1 &=  ~I2C_CR1_SWRST;
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <I2CResetBus+0x130>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <I2CResetBus+0x130>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017b8:	601a      	str	r2, [r3, #0]
    HAL_Delay(2);
 80017ba:	2002      	movs	r0, #2
 80017bc:	f002 fa84 	bl	8003cc8 <HAL_Delay>
    /* 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register */
    MX_I2C1_Init();
 80017c0:	f001 fdbc 	bl	800333c <MX_I2C1_Init>
    __HAL_I2C_ENABLE(&hi2c1);
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <I2CResetBus+0x130>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <I2CResetBus+0x130>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f042 0201 	orr.w	r2, r2, #1
 80017d2:	601a      	str	r2, [r3, #0]
    HAL_Delay(2);
 80017d4:	2002      	movs	r0, #2
 80017d6:	f002 fa77 	bl	8003cc8 <HAL_Delay>
#ifdef I2C_TEST
    printf("I2CResetBus\r\n");
#endif
    hi2c1.ErrorCode = HAL_I2C_ERROR_NONE;
 80017da:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <I2CResetBus+0x130>)
 80017dc:	2200      	movs	r2, #0
 80017de:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c1.State = HAL_I2C_STATE_READY;
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <I2CResetBus+0x130>)
 80017e2:	2220      	movs	r2, #32
 80017e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    //hi2c1.PreviousState = I2C_STATE_NONE;
    hi2c1.Mode = HAL_I2C_MODE_NONE;
 80017e8:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <I2CResetBus+0x130>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000658 	.word	0x20000658
 80017fc:	40010c00 	.word	0x40010c00

08001800 <bcdToDec>:

uint8_t decToBcd(int val){
  return (uint8_t)( (val/10*16) + (val%10) );
}
// Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val){
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	b2db      	uxtb	r3, r3
 8001810:	461a      	mov	r2, r3
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	461a      	mov	r2, r3
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	4413      	add	r3, r2
}
 8001824:	4618      	mov	r0, r3
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr
	...

08001830 <Get_Time>:

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
}

void Get_Time (void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af04      	add	r7, sp, #16
	HAL_Delay(1);
 8001836:	2001      	movs	r0, #1
 8001838:	f002 fa46 	bl	8003cc8 <HAL_Delay>
	uint8_t est_rtc;
	uint8_t conteo = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	71bb      	strb	r3, [r7, #6]
	est_rtc = HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 17, 200);
 8001840:	23c8      	movs	r3, #200	; 0xc8
 8001842:	9302      	str	r3, [sp, #8]
 8001844:	2311      	movs	r3, #17
 8001846:	9301      	str	r3, [sp, #4]
 8001848:	4b35      	ldr	r3, [pc, #212]	; (8001920 <Get_Time+0xf0>)
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	2301      	movs	r3, #1
 800184e:	2200      	movs	r2, #0
 8001850:	21d0      	movs	r1, #208	; 0xd0
 8001852:	4834      	ldr	r0, [pc, #208]	; (8001924 <Get_Time+0xf4>)
 8001854:	f003 faba 	bl	8004dcc <HAL_I2C_Mem_Read>
 8001858:	4603      	mov	r3, r0
 800185a:	71fb      	strb	r3, [r7, #7]
	while(est_rtc != HAL_OK){
 800185c:	e017      	b.n	800188e <Get_Time+0x5e>
		est_rtc = HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 17, 50);
 800185e:	2332      	movs	r3, #50	; 0x32
 8001860:	9302      	str	r3, [sp, #8]
 8001862:	2311      	movs	r3, #17
 8001864:	9301      	str	r3, [sp, #4]
 8001866:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <Get_Time+0xf0>)
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2301      	movs	r3, #1
 800186c:	2200      	movs	r2, #0
 800186e:	21d0      	movs	r1, #208	; 0xd0
 8001870:	482c      	ldr	r0, [pc, #176]	; (8001924 <Get_Time+0xf4>)
 8001872:	f003 faab 	bl	8004dcc <HAL_I2C_Mem_Read>
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
		conteo++;
 800187a:	79bb      	ldrb	r3, [r7, #6]
 800187c:	3301      	adds	r3, #1
 800187e:	71bb      	strb	r3, [r7, #6]
		if(conteo > 2) {
 8001880:	79bb      	ldrb	r3, [r7, #6]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d903      	bls.n	800188e <Get_Time+0x5e>
			I2CResetBus();
 8001886:	f7ff ff1f 	bl	80016c8 <I2CResetBus>
			conteo = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	71bb      	strb	r3, [r7, #6]
	while(est_rtc != HAL_OK){
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1e4      	bne.n	800185e <Get_Time+0x2e>
		}
	}
	HAL_Delay(1);
 8001894:	2001      	movs	r0, #1
 8001896:	f002 fa17 	bl	8003cc8 <HAL_Delay>
	time.seconds = bcdToDec(get_time[0]);
 800189a:	4b21      	ldr	r3, [pc, #132]	; (8001920 <Get_Time+0xf0>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff ffae 	bl	8001800 <bcdToDec>
 80018a4:	4603      	mov	r3, r0
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <Get_Time+0xf8>)
 80018aa:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 80018ac:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <Get_Time+0xf0>)
 80018ae:	785b      	ldrb	r3, [r3, #1]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ffa5 	bl	8001800 <bcdToDec>
 80018b6:	4603      	mov	r3, r0
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <Get_Time+0xf8>)
 80018bc:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 80018be:	4b18      	ldr	r3, [pc, #96]	; (8001920 <Get_Time+0xf0>)
 80018c0:	789b      	ldrb	r3, [r3, #2]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff ff9c 	bl	8001800 <bcdToDec>
 80018c8:	4603      	mov	r3, r0
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	4b16      	ldr	r3, [pc, #88]	; (8001928 <Get_Time+0xf8>)
 80018ce:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <Get_Time+0xf0>)
 80018d2:	78db      	ldrb	r3, [r3, #3]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff93 	bl	8001800 <bcdToDec>
 80018da:	4603      	mov	r3, r0
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4b12      	ldr	r3, [pc, #72]	; (8001928 <Get_Time+0xf8>)
 80018e0:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 80018e2:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <Get_Time+0xf0>)
 80018e4:	791b      	ldrb	r3, [r3, #4]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff ff8a 	bl	8001800 <bcdToDec>
 80018ec:	4603      	mov	r3, r0
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <Get_Time+0xf8>)
 80018f2:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 80018f4:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <Get_Time+0xf0>)
 80018f6:	795b      	ldrb	r3, [r3, #5]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff81 	bl	8001800 <bcdToDec>
 80018fe:	4603      	mov	r3, r0
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <Get_Time+0xf8>)
 8001904:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <Get_Time+0xf0>)
 8001908:	799b      	ldrb	r3, [r3, #6]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff ff78 	bl	8001800 <bcdToDec>
 8001910:	4603      	mov	r3, r0
 8001912:	b2da      	uxtb	r2, r3
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <Get_Time+0xf8>)
 8001916:	719a      	strb	r2, [r3, #6]
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000644 	.word	0x20000644
 8001924:	20000658 	.word	0x20000658
 8001928:	200007c0 	.word	0x200007c0

0800192c <pcf1_send>:
char buffer1[11];


void pcf1_send (uint8_t data){
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af02      	add	r7, sp, #8
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
	uint8_t dato1[1];
	dato1[0]= data;
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, Address_PCF1 , dato1, 1, 100);
 800193a:	f107 020c 	add.w	r2, r7, #12
 800193e:	2364      	movs	r3, #100	; 0x64
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2301      	movs	r3, #1
 8001944:	2144      	movs	r1, #68	; 0x44
 8001946:	4803      	ldr	r0, [pc, #12]	; (8001954 <pcf1_send+0x28>)
 8001948:	f003 f942 	bl	8004bd0 <HAL_I2C_Master_Transmit>
}
 800194c:	bf00      	nop
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000658 	.word	0x20000658

08001958 <pcf2_send>:

void pcf2_send (uint8_t data){
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af02      	add	r7, sp, #8
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
	uint8_t dato2[1];
	dato2[0]= data;
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, Address_PCF2 , dato2, 1, 100);
 8001966:	f107 020c 	add.w	r2, r7, #12
 800196a:	2364      	movs	r3, #100	; 0x64
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	2301      	movs	r3, #1
 8001970:	2148      	movs	r1, #72	; 0x48
 8001972:	4803      	ldr	r0, [pc, #12]	; (8001980 <pcf2_send+0x28>)
 8001974:	f003 f92c 	bl	8004bd0 <HAL_I2C_Master_Transmit>
}
 8001978:	bf00      	nop
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000658 	.word	0x20000658

08001984 <Pulsadores>:

void Pulsadores(void){
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
	est_right 	= HAL_GPIO_ReadPin(entrada1_GPIO_Port, entrada1_Pin);
 8001988:	2110      	movs	r1, #16
 800198a:	4859      	ldr	r0, [pc, #356]	; (8001af0 <Pulsadores+0x16c>)
 800198c:	f002 ffac 	bl	80048e8 <HAL_GPIO_ReadPin>
 8001990:	4603      	mov	r3, r0
 8001992:	461a      	mov	r2, r3
 8001994:	4b57      	ldr	r3, [pc, #348]	; (8001af4 <Pulsadores+0x170>)
 8001996:	701a      	strb	r2, [r3, #0]
	est_left 	= HAL_GPIO_ReadPin(entrada2_GPIO_Port, entrada2_Pin);
 8001998:	2108      	movs	r1, #8
 800199a:	4855      	ldr	r0, [pc, #340]	; (8001af0 <Pulsadores+0x16c>)
 800199c:	f002 ffa4 	bl	80048e8 <HAL_GPIO_ReadPin>
 80019a0:	4603      	mov	r3, r0
 80019a2:	461a      	mov	r2, r3
 80019a4:	4b54      	ldr	r3, [pc, #336]	; (8001af8 <Pulsadores+0x174>)
 80019a6:	701a      	strb	r2, [r3, #0]
	est_down 	= HAL_GPIO_ReadPin(entrada3_GPIO_Port, entrada3_Pin);
 80019a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019ac:	4853      	ldr	r0, [pc, #332]	; (8001afc <Pulsadores+0x178>)
 80019ae:	f002 ff9b 	bl	80048e8 <HAL_GPIO_ReadPin>
 80019b2:	4603      	mov	r3, r0
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b52      	ldr	r3, [pc, #328]	; (8001b00 <Pulsadores+0x17c>)
 80019b8:	701a      	strb	r2, [r3, #0]
	est_up 		= HAL_GPIO_ReadPin(entrada4_GPIO_Port, entrada4_Pin);
 80019ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019be:	484c      	ldr	r0, [pc, #304]	; (8001af0 <Pulsadores+0x16c>)
 80019c0:	f002 ff92 	bl	80048e8 <HAL_GPIO_ReadPin>
 80019c4:	4603      	mov	r3, r0
 80019c6:	461a      	mov	r2, r3
 80019c8:	4b4e      	ldr	r3, [pc, #312]	; (8001b04 <Pulsadores+0x180>)
 80019ca:	701a      	strb	r2, [r3, #0]

	//-------Configuracion de PULSADOR UP-------
	if((seg_up == 1)&&(est_up == 0)){
 80019cc:	4b4e      	ldr	r3, [pc, #312]	; (8001b08 <Pulsadores+0x184>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d106      	bne.n	80019e2 <Pulsadores+0x5e>
 80019d4:	4b4b      	ldr	r3, [pc, #300]	; (8001b04 <Pulsadores+0x180>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d102      	bne.n	80019e2 <Pulsadores+0x5e>
		seg_up = 0;
 80019dc:	4b4a      	ldr	r3, [pc, #296]	; (8001b08 <Pulsadores+0x184>)
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]
	}
	if((seg_up == 1)&&(est_up == 1)){
 80019e2:	4b49      	ldr	r3, [pc, #292]	; (8001b08 <Pulsadores+0x184>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d106      	bne.n	80019f8 <Pulsadores+0x74>
 80019ea:	4b46      	ldr	r3, [pc, #280]	; (8001b04 <Pulsadores+0x180>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d102      	bne.n	80019f8 <Pulsadores+0x74>
	    est_up = 0;
 80019f2:	4b44      	ldr	r3, [pc, #272]	; (8001b04 <Pulsadores+0x180>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
	}
	if((seg_up == 0)&&(est_up == 1)){
 80019f8:	4b43      	ldr	r3, [pc, #268]	; (8001b08 <Pulsadores+0x184>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d109      	bne.n	8001a14 <Pulsadores+0x90>
 8001a00:	4b40      	ldr	r3, [pc, #256]	; (8001b04 <Pulsadores+0x180>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d105      	bne.n	8001a14 <Pulsadores+0x90>
	    est_up = 1;
 8001a08:	4b3e      	ldr	r3, [pc, #248]	; (8001b04 <Pulsadores+0x180>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	701a      	strb	r2, [r3, #0]
	    seg_up = 1;
 8001a0e:	4b3e      	ldr	r3, [pc, #248]	; (8001b08 <Pulsadores+0x184>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
	}
	//-------Configuracion de PULSADOR DOWN-------
	if((seg_down == 1)&&(est_down == 0)){
 8001a14:	4b3d      	ldr	r3, [pc, #244]	; (8001b0c <Pulsadores+0x188>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d106      	bne.n	8001a2a <Pulsadores+0xa6>
 8001a1c:	4b38      	ldr	r3, [pc, #224]	; (8001b00 <Pulsadores+0x17c>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <Pulsadores+0xa6>
	    seg_down = 0;
 8001a24:	4b39      	ldr	r3, [pc, #228]	; (8001b0c <Pulsadores+0x188>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
	}
	if((seg_down == 1)&&(est_down == 1)){
 8001a2a:	4b38      	ldr	r3, [pc, #224]	; (8001b0c <Pulsadores+0x188>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d106      	bne.n	8001a40 <Pulsadores+0xbc>
 8001a32:	4b33      	ldr	r3, [pc, #204]	; (8001b00 <Pulsadores+0x17c>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d102      	bne.n	8001a40 <Pulsadores+0xbc>
	    est_down = 0;
 8001a3a:	4b31      	ldr	r3, [pc, #196]	; (8001b00 <Pulsadores+0x17c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
	}
	if((seg_down == 0)&&(est_down == 1)){
 8001a40:	4b32      	ldr	r3, [pc, #200]	; (8001b0c <Pulsadores+0x188>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d109      	bne.n	8001a5c <Pulsadores+0xd8>
 8001a48:	4b2d      	ldr	r3, [pc, #180]	; (8001b00 <Pulsadores+0x17c>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d105      	bne.n	8001a5c <Pulsadores+0xd8>
	    est_down = 1;
 8001a50:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <Pulsadores+0x17c>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	701a      	strb	r2, [r3, #0]
	    seg_down = 1;
 8001a56:	4b2d      	ldr	r3, [pc, #180]	; (8001b0c <Pulsadores+0x188>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	701a      	strb	r2, [r3, #0]
	}
	//-------Configuracion de PULSADOR LEFT-------
	if((seg_left == 1)&&(est_left == 0)){
 8001a5c:	4b2c      	ldr	r3, [pc, #176]	; (8001b10 <Pulsadores+0x18c>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d106      	bne.n	8001a72 <Pulsadores+0xee>
 8001a64:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <Pulsadores+0x174>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d102      	bne.n	8001a72 <Pulsadores+0xee>
	    seg_left = 0;
 8001a6c:	4b28      	ldr	r3, [pc, #160]	; (8001b10 <Pulsadores+0x18c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
	}
	if((seg_left == 1)&&(est_left == 1)){
 8001a72:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <Pulsadores+0x18c>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d106      	bne.n	8001a88 <Pulsadores+0x104>
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <Pulsadores+0x174>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d102      	bne.n	8001a88 <Pulsadores+0x104>
	    est_left = 0;
 8001a82:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <Pulsadores+0x174>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	701a      	strb	r2, [r3, #0]
	}
	if((seg_left == 0)&&(est_left == 1)){
 8001a88:	4b21      	ldr	r3, [pc, #132]	; (8001b10 <Pulsadores+0x18c>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d109      	bne.n	8001aa4 <Pulsadores+0x120>
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <Pulsadores+0x174>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d105      	bne.n	8001aa4 <Pulsadores+0x120>
	    est_left = 1;
 8001a98:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <Pulsadores+0x174>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	701a      	strb	r2, [r3, #0]
	    seg_left = 1;
 8001a9e:	4b1c      	ldr	r3, [pc, #112]	; (8001b10 <Pulsadores+0x18c>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	701a      	strb	r2, [r3, #0]
	}
	//-------Configuracion de PULSADOR RIGHT-------
	if((seg_right == 1)&&(est_right == 0)){
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <Pulsadores+0x190>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d106      	bne.n	8001aba <Pulsadores+0x136>
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <Pulsadores+0x170>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d102      	bne.n	8001aba <Pulsadores+0x136>
	    seg_right = 0;
 8001ab4:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <Pulsadores+0x190>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
	}
	if((seg_right == 1)&&(est_right == 1)){
 8001aba:	4b16      	ldr	r3, [pc, #88]	; (8001b14 <Pulsadores+0x190>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d106      	bne.n	8001ad0 <Pulsadores+0x14c>
 8001ac2:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <Pulsadores+0x170>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d102      	bne.n	8001ad0 <Pulsadores+0x14c>
	    est_right = 0;
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <Pulsadores+0x170>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
	}
	if((seg_right == 0)&&(est_right == 1)){
 8001ad0:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <Pulsadores+0x190>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d109      	bne.n	8001aec <Pulsadores+0x168>
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <Pulsadores+0x170>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d105      	bne.n	8001aec <Pulsadores+0x168>
	    est_right = 1;
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <Pulsadores+0x170>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	701a      	strb	r2, [r3, #0]
	    seg_right = 1;
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <Pulsadores+0x190>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	701a      	strb	r2, [r3, #0]
	}
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40010c00 	.word	0x40010c00
 8001af4:	20000769 	.word	0x20000769
 8001af8:	20000838 	.word	0x20000838
 8001afc:	40010800 	.word	0x40010800
 8001b00:	20000640 	.word	0x20000640
 8001b04:	200007cc 	.word	0x200007cc
 8001b08:	20000118 	.word	0x20000118
 8001b0c:	20000119 	.word	0x20000119
 8001b10:	2000011a 	.word	0x2000011a
 8001b14:	2000011b 	.word	0x2000011b

08001b18 <Lcd_Cursor>:

void Lcd_Cursor(void){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
  //--------- EST_DOWN ---------
  if(est_down == 1){
 8001b1e:	4ba4      	ldr	r3, [pc, #656]	; (8001db0 <Lcd_Cursor+0x298>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	f040 808d 	bne.w	8001c42 <Lcd_Cursor+0x12a>
    if(g_menu == 5){
 8001b28:	4ba2      	ldr	r3, [pc, #648]	; (8001db4 <Lcd_Cursor+0x29c>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b05      	cmp	r3, #5
 8001b2e:	d10f      	bne.n	8001b50 <Lcd_Cursor+0x38>
      pag_menu = 5;
 8001b30:	4ba1      	ldr	r3, [pc, #644]	; (8001db8 <Lcd_Cursor+0x2a0>)
 8001b32:	2205      	movs	r2, #5
 8001b34:	701a      	strb	r2, [r3, #0]
      paso--;
 8001b36:	4ba1      	ldr	r3, [pc, #644]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4b9f      	ldr	r3, [pc, #636]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001b40:	701a      	strb	r2, [r3, #0]
      if(paso<1){paso = 1;}
 8001b42:	4b9e      	ldr	r3, [pc, #632]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d102      	bne.n	8001b50 <Lcd_Cursor+0x38>
 8001b4a:	4b9c      	ldr	r3, [pc, #624]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	701a      	strb	r2, [r3, #0]
    }
    if(g_menu == 6){
 8001b50:	4b98      	ldr	r3, [pc, #608]	; (8001db4 <Lcd_Cursor+0x29c>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b06      	cmp	r3, #6
 8001b56:	d10f      	bne.n	8001b78 <Lcd_Cursor+0x60>
      pag_menu = 6;
 8001b58:	4b97      	ldr	r3, [pc, #604]	; (8001db8 <Lcd_Cursor+0x2a0>)
 8001b5a:	2206      	movs	r2, #6
 8001b5c:	701a      	strb	r2, [r3, #0]
      paso--;
 8001b5e:	4b97      	ldr	r3, [pc, #604]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4b95      	ldr	r3, [pc, #596]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001b68:	701a      	strb	r2, [r3, #0]
      if(paso<1){paso = 1;}
 8001b6a:	4b94      	ldr	r3, [pc, #592]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d102      	bne.n	8001b78 <Lcd_Cursor+0x60>
 8001b72:	4b92      	ldr	r3, [pc, #584]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	701a      	strb	r2, [r3, #0]
    }
    if(g_menu == 8){
 8001b78:	4b8e      	ldr	r3, [pc, #568]	; (8001db4 <Lcd_Cursor+0x29c>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d10f      	bne.n	8001ba0 <Lcd_Cursor+0x88>
      pag_menu = 8;
 8001b80:	4b8d      	ldr	r3, [pc, #564]	; (8001db8 <Lcd_Cursor+0x2a0>)
 8001b82:	2208      	movs	r2, #8
 8001b84:	701a      	strb	r2, [r3, #0]
      paso--;
 8001b86:	4b8d      	ldr	r3, [pc, #564]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4b8b      	ldr	r3, [pc, #556]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001b90:	701a      	strb	r2, [r3, #0]
      if(paso>250){paso=0;}
 8001b92:	4b8a      	ldr	r3, [pc, #552]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2bfa      	cmp	r3, #250	; 0xfa
 8001b98:	d902      	bls.n	8001ba0 <Lcd_Cursor+0x88>
 8001b9a:	4b88      	ldr	r3, [pc, #544]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
    }
    if(cursor_fila==1){
 8001ba0:	4b87      	ldr	r3, [pc, #540]	; (8001dc0 <Lcd_Cursor+0x2a8>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d148      	bne.n	8001c3a <Lcd_Cursor+0x122>
      switch(g_menu){
 8001ba8:	4b82      	ldr	r3, [pc, #520]	; (8001db4 <Lcd_Cursor+0x29c>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d015      	beq.n	8001bdc <Lcd_Cursor+0xc4>
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	f300 80c5 	bgt.w	8001d40 <Lcd_Cursor+0x228>
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d002      	beq.n	8001bc0 <Lcd_Cursor+0xa8>
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d007      	beq.n	8001bce <Lcd_Cursor+0xb6>
 8001bbe:	e0bf      	b.n	8001d40 <Lcd_Cursor+0x228>
        case 1: pag_menu = 2; cursor_fila = 0; break;
 8001bc0:	4b7d      	ldr	r3, [pc, #500]	; (8001db8 <Lcd_Cursor+0x2a0>)
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	701a      	strb	r2, [r3, #0]
 8001bc6:	4b7e      	ldr	r3, [pc, #504]	; (8001dc0 <Lcd_Cursor+0x2a8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	701a      	strb	r2, [r3, #0]
 8001bcc:	e0b8      	b.n	8001d40 <Lcd_Cursor+0x228>
        case 2: pag_menu = 3; cursor_fila = 0; break;
 8001bce:	4b7a      	ldr	r3, [pc, #488]	; (8001db8 <Lcd_Cursor+0x2a0>)
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	701a      	strb	r2, [r3, #0]
 8001bd4:	4b7a      	ldr	r3, [pc, #488]	; (8001dc0 <Lcd_Cursor+0x2a8>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]
 8001bda:	e0b1      	b.n	8001d40 <Lcd_Cursor+0x228>
        case 4: pag_menu = 4; cursor_fila = 0; paso = paso+2;
 8001bdc:	4b76      	ldr	r3, [pc, #472]	; (8001db8 <Lcd_Cursor+0x2a0>)
 8001bde:	2204      	movs	r2, #4
 8001be0:	701a      	strb	r2, [r3, #0]
 8001be2:	4b77      	ldr	r3, [pc, #476]	; (8001dc0 <Lcd_Cursor+0x2a8>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
 8001be8:	4b74      	ldr	r3, [pc, #464]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	3302      	adds	r3, #2
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	4b72      	ldr	r3, [pc, #456]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001bf2:	701a      	strb	r2, [r3, #0]
                if((paso>16)&&((pag_anterior == 1)||(pag_anterior == 2))){paso = 15; cursor_fila = 1;}
 8001bf4:	4b71      	ldr	r3, [pc, #452]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b10      	cmp	r3, #16
 8001bfa:	d90d      	bls.n	8001c18 <Lcd_Cursor+0x100>
 8001bfc:	4b71      	ldr	r3, [pc, #452]	; (8001dc4 <Lcd_Cursor+0x2ac>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d003      	beq.n	8001c0c <Lcd_Cursor+0xf4>
 8001c04:	4b6f      	ldr	r3, [pc, #444]	; (8001dc4 <Lcd_Cursor+0x2ac>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d105      	bne.n	8001c18 <Lcd_Cursor+0x100>
 8001c0c:	4b6b      	ldr	r3, [pc, #428]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001c0e:	220f      	movs	r2, #15
 8001c10:	701a      	strb	r2, [r3, #0]
 8001c12:	4b6b      	ldr	r3, [pc, #428]	; (8001dc0 <Lcd_Cursor+0x2a8>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	701a      	strb	r2, [r3, #0]
                if((paso >4)&&(pag_anterior == 3)){paso = 3; cursor_fila = 1;}
 8001c18:	4b68      	ldr	r3, [pc, #416]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	f240 808c 	bls.w	8001d3a <Lcd_Cursor+0x222>
 8001c22:	4b68      	ldr	r3, [pc, #416]	; (8001dc4 <Lcd_Cursor+0x2ac>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	f040 8087 	bne.w	8001d3a <Lcd_Cursor+0x222>
 8001c2c:	4b63      	ldr	r3, [pc, #396]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001c2e:	2203      	movs	r2, #3
 8001c30:	701a      	strb	r2, [r3, #0]
 8001c32:	4b63      	ldr	r3, [pc, #396]	; (8001dc0 <Lcd_Cursor+0x2a8>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	701a      	strb	r2, [r3, #0]
        break;
 8001c38:	e07f      	b.n	8001d3a <Lcd_Cursor+0x222>
      }
    }
    else{ cursor_fila=1; }
 8001c3a:	4b61      	ldr	r3, [pc, #388]	; (8001dc0 <Lcd_Cursor+0x2a8>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	701a      	strb	r2, [r3, #0]
 8001c40:	e07e      	b.n	8001d40 <Lcd_Cursor+0x228>
    //--------- EST_UP ---------
  }else if(est_up == 1){
 8001c42:	4b61      	ldr	r3, [pc, #388]	; (8001dc8 <Lcd_Cursor+0x2b0>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d17a      	bne.n	8001d40 <Lcd_Cursor+0x228>
    if(g_menu == 5){
 8001c4a:	4b5a      	ldr	r3, [pc, #360]	; (8001db4 <Lcd_Cursor+0x29c>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b05      	cmp	r3, #5
 8001c50:	d10f      	bne.n	8001c72 <Lcd_Cursor+0x15a>
      pag_menu = 5;
 8001c52:	4b59      	ldr	r3, [pc, #356]	; (8001db8 <Lcd_Cursor+0x2a0>)
 8001c54:	2205      	movs	r2, #5
 8001c56:	701a      	strb	r2, [r3, #0]
      paso++;
 8001c58:	4b58      	ldr	r3, [pc, #352]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	4b56      	ldr	r3, [pc, #344]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001c62:	701a      	strb	r2, [r3, #0]
      if(paso>16){paso = 16;}
 8001c64:	4b55      	ldr	r3, [pc, #340]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b10      	cmp	r3, #16
 8001c6a:	d902      	bls.n	8001c72 <Lcd_Cursor+0x15a>
 8001c6c:	4b53      	ldr	r3, [pc, #332]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001c6e:	2210      	movs	r2, #16
 8001c70:	701a      	strb	r2, [r3, #0]
    }
    if(g_menu == 6){
 8001c72:	4b50      	ldr	r3, [pc, #320]	; (8001db4 <Lcd_Cursor+0x29c>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b06      	cmp	r3, #6
 8001c78:	d10f      	bne.n	8001c9a <Lcd_Cursor+0x182>
      pag_menu = 6;
 8001c7a:	4b4f      	ldr	r3, [pc, #316]	; (8001db8 <Lcd_Cursor+0x2a0>)
 8001c7c:	2206      	movs	r2, #6
 8001c7e:	701a      	strb	r2, [r3, #0]
      paso++;
 8001c80:	4b4e      	ldr	r3, [pc, #312]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	3301      	adds	r3, #1
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	4b4c      	ldr	r3, [pc, #304]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001c8a:	701a      	strb	r2, [r3, #0]
      if(paso>3){paso = 3;}
 8001c8c:	4b4b      	ldr	r3, [pc, #300]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	d902      	bls.n	8001c9a <Lcd_Cursor+0x182>
 8001c94:	4b49      	ldr	r3, [pc, #292]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001c96:	2203      	movs	r2, #3
 8001c98:	701a      	strb	r2, [r3, #0]
    }
    if(g_menu == 8){
 8001c9a:	4b46      	ldr	r3, [pc, #280]	; (8001db4 <Lcd_Cursor+0x29c>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d10f      	bne.n	8001cc2 <Lcd_Cursor+0x1aa>
      pag_menu = 8;
 8001ca2:	4b45      	ldr	r3, [pc, #276]	; (8001db8 <Lcd_Cursor+0x2a0>)
 8001ca4:	2208      	movs	r2, #8
 8001ca6:	701a      	strb	r2, [r3, #0]
      paso++;
 8001ca8:	4b44      	ldr	r3, [pc, #272]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	3301      	adds	r3, #1
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	4b42      	ldr	r3, [pc, #264]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001cb2:	701a      	strb	r2, [r3, #0]
      if(paso>=16){paso=16;}
 8001cb4:	4b41      	ldr	r3, [pc, #260]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b0f      	cmp	r3, #15
 8001cba:	d902      	bls.n	8001cc2 <Lcd_Cursor+0x1aa>
 8001cbc:	4b3f      	ldr	r3, [pc, #252]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001cbe:	2210      	movs	r2, #16
 8001cc0:	701a      	strb	r2, [r3, #0]
    }
    if(cursor_fila == 0){
 8001cc2:	4b3f      	ldr	r3, [pc, #252]	; (8001dc0 <Lcd_Cursor+0x2a8>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d133      	bne.n	8001d32 <Lcd_Cursor+0x21a>
      switch(g_menu){
 8001cca:	4b3a      	ldr	r3, [pc, #232]	; (8001db4 <Lcd_Cursor+0x29c>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d014      	beq.n	8001cfc <Lcd_Cursor+0x1e4>
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	dc34      	bgt.n	8001d40 <Lcd_Cursor+0x228>
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d002      	beq.n	8001ce0 <Lcd_Cursor+0x1c8>
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d007      	beq.n	8001cee <Lcd_Cursor+0x1d6>
 8001cde:	e02f      	b.n	8001d40 <Lcd_Cursor+0x228>
        case 2: pag_menu = 1; cursor_fila = 1; break;
 8001ce0:	4b35      	ldr	r3, [pc, #212]	; (8001db8 <Lcd_Cursor+0x2a0>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]
 8001ce6:	4b36      	ldr	r3, [pc, #216]	; (8001dc0 <Lcd_Cursor+0x2a8>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	701a      	strb	r2, [r3, #0]
 8001cec:	e028      	b.n	8001d40 <Lcd_Cursor+0x228>
        case 3: pag_menu = 2; cursor_fila = 1; break;
 8001cee:	4b32      	ldr	r3, [pc, #200]	; (8001db8 <Lcd_Cursor+0x2a0>)
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	701a      	strb	r2, [r3, #0]
 8001cf4:	4b32      	ldr	r3, [pc, #200]	; (8001dc0 <Lcd_Cursor+0x2a8>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	701a      	strb	r2, [r3, #0]
 8001cfa:	e021      	b.n	8001d40 <Lcd_Cursor+0x228>
        case 4: pag_menu = 4; cursor_fila = 1; paso = paso-2;
 8001cfc:	4b2e      	ldr	r3, [pc, #184]	; (8001db8 <Lcd_Cursor+0x2a0>)
 8001cfe:	2204      	movs	r2, #4
 8001d00:	701a      	strb	r2, [r3, #0]
 8001d02:	4b2f      	ldr	r3, [pc, #188]	; (8001dc0 <Lcd_Cursor+0x2a8>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
 8001d08:	4b2c      	ldr	r3, [pc, #176]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	3b02      	subs	r3, #2
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	4b2a      	ldr	r3, [pc, #168]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001d12:	701a      	strb	r2, [r3, #0]
              if((paso<1)||(paso > 250)){paso = 1; cursor_fila = 0;}
 8001d14:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <Lcd_Cursor+0x20c>
 8001d1c:	4b27      	ldr	r3, [pc, #156]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2bfa      	cmp	r3, #250	; 0xfa
 8001d22:	d90c      	bls.n	8001d3e <Lcd_Cursor+0x226>
 8001d24:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <Lcd_Cursor+0x2a4>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
 8001d2a:	4b25      	ldr	r3, [pc, #148]	; (8001dc0 <Lcd_Cursor+0x2a8>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
        break;
 8001d30:	e005      	b.n	8001d3e <Lcd_Cursor+0x226>
      }
    }
    else{cursor_fila=0;}
 8001d32:	4b23      	ldr	r3, [pc, #140]	; (8001dc0 <Lcd_Cursor+0x2a8>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
 8001d38:	e002      	b.n	8001d40 <Lcd_Cursor+0x228>
        break;
 8001d3a:	bf00      	nop
 8001d3c:	e000      	b.n	8001d40 <Lcd_Cursor+0x228>
        break;
 8001d3e:	bf00      	nop
  }
  //--------- EST_RIGHT ---------
  if(est_right == 1){
 8001d40:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <Lcd_Cursor+0x2b4>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	f040 81dd 	bne.w	8002104 <Lcd_Cursor+0x5ec>
    switch(g_menu){
 8001d4a:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <Lcd_Cursor+0x29c>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	f200 8255 	bhi.w	80021fe <Lcd_Cursor+0x6e6>
 8001d54:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <Lcd_Cursor+0x244>)
 8001d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5a:	bf00      	nop
 8001d5c:	08001d81 	.word	0x08001d81
 8001d60:	08001da1 	.word	0x08001da1
 8001d64:	08001e55 	.word	0x08001e55
 8001d68:	08001eff 	.word	0x08001eff
 8001d6c:	08001f27 	.word	0x08001f27
 8001d70:	08001fc5 	.word	0x08001fc5
 8001d74:	08001fd3 	.word	0x08001fd3
 8001d78:	080021ff 	.word	0x080021ff
 8001d7c:	08002019 	.word	0x08002019
      case 0:
            switch(cursor_fila){
 8001d80:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <Lcd_Cursor+0x2a8>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <Lcd_Cursor+0x276>
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d004      	beq.n	8001d96 <Lcd_Cursor+0x27e>
              case 0: pag_menu = 1; break;
              case 1: pag_menu = 8; break;
            }
      break;
 8001d8c:	e237      	b.n	80021fe <Lcd_Cursor+0x6e6>
              case 0: pag_menu = 1; break;
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <Lcd_Cursor+0x2a0>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	701a      	strb	r2, [r3, #0]
 8001d94:	e003      	b.n	8001d9e <Lcd_Cursor+0x286>
              case 1: pag_menu = 8; break;
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <Lcd_Cursor+0x2a0>)
 8001d98:	2208      	movs	r2, #8
 8001d9a:	701a      	strb	r2, [r3, #0]
 8001d9c:	bf00      	nop
      break;
 8001d9e:	e22e      	b.n	80021fe <Lcd_Cursor+0x6e6>
      case 1:
            switch(cursor_fila){
 8001da0:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <Lcd_Cursor+0x2a8>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d013      	beq.n	8001dd0 <Lcd_Cursor+0x2b8>
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d030      	beq.n	8001e0e <Lcd_Cursor+0x2f6>
              case 0: pag_menu = 4; pag_anterior = 1;if(P_min % 2 == 0){paso = P_min -1; cursor_fila = 1;}else{paso = P_min; cursor_fila = 0;} break;  /*INSTRUCCION POTENCIA MIN*/
              case 1: pag_menu = 4; cursor_fila = 0; pag_anterior = 2; if(P_max % 2 == 0){paso = P_max -1; cursor_fila = 1;}else{paso = P_max; cursor_fila = 0;} break; /*INSTRUCCION POTENCIA MAX*/
            }
      break;
 8001dac:	e227      	b.n	80021fe <Lcd_Cursor+0x6e6>
 8001dae:	bf00      	nop
 8001db0:	20000640 	.word	0x20000640
 8001db4:	2000011f 	.word	0x2000011f
 8001db8:	2000011e 	.word	0x2000011e
 8001dbc:	20000041 	.word	0x20000041
 8001dc0:	20000121 	.word	0x20000121
 8001dc4:	20000122 	.word	0x20000122
 8001dc8:	200007cc 	.word	0x200007cc
 8001dcc:	20000769 	.word	0x20000769
              case 0: pag_menu = 4; pag_anterior = 1;if(P_min % 2 == 0){paso = P_min -1; cursor_fila = 1;}else{paso = P_min; cursor_fila = 0;} break;  /*INSTRUCCION POTENCIA MIN*/
 8001dd0:	4b87      	ldr	r3, [pc, #540]	; (8001ff0 <Lcd_Cursor+0x4d8>)
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	701a      	strb	r2, [r3, #0]
 8001dd6:	4b87      	ldr	r3, [pc, #540]	; (8001ff4 <Lcd_Cursor+0x4dc>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	701a      	strb	r2, [r3, #0]
 8001ddc:	4b86      	ldr	r3, [pc, #536]	; (8001ff8 <Lcd_Cursor+0x4e0>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d109      	bne.n	8001dfe <Lcd_Cursor+0x2e6>
 8001dea:	4b83      	ldr	r3, [pc, #524]	; (8001ff8 <Lcd_Cursor+0x4e0>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4b82      	ldr	r3, [pc, #520]	; (8001ffc <Lcd_Cursor+0x4e4>)
 8001df4:	701a      	strb	r2, [r3, #0]
 8001df6:	4b82      	ldr	r3, [pc, #520]	; (8002000 <Lcd_Cursor+0x4e8>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	701a      	strb	r2, [r3, #0]
 8001dfc:	e029      	b.n	8001e52 <Lcd_Cursor+0x33a>
 8001dfe:	4b7e      	ldr	r3, [pc, #504]	; (8001ff8 <Lcd_Cursor+0x4e0>)
 8001e00:	781a      	ldrb	r2, [r3, #0]
 8001e02:	4b7e      	ldr	r3, [pc, #504]	; (8001ffc <Lcd_Cursor+0x4e4>)
 8001e04:	701a      	strb	r2, [r3, #0]
 8001e06:	4b7e      	ldr	r3, [pc, #504]	; (8002000 <Lcd_Cursor+0x4e8>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
 8001e0c:	e021      	b.n	8001e52 <Lcd_Cursor+0x33a>
              case 1: pag_menu = 4; cursor_fila = 0; pag_anterior = 2; if(P_max % 2 == 0){paso = P_max -1; cursor_fila = 1;}else{paso = P_max; cursor_fila = 0;} break; /*INSTRUCCION POTENCIA MAX*/
 8001e0e:	4b78      	ldr	r3, [pc, #480]	; (8001ff0 <Lcd_Cursor+0x4d8>)
 8001e10:	2204      	movs	r2, #4
 8001e12:	701a      	strb	r2, [r3, #0]
 8001e14:	4b7a      	ldr	r3, [pc, #488]	; (8002000 <Lcd_Cursor+0x4e8>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	701a      	strb	r2, [r3, #0]
 8001e1a:	4b76      	ldr	r3, [pc, #472]	; (8001ff4 <Lcd_Cursor+0x4dc>)
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	701a      	strb	r2, [r3, #0]
 8001e20:	4b78      	ldr	r3, [pc, #480]	; (8002004 <Lcd_Cursor+0x4ec>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d109      	bne.n	8001e42 <Lcd_Cursor+0x32a>
 8001e2e:	4b75      	ldr	r3, [pc, #468]	; (8002004 <Lcd_Cursor+0x4ec>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	4b71      	ldr	r3, [pc, #452]	; (8001ffc <Lcd_Cursor+0x4e4>)
 8001e38:	701a      	strb	r2, [r3, #0]
 8001e3a:	4b71      	ldr	r3, [pc, #452]	; (8002000 <Lcd_Cursor+0x4e8>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	701a      	strb	r2, [r3, #0]
 8001e40:	e006      	b.n	8001e50 <Lcd_Cursor+0x338>
 8001e42:	4b70      	ldr	r3, [pc, #448]	; (8002004 <Lcd_Cursor+0x4ec>)
 8001e44:	781a      	ldrb	r2, [r3, #0]
 8001e46:	4b6d      	ldr	r3, [pc, #436]	; (8001ffc <Lcd_Cursor+0x4e4>)
 8001e48:	701a      	strb	r2, [r3, #0]
 8001e4a:	4b6d      	ldr	r3, [pc, #436]	; (8002000 <Lcd_Cursor+0x4e8>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
 8001e50:	bf00      	nop
      break;
 8001e52:	e1d4      	b.n	80021fe <Lcd_Cursor+0x6e6>
      case 2:
            switch(cursor_fila){
 8001e54:	4b6a      	ldr	r3, [pc, #424]	; (8002000 <Lcd_Cursor+0x4e8>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d002      	beq.n	8001e62 <Lcd_Cursor+0x34a>
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d01f      	beq.n	8001ea0 <Lcd_Cursor+0x388>
              case 0: pag_menu = 4; pag_anterior = 3; if(P_pas % 2 == 0){paso = P_pas -1; cursor_fila = 1;}else{paso = P_pas; cursor_fila = 0;} break; /*INSTRUCCION POTENCIA PASO*/
              case 1: pag_menu = 5; if(tiempo<5){paso = tiempo;}else if(tiempo >= 5 ){paso = (tiempo*0.2)+4;} break; /*INSTRUCCION TIEMPO PASO*/
            }
      break;
 8001e60:	e1cd      	b.n	80021fe <Lcd_Cursor+0x6e6>
              case 0: pag_menu = 4; pag_anterior = 3; if(P_pas % 2 == 0){paso = P_pas -1; cursor_fila = 1;}else{paso = P_pas; cursor_fila = 0;} break; /*INSTRUCCION POTENCIA PASO*/
 8001e62:	4b63      	ldr	r3, [pc, #396]	; (8001ff0 <Lcd_Cursor+0x4d8>)
 8001e64:	2204      	movs	r2, #4
 8001e66:	701a      	strb	r2, [r3, #0]
 8001e68:	4b62      	ldr	r3, [pc, #392]	; (8001ff4 <Lcd_Cursor+0x4dc>)
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	701a      	strb	r2, [r3, #0]
 8001e6e:	4b66      	ldr	r3, [pc, #408]	; (8002008 <Lcd_Cursor+0x4f0>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d109      	bne.n	8001e90 <Lcd_Cursor+0x378>
 8001e7c:	4b62      	ldr	r3, [pc, #392]	; (8002008 <Lcd_Cursor+0x4f0>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	3b01      	subs	r3, #1
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	4b5d      	ldr	r3, [pc, #372]	; (8001ffc <Lcd_Cursor+0x4e4>)
 8001e86:	701a      	strb	r2, [r3, #0]
 8001e88:	4b5d      	ldr	r3, [pc, #372]	; (8002000 <Lcd_Cursor+0x4e8>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	701a      	strb	r2, [r3, #0]
 8001e8e:	e035      	b.n	8001efc <Lcd_Cursor+0x3e4>
 8001e90:	4b5d      	ldr	r3, [pc, #372]	; (8002008 <Lcd_Cursor+0x4f0>)
 8001e92:	781a      	ldrb	r2, [r3, #0]
 8001e94:	4b59      	ldr	r3, [pc, #356]	; (8001ffc <Lcd_Cursor+0x4e4>)
 8001e96:	701a      	strb	r2, [r3, #0]
 8001e98:	4b59      	ldr	r3, [pc, #356]	; (8002000 <Lcd_Cursor+0x4e8>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
 8001e9e:	e02d      	b.n	8001efc <Lcd_Cursor+0x3e4>
              case 1: pag_menu = 5; if(tiempo<5){paso = tiempo;}else if(tiempo >= 5 ){paso = (tiempo*0.2)+4;} break; /*INSTRUCCION TIEMPO PASO*/
 8001ea0:	4b53      	ldr	r3, [pc, #332]	; (8001ff0 <Lcd_Cursor+0x4d8>)
 8001ea2:	2205      	movs	r2, #5
 8001ea4:	701a      	strb	r2, [r3, #0]
 8001ea6:	4b59      	ldr	r3, [pc, #356]	; (800200c <Lcd_Cursor+0x4f4>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d804      	bhi.n	8001eb8 <Lcd_Cursor+0x3a0>
 8001eae:	4b57      	ldr	r3, [pc, #348]	; (800200c <Lcd_Cursor+0x4f4>)
 8001eb0:	781a      	ldrb	r2, [r3, #0]
 8001eb2:	4b52      	ldr	r3, [pc, #328]	; (8001ffc <Lcd_Cursor+0x4e4>)
 8001eb4:	701a      	strb	r2, [r3, #0]
 8001eb6:	e020      	b.n	8001efa <Lcd_Cursor+0x3e2>
 8001eb8:	4b54      	ldr	r3, [pc, #336]	; (800200c <Lcd_Cursor+0x4f4>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d91c      	bls.n	8001efa <Lcd_Cursor+0x3e2>
 8001ec0:	4b52      	ldr	r3, [pc, #328]	; (800200c <Lcd_Cursor+0x4f4>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe fa95 	bl	80003f4 <__aeabi_i2d>
 8001eca:	a347      	add	r3, pc, #284	; (adr r3, 8001fe8 <Lcd_Cursor+0x4d0>)
 8001ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed0:	f7fe fafa 	bl	80004c8 <__aeabi_dmul>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	4b4b      	ldr	r3, [pc, #300]	; (8002010 <Lcd_Cursor+0x4f8>)
 8001ee2:	f7fe f93b 	bl	800015c <__adddf3>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4610      	mov	r0, r2
 8001eec:	4619      	mov	r1, r3
 8001eee:	f7fe fd9b 	bl	8000a28 <__aeabi_d2uiz>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	4b41      	ldr	r3, [pc, #260]	; (8001ffc <Lcd_Cursor+0x4e4>)
 8001ef8:	701a      	strb	r2, [r3, #0]
 8001efa:	bf00      	nop
      break;
 8001efc:	e17f      	b.n	80021fe <Lcd_Cursor+0x6e6>
      case 3:
            switch(cursor_fila){
 8001efe:	4b40      	ldr	r3, [pc, #256]	; (8002000 <Lcd_Cursor+0x4e8>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <Lcd_Cursor+0x3f4>
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d008      	beq.n	8001f1c <Lcd_Cursor+0x404>
              case 0: pag_menu = 6; paso = P_modo; break; /*INSTRUCCION MODO ARRANQUE*/
              case 1: pag_menu = 7; break; /*INSTRUCCION INICIAR*/
            }
      break;
 8001f0a:	e178      	b.n	80021fe <Lcd_Cursor+0x6e6>
              case 0: pag_menu = 6; paso = P_modo; break; /*INSTRUCCION MODO ARRANQUE*/
 8001f0c:	4b38      	ldr	r3, [pc, #224]	; (8001ff0 <Lcd_Cursor+0x4d8>)
 8001f0e:	2206      	movs	r2, #6
 8001f10:	701a      	strb	r2, [r3, #0]
 8001f12:	4b40      	ldr	r3, [pc, #256]	; (8002014 <Lcd_Cursor+0x4fc>)
 8001f14:	781a      	ldrb	r2, [r3, #0]
 8001f16:	4b39      	ldr	r3, [pc, #228]	; (8001ffc <Lcd_Cursor+0x4e4>)
 8001f18:	701a      	strb	r2, [r3, #0]
 8001f1a:	e003      	b.n	8001f24 <Lcd_Cursor+0x40c>
              case 1: pag_menu = 7; break; /*INSTRUCCION INICIAR*/
 8001f1c:	4b34      	ldr	r3, [pc, #208]	; (8001ff0 <Lcd_Cursor+0x4d8>)
 8001f1e:	2207      	movs	r2, #7
 8001f20:	701a      	strb	r2, [r3, #0]
 8001f22:	bf00      	nop
      break;
 8001f24:	e16b      	b.n	80021fe <Lcd_Cursor+0x6e6>
      case 4:
          switch(pag_anterior){
 8001f26:	4b33      	ldr	r3, [pc, #204]	; (8001ff4 <Lcd_Cursor+0x4dc>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d033      	beq.n	8001f96 <Lcd_Cursor+0x47e>
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	f300 8160 	bgt.w	80021f4 <Lcd_Cursor+0x6dc>
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d002      	beq.n	8001f3e <Lcd_Cursor+0x426>
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d016      	beq.n	8001f6a <Lcd_Cursor+0x452>
            case 2: if(cursor_fila == 0){P_max = paso;}else{P_max = paso+1;} pag_menu = 1; cursor_fila = 1;
            break;
            case 3: if(cursor_fila == 0){P_pas = paso;}else{P_pas = paso+1;} pag_menu = 2; cursor_fila = 0;
            break;
          }
      break;
 8001f3c:	e15a      	b.n	80021f4 <Lcd_Cursor+0x6dc>
            case 1: if(cursor_fila == 0){P_min = paso;}else{P_min = paso+1;} pag_menu = 1; cursor_fila = 0;
 8001f3e:	4b30      	ldr	r3, [pc, #192]	; (8002000 <Lcd_Cursor+0x4e8>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d104      	bne.n	8001f50 <Lcd_Cursor+0x438>
 8001f46:	4b2d      	ldr	r3, [pc, #180]	; (8001ffc <Lcd_Cursor+0x4e4>)
 8001f48:	781a      	ldrb	r2, [r3, #0]
 8001f4a:	4b2b      	ldr	r3, [pc, #172]	; (8001ff8 <Lcd_Cursor+0x4e0>)
 8001f4c:	701a      	strb	r2, [r3, #0]
 8001f4e:	e005      	b.n	8001f5c <Lcd_Cursor+0x444>
 8001f50:	4b2a      	ldr	r3, [pc, #168]	; (8001ffc <Lcd_Cursor+0x4e4>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	3301      	adds	r3, #1
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	4b27      	ldr	r3, [pc, #156]	; (8001ff8 <Lcd_Cursor+0x4e0>)
 8001f5a:	701a      	strb	r2, [r3, #0]
 8001f5c:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <Lcd_Cursor+0x4d8>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]
 8001f62:	4b27      	ldr	r3, [pc, #156]	; (8002000 <Lcd_Cursor+0x4e8>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
            break;
 8001f68:	e02b      	b.n	8001fc2 <Lcd_Cursor+0x4aa>
            case 2: if(cursor_fila == 0){P_max = paso;}else{P_max = paso+1;} pag_menu = 1; cursor_fila = 1;
 8001f6a:	4b25      	ldr	r3, [pc, #148]	; (8002000 <Lcd_Cursor+0x4e8>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d104      	bne.n	8001f7c <Lcd_Cursor+0x464>
 8001f72:	4b22      	ldr	r3, [pc, #136]	; (8001ffc <Lcd_Cursor+0x4e4>)
 8001f74:	781a      	ldrb	r2, [r3, #0]
 8001f76:	4b23      	ldr	r3, [pc, #140]	; (8002004 <Lcd_Cursor+0x4ec>)
 8001f78:	701a      	strb	r2, [r3, #0]
 8001f7a:	e005      	b.n	8001f88 <Lcd_Cursor+0x470>
 8001f7c:	4b1f      	ldr	r3, [pc, #124]	; (8001ffc <Lcd_Cursor+0x4e4>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	3301      	adds	r3, #1
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <Lcd_Cursor+0x4ec>)
 8001f86:	701a      	strb	r2, [r3, #0]
 8001f88:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <Lcd_Cursor+0x4d8>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	701a      	strb	r2, [r3, #0]
 8001f8e:	4b1c      	ldr	r3, [pc, #112]	; (8002000 <Lcd_Cursor+0x4e8>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	701a      	strb	r2, [r3, #0]
            break;
 8001f94:	e015      	b.n	8001fc2 <Lcd_Cursor+0x4aa>
            case 3: if(cursor_fila == 0){P_pas = paso;}else{P_pas = paso+1;} pag_menu = 2; cursor_fila = 0;
 8001f96:	4b1a      	ldr	r3, [pc, #104]	; (8002000 <Lcd_Cursor+0x4e8>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d104      	bne.n	8001fa8 <Lcd_Cursor+0x490>
 8001f9e:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <Lcd_Cursor+0x4e4>)
 8001fa0:	781a      	ldrb	r2, [r3, #0]
 8001fa2:	4b19      	ldr	r3, [pc, #100]	; (8002008 <Lcd_Cursor+0x4f0>)
 8001fa4:	701a      	strb	r2, [r3, #0]
 8001fa6:	e005      	b.n	8001fb4 <Lcd_Cursor+0x49c>
 8001fa8:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <Lcd_Cursor+0x4e4>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	3301      	adds	r3, #1
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	4b15      	ldr	r3, [pc, #84]	; (8002008 <Lcd_Cursor+0x4f0>)
 8001fb2:	701a      	strb	r2, [r3, #0]
 8001fb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <Lcd_Cursor+0x4d8>)
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	701a      	strb	r2, [r3, #0]
 8001fba:	4b11      	ldr	r3, [pc, #68]	; (8002000 <Lcd_Cursor+0x4e8>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]
            break;
 8001fc0:	bf00      	nop
      break;
 8001fc2:	e117      	b.n	80021f4 <Lcd_Cursor+0x6dc>
      case 5: pag_menu = 2; cursor_fila = 1;
 8001fc4:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <Lcd_Cursor+0x4d8>)
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	701a      	strb	r2, [r3, #0]
 8001fca:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <Lcd_Cursor+0x4e8>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	701a      	strb	r2, [r3, #0]
      break;
 8001fd0:	e115      	b.n	80021fe <Lcd_Cursor+0x6e6>
      case 6: P_modo = paso; pag_menu = 3; cursor_fila = 0;
 8001fd2:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <Lcd_Cursor+0x4e4>)
 8001fd4:	781a      	ldrb	r2, [r3, #0]
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <Lcd_Cursor+0x4fc>)
 8001fd8:	701a      	strb	r2, [r3, #0]
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <Lcd_Cursor+0x4d8>)
 8001fdc:	2203      	movs	r2, #3
 8001fde:	701a      	strb	r2, [r3, #0]
 8001fe0:	4b07      	ldr	r3, [pc, #28]	; (8002000 <Lcd_Cursor+0x4e8>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	701a      	strb	r2, [r3, #0]
      break;
 8001fe6:	e10a      	b.n	80021fe <Lcd_Cursor+0x6e6>
 8001fe8:	9999999a 	.word	0x9999999a
 8001fec:	3fc99999 	.word	0x3fc99999
 8001ff0:	2000011e 	.word	0x2000011e
 8001ff4:	20000122 	.word	0x20000122
 8001ff8:	20000044 	.word	0x20000044
 8001ffc:	20000041 	.word	0x20000041
 8002000:	20000121 	.word	0x20000121
 8002004:	20000045 	.word	0x20000045
 8002008:	20000046 	.word	0x20000046
 800200c:	20000043 	.word	0x20000043
 8002010:	40100000 	.word	0x40100000
 8002014:	20000047 	.word	0x20000047
      case 8: lcd_clear();menu_conf = 0;menu_manu = 1;
 8002018:	f7ff fa54 	bl	80014c4 <lcd_clear>
 800201c:	4b98      	ldr	r3, [pc, #608]	; (8002280 <Lcd_Cursor+0x768>)
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]
 8002022:	4b98      	ldr	r3, [pc, #608]	; (8002284 <Lcd_Cursor+0x76c>)
 8002024:	2201      	movs	r2, #1
 8002026:	701a      	strb	r2, [r3, #0]
              direccion = 2*paso;
 8002028:	4b97      	ldr	r3, [pc, #604]	; (8002288 <Lcd_Cursor+0x770>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	b2da      	uxtb	r2, r3
 8002030:	4b96      	ldr	r3, [pc, #600]	; (800228c <Lcd_Cursor+0x774>)
 8002032:	701a      	strb	r2, [r3, #0]
              pcf1_send(salidaReles[direccion]);
 8002034:	4b95      	ldr	r3, [pc, #596]	; (800228c <Lcd_Cursor+0x774>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	4b95      	ldr	r3, [pc, #596]	; (8002290 <Lcd_Cursor+0x778>)
 800203c:	5c9b      	ldrb	r3, [r3, r2]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fc74 	bl	800192c <pcf1_send>
              pcf2_send(salidaReles[direccion+1]);
 8002044:	4b91      	ldr	r3, [pc, #580]	; (800228c <Lcd_Cursor+0x774>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	3301      	adds	r3, #1
 800204a:	4a91      	ldr	r2, [pc, #580]	; (8002290 <Lcd_Cursor+0x778>)
 800204c:	5cd3      	ldrb	r3, [r2, r3]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fc82 	bl	8001958 <pcf2_send>
              lcd_put_cur(0, 0);
 8002054:	2100      	movs	r1, #0
 8002056:	2000      	movs	r0, #0
 8002058:	f7ff fa4b 	bl	80014f2 <lcd_put_cur>
              lcd_send_string("POT: ");
 800205c:	488d      	ldr	r0, [pc, #564]	; (8002294 <Lcd_Cursor+0x77c>)
 800205e:	f7ff faa4 	bl	80015aa <lcd_send_string>
              uint16_t valor1 = 75*paso;
 8002062:	4b89      	ldr	r3, [pc, #548]	; (8002288 <Lcd_Cursor+0x770>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	b29b      	uxth	r3, r3
 8002068:	461a      	mov	r2, r3
 800206a:	0092      	lsls	r2, r2, #2
 800206c:	4413      	add	r3, r2
 800206e:	461a      	mov	r2, r3
 8002070:	0112      	lsls	r2, r2, #4
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	80fb      	strh	r3, [r7, #6]
              uint8_t ent_valor1 = valor1*0.1;
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe f9bb 	bl	80003f4 <__aeabi_i2d>
 800207e:	a37e      	add	r3, pc, #504	; (adr r3, 8002278 <Lcd_Cursor+0x760>)
 8002080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002084:	f7fe fa20 	bl	80004c8 <__aeabi_dmul>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4610      	mov	r0, r2
 800208e:	4619      	mov	r1, r3
 8002090:	f7fe fcca 	bl	8000a28 <__aeabi_d2uiz>
 8002094:	4603      	mov	r3, r0
 8002096:	717b      	strb	r3, [r7, #5]
              uint8_t un_valor1 = valor1 - (ent_valor1 * 10);
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	b2da      	uxtb	r2, r3
 800209c:	797b      	ldrb	r3, [r7, #5]
 800209e:	4619      	mov	r1, r3
 80020a0:	0149      	lsls	r1, r1, #5
 80020a2:	1ac9      	subs	r1, r1, r3
 80020a4:	0089      	lsls	r1, r1, #2
 80020a6:	1acb      	subs	r3, r1, r3
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	4413      	add	r3, r2
 80020ae:	713b      	strb	r3, [r7, #4]
              sprintf(buffer,"%d",ent_valor1);
 80020b0:	797b      	ldrb	r3, [r7, #5]
 80020b2:	461a      	mov	r2, r3
 80020b4:	4978      	ldr	r1, [pc, #480]	; (8002298 <Lcd_Cursor+0x780>)
 80020b6:	4879      	ldr	r0, [pc, #484]	; (800229c <Lcd_Cursor+0x784>)
 80020b8:	f009 fa6e 	bl	800b598 <siprintf>
              lcd_send_string(buffer);
 80020bc:	4877      	ldr	r0, [pc, #476]	; (800229c <Lcd_Cursor+0x784>)
 80020be:	f7ff fa74 	bl	80015aa <lcd_send_string>
              //lcd.print(ent_valor1);
              lcd_send_string(".");
 80020c2:	4877      	ldr	r0, [pc, #476]	; (80022a0 <Lcd_Cursor+0x788>)
 80020c4:	f7ff fa71 	bl	80015aa <lcd_send_string>
              sprintf(buffer,"%d",un_valor1);
 80020c8:	793b      	ldrb	r3, [r7, #4]
 80020ca:	461a      	mov	r2, r3
 80020cc:	4972      	ldr	r1, [pc, #456]	; (8002298 <Lcd_Cursor+0x780>)
 80020ce:	4873      	ldr	r0, [pc, #460]	; (800229c <Lcd_Cursor+0x784>)
 80020d0:	f009 fa62 	bl	800b598 <siprintf>
              lcd_send_string(buffer);
 80020d4:	4871      	ldr	r0, [pc, #452]	; (800229c <Lcd_Cursor+0x784>)
 80020d6:	f7ff fa68 	bl	80015aa <lcd_send_string>
              //lcd.print(un_valor1);
              lcd_send_string(" Kw");
 80020da:	4872      	ldr	r0, [pc, #456]	; (80022a4 <Lcd_Cursor+0x78c>)
 80020dc:	f7ff fa65 	bl	80015aa <lcd_send_string>
              HAL_GPIO_WritePin(modbus_GPIO_Port, modbus_Pin, 1);
 80020e0:	2201      	movs	r2, #1
 80020e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020e6:	4870      	ldr	r0, [pc, #448]	; (80022a8 <Lcd_Cursor+0x790>)
 80020e8:	f002 fc15 	bl	8004916 <HAL_GPIO_WritePin>
              h_envio = 1;
 80020ec:	4b6f      	ldr	r3, [pc, #444]	; (80022ac <Lcd_Cursor+0x794>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	701a      	strb	r2, [r3, #0]
              h_calculo = 0;
 80020f2:	4b6f      	ldr	r3, [pc, #444]	; (80022b0 <Lcd_Cursor+0x798>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
              HAL_UART_Transmit_DMA(&huart3, mensaje1, 8);
 80020f8:	2208      	movs	r2, #8
 80020fa:	496e      	ldr	r1, [pc, #440]	; (80022b4 <Lcd_Cursor+0x79c>)
 80020fc:	486e      	ldr	r0, [pc, #440]	; (80022b8 <Lcd_Cursor+0x7a0>)
 80020fe:	f004 feed 	bl	8006edc <HAL_UART_Transmit_DMA>

      break;
 8002102:	e07c      	b.n	80021fe <Lcd_Cursor+0x6e6>
    }
    //--------- EST_LEFT ---------
  }else if(est_left == 1){
 8002104:	4b6d      	ldr	r3, [pc, #436]	; (80022bc <Lcd_Cursor+0x7a4>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d175      	bne.n	80021f8 <Lcd_Cursor+0x6e0>
    switch(g_menu){
 800210c:	4b6c      	ldr	r3, [pc, #432]	; (80022c0 <Lcd_Cursor+0x7a8>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	3b01      	subs	r3, #1
 8002112:	2b07      	cmp	r3, #7
 8002114:	d873      	bhi.n	80021fe <Lcd_Cursor+0x6e6>
 8002116:	a201      	add	r2, pc, #4	; (adr r2, 800211c <Lcd_Cursor+0x604>)
 8002118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211c:	0800213d 	.word	0x0800213d
 8002120:	0800214b 	.word	0x0800214b
 8002124:	08002159 	.word	0x08002159
 8002128:	08002167 	.word	0x08002167
 800212c:	080021a9 	.word	0x080021a9
 8002130:	080021b7 	.word	0x080021b7
 8002134:	080021c5 	.word	0x080021c5
 8002138:	080021d3 	.word	0x080021d3
      case 1: pag_menu = 0; cursor_fila = 0; break;
 800213c:	4b61      	ldr	r3, [pc, #388]	; (80022c4 <Lcd_Cursor+0x7ac>)
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]
 8002142:	4b61      	ldr	r3, [pc, #388]	; (80022c8 <Lcd_Cursor+0x7b0>)
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
 8002148:	e059      	b.n	80021fe <Lcd_Cursor+0x6e6>
      case 2: pag_menu = 0; cursor_fila = 0; break;
 800214a:	4b5e      	ldr	r3, [pc, #376]	; (80022c4 <Lcd_Cursor+0x7ac>)
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]
 8002150:	4b5d      	ldr	r3, [pc, #372]	; (80022c8 <Lcd_Cursor+0x7b0>)
 8002152:	2200      	movs	r2, #0
 8002154:	701a      	strb	r2, [r3, #0]
 8002156:	e052      	b.n	80021fe <Lcd_Cursor+0x6e6>
      case 3: pag_menu = 0; cursor_fila = 0; break;
 8002158:	4b5a      	ldr	r3, [pc, #360]	; (80022c4 <Lcd_Cursor+0x7ac>)
 800215a:	2200      	movs	r2, #0
 800215c:	701a      	strb	r2, [r3, #0]
 800215e:	4b5a      	ldr	r3, [pc, #360]	; (80022c8 <Lcd_Cursor+0x7b0>)
 8002160:	2200      	movs	r2, #0
 8002162:	701a      	strb	r2, [r3, #0]
 8002164:	e04b      	b.n	80021fe <Lcd_Cursor+0x6e6>
      case 4: switch(pag_anterior){
 8002166:	4b59      	ldr	r3, [pc, #356]	; (80022cc <Lcd_Cursor+0x7b4>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b03      	cmp	r3, #3
 800216c:	d014      	beq.n	8002198 <Lcd_Cursor+0x680>
 800216e:	2b03      	cmp	r3, #3
 8002170:	dc44      	bgt.n	80021fc <Lcd_Cursor+0x6e4>
 8002172:	2b01      	cmp	r3, #1
 8002174:	d002      	beq.n	800217c <Lcd_Cursor+0x664>
 8002176:	2b02      	cmp	r3, #2
 8002178:	d007      	beq.n	800218a <Lcd_Cursor+0x672>
                case 1: pag_menu = 1; cursor_fila = 0;break;
                case 2: pag_menu = 1; cursor_fila = 1;break;
                case 3: pag_menu = 2; cursor_fila = 0;break;
              }
      break;
 800217a:	e03f      	b.n	80021fc <Lcd_Cursor+0x6e4>
                case 1: pag_menu = 1; cursor_fila = 0;break;
 800217c:	4b51      	ldr	r3, [pc, #324]	; (80022c4 <Lcd_Cursor+0x7ac>)
 800217e:	2201      	movs	r2, #1
 8002180:	701a      	strb	r2, [r3, #0]
 8002182:	4b51      	ldr	r3, [pc, #324]	; (80022c8 <Lcd_Cursor+0x7b0>)
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
 8002188:	e00d      	b.n	80021a6 <Lcd_Cursor+0x68e>
                case 2: pag_menu = 1; cursor_fila = 1;break;
 800218a:	4b4e      	ldr	r3, [pc, #312]	; (80022c4 <Lcd_Cursor+0x7ac>)
 800218c:	2201      	movs	r2, #1
 800218e:	701a      	strb	r2, [r3, #0]
 8002190:	4b4d      	ldr	r3, [pc, #308]	; (80022c8 <Lcd_Cursor+0x7b0>)
 8002192:	2201      	movs	r2, #1
 8002194:	701a      	strb	r2, [r3, #0]
 8002196:	e006      	b.n	80021a6 <Lcd_Cursor+0x68e>
                case 3: pag_menu = 2; cursor_fila = 0;break;
 8002198:	4b4a      	ldr	r3, [pc, #296]	; (80022c4 <Lcd_Cursor+0x7ac>)
 800219a:	2202      	movs	r2, #2
 800219c:	701a      	strb	r2, [r3, #0]
 800219e:	4b4a      	ldr	r3, [pc, #296]	; (80022c8 <Lcd_Cursor+0x7b0>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]
 80021a4:	bf00      	nop
      break;
 80021a6:	e029      	b.n	80021fc <Lcd_Cursor+0x6e4>
      case 5: pag_menu = 2; cursor_fila = 1; break;
 80021a8:	4b46      	ldr	r3, [pc, #280]	; (80022c4 <Lcd_Cursor+0x7ac>)
 80021aa:	2202      	movs	r2, #2
 80021ac:	701a      	strb	r2, [r3, #0]
 80021ae:	4b46      	ldr	r3, [pc, #280]	; (80022c8 <Lcd_Cursor+0x7b0>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	701a      	strb	r2, [r3, #0]
 80021b4:	e023      	b.n	80021fe <Lcd_Cursor+0x6e6>
      case 6: pag_menu = 3; cursor_fila = 0; break;
 80021b6:	4b43      	ldr	r3, [pc, #268]	; (80022c4 <Lcd_Cursor+0x7ac>)
 80021b8:	2203      	movs	r2, #3
 80021ba:	701a      	strb	r2, [r3, #0]
 80021bc:	4b42      	ldr	r3, [pc, #264]	; (80022c8 <Lcd_Cursor+0x7b0>)
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
 80021c2:	e01c      	b.n	80021fe <Lcd_Cursor+0x6e6>
      case 7: pag_menu = 3; cursor_fila = 1; break;
 80021c4:	4b3f      	ldr	r3, [pc, #252]	; (80022c4 <Lcd_Cursor+0x7ac>)
 80021c6:	2203      	movs	r2, #3
 80021c8:	701a      	strb	r2, [r3, #0]
 80021ca:	4b3f      	ldr	r3, [pc, #252]	; (80022c8 <Lcd_Cursor+0x7b0>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]
 80021d0:	e015      	b.n	80021fe <Lcd_Cursor+0x6e6>
      case 8: pag_menu = 0; cursor_fila = 1;
 80021d2:	4b3c      	ldr	r3, [pc, #240]	; (80022c4 <Lcd_Cursor+0x7ac>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]
 80021d8:	4b3b      	ldr	r3, [pc, #236]	; (80022c8 <Lcd_Cursor+0x7b0>)
 80021da:	2201      	movs	r2, #1
 80021dc:	701a      	strb	r2, [r3, #0]
      	  pcf1_send(salidaReles[0]);
 80021de:	4b2c      	ldr	r3, [pc, #176]	; (8002290 <Lcd_Cursor+0x778>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fba2 	bl	800192c <pcf1_send>
      	  pcf2_send(salidaReles[1]);
 80021e8:	4b29      	ldr	r3, [pc, #164]	; (8002290 <Lcd_Cursor+0x778>)
 80021ea:	785b      	ldrb	r3, [r3, #1]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff fbb3 	bl	8001958 <pcf2_send>
      break;
 80021f2:	e004      	b.n	80021fe <Lcd_Cursor+0x6e6>
      break;
 80021f4:	bf00      	nop
 80021f6:	e002      	b.n	80021fe <Lcd_Cursor+0x6e6>
    }
  }
 80021f8:	bf00      	nop
 80021fa:	e000      	b.n	80021fe <Lcd_Cursor+0x6e6>
      break;
 80021fc:	bf00      	nop
  //--------- CURSOR FILA ---------
  if(g_menu < 5){
 80021fe:	4b30      	ldr	r3, [pc, #192]	; (80022c0 <Lcd_Cursor+0x7a8>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b04      	cmp	r3, #4
 8002204:	d817      	bhi.n	8002236 <Lcd_Cursor+0x71e>
	lcd_put_cur(!cursor_fila, 0);
 8002206:	4b30      	ldr	r3, [pc, #192]	; (80022c8 <Lcd_Cursor+0x7b0>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	bf0c      	ite	eq
 800220e:	2301      	moveq	r3, #1
 8002210:	2300      	movne	r3, #0
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2100      	movs	r1, #0
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff f96b 	bl	80014f2 <lcd_put_cur>
    lcd_send_string(" ");
 800221c:	482c      	ldr	r0, [pc, #176]	; (80022d0 <Lcd_Cursor+0x7b8>)
 800221e:	f7ff f9c4 	bl	80015aa <lcd_send_string>
    lcd_put_cur(cursor_fila, 0);
 8002222:	4b29      	ldr	r3, [pc, #164]	; (80022c8 <Lcd_Cursor+0x7b0>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2100      	movs	r1, #0
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff f962 	bl	80014f2 <lcd_put_cur>
    lcd_write(0);
 800222e:	2000      	movs	r0, #0
 8002230:	f7ff fa00 	bl	8001634 <lcd_write>
    if(paso == 1){lcd_write(2);}
    else if(paso == 16){lcd_write(3);}
    else {lcd_write(1);}
  }

}
 8002234:	e01a      	b.n	800226c <Lcd_Cursor+0x754>
  } else if(g_menu == 5){
 8002236:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <Lcd_Cursor+0x7a8>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b05      	cmp	r3, #5
 800223c:	d116      	bne.n	800226c <Lcd_Cursor+0x754>
	  lcd_put_cur(1, 0);
 800223e:	2100      	movs	r1, #0
 8002240:	2001      	movs	r0, #1
 8002242:	f7ff f956 	bl	80014f2 <lcd_put_cur>
    if(paso == 1){lcd_write(2);}
 8002246:	4b10      	ldr	r3, [pc, #64]	; (8002288 <Lcd_Cursor+0x770>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d103      	bne.n	8002256 <Lcd_Cursor+0x73e>
 800224e:	2002      	movs	r0, #2
 8002250:	f7ff f9f0 	bl	8001634 <lcd_write>
}
 8002254:	e00a      	b.n	800226c <Lcd_Cursor+0x754>
    else if(paso == 16){lcd_write(3);}
 8002256:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <Lcd_Cursor+0x770>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b10      	cmp	r3, #16
 800225c:	d103      	bne.n	8002266 <Lcd_Cursor+0x74e>
 800225e:	2003      	movs	r0, #3
 8002260:	f7ff f9e8 	bl	8001634 <lcd_write>
}
 8002264:	e002      	b.n	800226c <Lcd_Cursor+0x754>
    else {lcd_write(1);}
 8002266:	2001      	movs	r0, #1
 8002268:	f7ff f9e4 	bl	8001634 <lcd_write>
}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	f3af 8000 	nop.w
 8002278:	9999999a 	.word	0x9999999a
 800227c:	3fb99999 	.word	0x3fb99999
 8002280:	20000040 	.word	0x20000040
 8002284:	2000011d 	.word	0x2000011d
 8002288:	20000041 	.word	0x20000041
 800228c:	20000124 	.word	0x20000124
 8002290:	20000004 	.word	0x20000004
 8002294:	0800cbd8 	.word	0x0800cbd8
 8002298:	0800cbe0 	.word	0x0800cbe0
 800229c:	2000071c 	.word	0x2000071c
 80022a0:	0800cbe4 	.word	0x0800cbe4
 80022a4:	0800cbe8 	.word	0x0800cbe8
 80022a8:	40010c00 	.word	0x40010c00
 80022ac:	20000113 	.word	0x20000113
 80022b0:	20000112 	.word	0x20000112
 80022b4:	20000028 	.word	0x20000028
 80022b8:	200001ac 	.word	0x200001ac
 80022bc:	20000838 	.word	0x20000838
 80022c0:	2000011f 	.word	0x2000011f
 80022c4:	2000011e 	.word	0x2000011e
 80022c8:	20000121 	.word	0x20000121
 80022cc:	20000122 	.word	0x20000122
 80022d0:	0800cbec 	.word	0x0800cbec

080022d4 <Escritura_SD>:

void Escritura_SD(void){
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af02      	add	r7, sp, #8
	fresult = f_open(&fil, "DATOS.csv", FA_OPEN_ALWAYS | FA_WRITE);
 80022da:	2212      	movs	r2, #18
 80022dc:	4957      	ldr	r1, [pc, #348]	; (800243c <Escritura_SD+0x168>)
 80022de:	4858      	ldr	r0, [pc, #352]	; (8002440 <Escritura_SD+0x16c>)
 80022e0:	f007 ff9c 	bl	800a21c <f_open>
 80022e4:	4603      	mov	r3, r0
 80022e6:	461a      	mov	r2, r3
 80022e8:	4b56      	ldr	r3, [pc, #344]	; (8002444 <Escritura_SD+0x170>)
 80022ea:	701a      	strb	r2, [r3, #0]
	fresult = f_lseek(&fil, fil.fsize);
 80022ec:	4b54      	ldr	r3, [pc, #336]	; (8002440 <Escritura_SD+0x16c>)
 80022ee:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80022f2:	4619      	mov	r1, r3
 80022f4:	4852      	ldr	r0, [pc, #328]	; (8002440 <Escritura_SD+0x16c>)
 80022f6:	f008 fc7b 	bl	800abf0 <f_lseek>
 80022fa:	4603      	mov	r3, r0
 80022fc:	461a      	mov	r2, r3
 80022fe:	4b51      	ldr	r3, [pc, #324]	; (8002444 <Escritura_SD+0x170>)
 8002300:	701a      	strb	r2, [r3, #0]
	sprintf (buffer1, "%02d/%02d/%04d", time.dayofmonth, time.month, 2000 + time.year);
 8002302:	4b51      	ldr	r3, [pc, #324]	; (8002448 <Escritura_SD+0x174>)
 8002304:	791b      	ldrb	r3, [r3, #4]
 8002306:	461a      	mov	r2, r3
 8002308:	4b4f      	ldr	r3, [pc, #316]	; (8002448 <Escritura_SD+0x174>)
 800230a:	795b      	ldrb	r3, [r3, #5]
 800230c:	4619      	mov	r1, r3
 800230e:	4b4e      	ldr	r3, [pc, #312]	; (8002448 <Escritura_SD+0x174>)
 8002310:	799b      	ldrb	r3, [r3, #6]
 8002312:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	460b      	mov	r3, r1
 800231a:	494c      	ldr	r1, [pc, #304]	; (800244c <Escritura_SD+0x178>)
 800231c:	484c      	ldr	r0, [pc, #304]	; (8002450 <Escritura_SD+0x17c>)
 800231e:	f009 f93b 	bl	800b598 <siprintf>
	f_puts(buffer1, &fil);
 8002322:	4947      	ldr	r1, [pc, #284]	; (8002440 <Escritura_SD+0x16c>)
 8002324:	484a      	ldr	r0, [pc, #296]	; (8002450 <Escritura_SD+0x17c>)
 8002326:	f008 ff2b 	bl	800b180 <f_puts>
	f_puts(",", &fil);
 800232a:	4945      	ldr	r1, [pc, #276]	; (8002440 <Escritura_SD+0x16c>)
 800232c:	4849      	ldr	r0, [pc, #292]	; (8002454 <Escritura_SD+0x180>)
 800232e:	f008 ff27 	bl	800b180 <f_puts>
	sprintf (buffer1, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8002332:	4b45      	ldr	r3, [pc, #276]	; (8002448 <Escritura_SD+0x174>)
 8002334:	789b      	ldrb	r3, [r3, #2]
 8002336:	461a      	mov	r2, r3
 8002338:	4b43      	ldr	r3, [pc, #268]	; (8002448 <Escritura_SD+0x174>)
 800233a:	785b      	ldrb	r3, [r3, #1]
 800233c:	4619      	mov	r1, r3
 800233e:	4b42      	ldr	r3, [pc, #264]	; (8002448 <Escritura_SD+0x174>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	460b      	mov	r3, r1
 8002346:	4944      	ldr	r1, [pc, #272]	; (8002458 <Escritura_SD+0x184>)
 8002348:	4841      	ldr	r0, [pc, #260]	; (8002450 <Escritura_SD+0x17c>)
 800234a:	f009 f925 	bl	800b598 <siprintf>
	f_puts(buffer1, &fil);
 800234e:	493c      	ldr	r1, [pc, #240]	; (8002440 <Escritura_SD+0x16c>)
 8002350:	483f      	ldr	r0, [pc, #252]	; (8002450 <Escritura_SD+0x17c>)
 8002352:	f008 ff15 	bl	800b180 <f_puts>
	f_puts(",", &fil);
 8002356:	493a      	ldr	r1, [pc, #232]	; (8002440 <Escritura_SD+0x16c>)
 8002358:	483e      	ldr	r0, [pc, #248]	; (8002454 <Escritura_SD+0x180>)
 800235a:	f008 ff11 	bl	800b180 <f_puts>
	for(uint8_t z=0 ; z<3 ; z++){
 800235e:	2300      	movs	r3, #0
 8002360:	71fb      	strb	r3, [r7, #7]
 8002362:	e013      	b.n	800238c <Escritura_SD+0xb8>
		sprintf (buffer1, "%d", Tension[z]);
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	4a3d      	ldr	r2, [pc, #244]	; (800245c <Escritura_SD+0x188>)
 8002368:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800236c:	461a      	mov	r2, r3
 800236e:	493c      	ldr	r1, [pc, #240]	; (8002460 <Escritura_SD+0x18c>)
 8002370:	4837      	ldr	r0, [pc, #220]	; (8002450 <Escritura_SD+0x17c>)
 8002372:	f009 f911 	bl	800b598 <siprintf>
		f_puts(buffer1, &fil);
 8002376:	4932      	ldr	r1, [pc, #200]	; (8002440 <Escritura_SD+0x16c>)
 8002378:	4835      	ldr	r0, [pc, #212]	; (8002450 <Escritura_SD+0x17c>)
 800237a:	f008 ff01 	bl	800b180 <f_puts>
		f_puts(",", &fil);
 800237e:	4930      	ldr	r1, [pc, #192]	; (8002440 <Escritura_SD+0x16c>)
 8002380:	4834      	ldr	r0, [pc, #208]	; (8002454 <Escritura_SD+0x180>)
 8002382:	f008 fefd 	bl	800b180 <f_puts>
	for(uint8_t z=0 ; z<3 ; z++){
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	3301      	adds	r3, #1
 800238a:	71fb      	strb	r3, [r7, #7]
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d9e8      	bls.n	8002364 <Escritura_SD+0x90>
	}
	for(uint8_t x=0 ; x<3 ; x++){
 8002392:	2300      	movs	r3, #0
 8002394:	71bb      	strb	r3, [r7, #6]
 8002396:	e013      	b.n	80023c0 <Escritura_SD+0xec>
		sprintf (buffer1, "%d", Corriente[x]);
 8002398:	79bb      	ldrb	r3, [r7, #6]
 800239a:	4a32      	ldr	r2, [pc, #200]	; (8002464 <Escritura_SD+0x190>)
 800239c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023a0:	461a      	mov	r2, r3
 80023a2:	492f      	ldr	r1, [pc, #188]	; (8002460 <Escritura_SD+0x18c>)
 80023a4:	482a      	ldr	r0, [pc, #168]	; (8002450 <Escritura_SD+0x17c>)
 80023a6:	f009 f8f7 	bl	800b598 <siprintf>
		f_puts(buffer1, &fil);
 80023aa:	4925      	ldr	r1, [pc, #148]	; (8002440 <Escritura_SD+0x16c>)
 80023ac:	4828      	ldr	r0, [pc, #160]	; (8002450 <Escritura_SD+0x17c>)
 80023ae:	f008 fee7 	bl	800b180 <f_puts>
		f_puts(",", &fil);
 80023b2:	4923      	ldr	r1, [pc, #140]	; (8002440 <Escritura_SD+0x16c>)
 80023b4:	4827      	ldr	r0, [pc, #156]	; (8002454 <Escritura_SD+0x180>)
 80023b6:	f008 fee3 	bl	800b180 <f_puts>
	for(uint8_t x=0 ; x<3 ; x++){
 80023ba:	79bb      	ldrb	r3, [r7, #6]
 80023bc:	3301      	adds	r3, #1
 80023be:	71bb      	strb	r3, [r7, #6]
 80023c0:	79bb      	ldrb	r3, [r7, #6]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d9e8      	bls.n	8002398 <Escritura_SD+0xc4>
	}
	for(uint8_t y=0 ; y<3 ; y++){
 80023c6:	2300      	movs	r3, #0
 80023c8:	717b      	strb	r3, [r7, #5]
 80023ca:	e028      	b.n	800241e <Escritura_SD+0x14a>
		if(y==2){
 80023cc:	797b      	ldrb	r3, [r7, #5]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d111      	bne.n	80023f6 <Escritura_SD+0x122>
			sprintf (buffer1, "%d", Potencia[y]);
 80023d2:	797b      	ldrb	r3, [r7, #5]
 80023d4:	4a24      	ldr	r2, [pc, #144]	; (8002468 <Escritura_SD+0x194>)
 80023d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023da:	461a      	mov	r2, r3
 80023dc:	4920      	ldr	r1, [pc, #128]	; (8002460 <Escritura_SD+0x18c>)
 80023de:	481c      	ldr	r0, [pc, #112]	; (8002450 <Escritura_SD+0x17c>)
 80023e0:	f009 f8da 	bl	800b598 <siprintf>
			f_puts(buffer1, &fil);
 80023e4:	4916      	ldr	r1, [pc, #88]	; (8002440 <Escritura_SD+0x16c>)
 80023e6:	481a      	ldr	r0, [pc, #104]	; (8002450 <Escritura_SD+0x17c>)
 80023e8:	f008 feca 	bl	800b180 <f_puts>
			f_puts("\n", &fil);
 80023ec:	4914      	ldr	r1, [pc, #80]	; (8002440 <Escritura_SD+0x16c>)
 80023ee:	481f      	ldr	r0, [pc, #124]	; (800246c <Escritura_SD+0x198>)
 80023f0:	f008 fec6 	bl	800b180 <f_puts>
 80023f4:	e010      	b.n	8002418 <Escritura_SD+0x144>
		}else{
			sprintf (buffer1, "%d", Potencia[y]);
 80023f6:	797b      	ldrb	r3, [r7, #5]
 80023f8:	4a1b      	ldr	r2, [pc, #108]	; (8002468 <Escritura_SD+0x194>)
 80023fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023fe:	461a      	mov	r2, r3
 8002400:	4917      	ldr	r1, [pc, #92]	; (8002460 <Escritura_SD+0x18c>)
 8002402:	4813      	ldr	r0, [pc, #76]	; (8002450 <Escritura_SD+0x17c>)
 8002404:	f009 f8c8 	bl	800b598 <siprintf>
			f_puts(buffer1, &fil);
 8002408:	490d      	ldr	r1, [pc, #52]	; (8002440 <Escritura_SD+0x16c>)
 800240a:	4811      	ldr	r0, [pc, #68]	; (8002450 <Escritura_SD+0x17c>)
 800240c:	f008 feb8 	bl	800b180 <f_puts>
			f_puts(",", &fil);
 8002410:	490b      	ldr	r1, [pc, #44]	; (8002440 <Escritura_SD+0x16c>)
 8002412:	4810      	ldr	r0, [pc, #64]	; (8002454 <Escritura_SD+0x180>)
 8002414:	f008 feb4 	bl	800b180 <f_puts>
	for(uint8_t y=0 ; y<3 ; y++){
 8002418:	797b      	ldrb	r3, [r7, #5]
 800241a:	3301      	adds	r3, #1
 800241c:	717b      	strb	r3, [r7, #5]
 800241e:	797b      	ldrb	r3, [r7, #5]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d9d3      	bls.n	80023cc <Escritura_SD+0xf8>
		}
	}
	/* Close file */
	fresult = f_close(&fil);
 8002424:	4806      	ldr	r0, [pc, #24]	; (8002440 <Escritura_SD+0x16c>)
 8002426:	f008 fbbb 	bl	800aba0 <f_close>
 800242a:	4603      	mov	r3, r0
 800242c:	461a      	mov	r2, r3
 800242e:	4b05      	ldr	r3, [pc, #20]	; (8002444 <Escritura_SD+0x170>)
 8002430:	701a      	strb	r2, [r3, #0]
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	0800cbf0 	.word	0x0800cbf0
 8002440:	20000860 	.word	0x20000860
 8002444:	200007dc 	.word	0x200007dc
 8002448:	200007c0 	.word	0x200007c0
 800244c:	0800cbfc 	.word	0x0800cbfc
 8002450:	20000854 	.word	0x20000854
 8002454:	0800cc0c 	.word	0x0800cc0c
 8002458:	0800cc10 	.word	0x0800cc10
 800245c:	200007d0 	.word	0x200007d0
 8002460:	0800cbe0 	.word	0x0800cbe0
 8002464:	20000750 	.word	0x20000750
 8002468:	20000710 	.word	0x20000710
 800246c:	0800cc20 	.word	0x0800cc20

08002470 <Calculo_modbus>:

	}
}
*/

void Calculo_modbus(uint8_t mensaje){
 8002470:	b5b0      	push	{r4, r5, r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
	for(uint8_t vuelta=3;vuelta < 12; vuelta+=4){
 800247a:	2303      	movs	r3, #3
 800247c:	73fb      	strb	r3, [r7, #15]
 800247e:	e115      	b.n	80026ac <Calculo_modbus+0x23c>
		if(mensaje == 1){
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d117      	bne.n	80024b6 <Calculo_modbus+0x46>
			dato_a = M_Tension[vuelta];
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	4a8d      	ldr	r2, [pc, #564]	; (80026c0 <Calculo_modbus+0x250>)
 800248a:	5cd2      	ldrb	r2, [r2, r3]
 800248c:	4b8d      	ldr	r3, [pc, #564]	; (80026c4 <Calculo_modbus+0x254>)
 800248e:	701a      	strb	r2, [r3, #0]
			dato_b = M_Tension[1+vuelta];
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	3301      	adds	r3, #1
 8002494:	4a8a      	ldr	r2, [pc, #552]	; (80026c0 <Calculo_modbus+0x250>)
 8002496:	5cd2      	ldrb	r2, [r2, r3]
 8002498:	4b8b      	ldr	r3, [pc, #556]	; (80026c8 <Calculo_modbus+0x258>)
 800249a:	701a      	strb	r2, [r3, #0]
			dato_c = M_Tension[2+vuelta];
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	3302      	adds	r3, #2
 80024a0:	4a87      	ldr	r2, [pc, #540]	; (80026c0 <Calculo_modbus+0x250>)
 80024a2:	5cd2      	ldrb	r2, [r2, r3]
 80024a4:	4b89      	ldr	r3, [pc, #548]	; (80026cc <Calculo_modbus+0x25c>)
 80024a6:	701a      	strb	r2, [r3, #0]
			dato_d = M_Tension[3+vuelta];
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	3303      	adds	r3, #3
 80024ac:	4a84      	ldr	r2, [pc, #528]	; (80026c0 <Calculo_modbus+0x250>)
 80024ae:	5cd2      	ldrb	r2, [r2, r3]
 80024b0:	4b87      	ldr	r3, [pc, #540]	; (80026d0 <Calculo_modbus+0x260>)
 80024b2:	701a      	strb	r2, [r3, #0]
 80024b4:	e034      	b.n	8002520 <Calculo_modbus+0xb0>
		}else if(mensaje == 2){
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d117      	bne.n	80024ec <Calculo_modbus+0x7c>
			dato_a = M_Corriente[vuelta];
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	4a85      	ldr	r2, [pc, #532]	; (80026d4 <Calculo_modbus+0x264>)
 80024c0:	5cd2      	ldrb	r2, [r2, r3]
 80024c2:	4b80      	ldr	r3, [pc, #512]	; (80026c4 <Calculo_modbus+0x254>)
 80024c4:	701a      	strb	r2, [r3, #0]
			dato_b = M_Corriente[1+vuelta];
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	3301      	adds	r3, #1
 80024ca:	4a82      	ldr	r2, [pc, #520]	; (80026d4 <Calculo_modbus+0x264>)
 80024cc:	5cd2      	ldrb	r2, [r2, r3]
 80024ce:	4b7e      	ldr	r3, [pc, #504]	; (80026c8 <Calculo_modbus+0x258>)
 80024d0:	701a      	strb	r2, [r3, #0]
			dato_c = M_Corriente[2+vuelta];
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	3302      	adds	r3, #2
 80024d6:	4a7f      	ldr	r2, [pc, #508]	; (80026d4 <Calculo_modbus+0x264>)
 80024d8:	5cd2      	ldrb	r2, [r2, r3]
 80024da:	4b7c      	ldr	r3, [pc, #496]	; (80026cc <Calculo_modbus+0x25c>)
 80024dc:	701a      	strb	r2, [r3, #0]
			dato_d = M_Corriente[3+vuelta];
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	3303      	adds	r3, #3
 80024e2:	4a7c      	ldr	r2, [pc, #496]	; (80026d4 <Calculo_modbus+0x264>)
 80024e4:	5cd2      	ldrb	r2, [r2, r3]
 80024e6:	4b7a      	ldr	r3, [pc, #488]	; (80026d0 <Calculo_modbus+0x260>)
 80024e8:	701a      	strb	r2, [r3, #0]
 80024ea:	e019      	b.n	8002520 <Calculo_modbus+0xb0>
		}else if(mensaje == 3){
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	2b03      	cmp	r3, #3
 80024f0:	d116      	bne.n	8002520 <Calculo_modbus+0xb0>
			dato_a = M_Potencia[vuelta];
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	4a78      	ldr	r2, [pc, #480]	; (80026d8 <Calculo_modbus+0x268>)
 80024f6:	5cd2      	ldrb	r2, [r2, r3]
 80024f8:	4b72      	ldr	r3, [pc, #456]	; (80026c4 <Calculo_modbus+0x254>)
 80024fa:	701a      	strb	r2, [r3, #0]
			dato_b = M_Potencia[1+vuelta];
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	3301      	adds	r3, #1
 8002500:	4a75      	ldr	r2, [pc, #468]	; (80026d8 <Calculo_modbus+0x268>)
 8002502:	5cd2      	ldrb	r2, [r2, r3]
 8002504:	4b70      	ldr	r3, [pc, #448]	; (80026c8 <Calculo_modbus+0x258>)
 8002506:	701a      	strb	r2, [r3, #0]
			dato_c = M_Potencia[2+vuelta];
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	3302      	adds	r3, #2
 800250c:	4a72      	ldr	r2, [pc, #456]	; (80026d8 <Calculo_modbus+0x268>)
 800250e:	5cd2      	ldrb	r2, [r2, r3]
 8002510:	4b6e      	ldr	r3, [pc, #440]	; (80026cc <Calculo_modbus+0x25c>)
 8002512:	701a      	strb	r2, [r3, #0]
			dato_d = M_Potencia[3+vuelta];
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	3303      	adds	r3, #3
 8002518:	4a6f      	ldr	r2, [pc, #444]	; (80026d8 <Calculo_modbus+0x268>)
 800251a:	5cd2      	ldrb	r2, [r2, r3]
 800251c:	4b6c      	ldr	r3, [pc, #432]	; (80026d0 <Calculo_modbus+0x260>)
 800251e:	701a      	strb	r2, [r3, #0]
		}
		ex = 0;
 8002520:	4b6e      	ldr	r3, [pc, #440]	; (80026dc <Calculo_modbus+0x26c>)
 8002522:	2200      	movs	r2, #0
 8002524:	801a      	strh	r2, [r3, #0]
		dato_a &= 0x7F;
 8002526:	4b67      	ldr	r3, [pc, #412]	; (80026c4 <Calculo_modbus+0x254>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800252e:	b2da      	uxtb	r2, r3
 8002530:	4b64      	ldr	r3, [pc, #400]	; (80026c4 <Calculo_modbus+0x254>)
 8002532:	701a      	strb	r2, [r3, #0]
		ex = ((dato_a*0x100)+dato_b)>>7;
 8002534:	4b63      	ldr	r3, [pc, #396]	; (80026c4 <Calculo_modbus+0x254>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	021b      	lsls	r3, r3, #8
 800253a:	4a63      	ldr	r2, [pc, #396]	; (80026c8 <Calculo_modbus+0x258>)
 800253c:	7812      	ldrb	r2, [r2, #0]
 800253e:	4413      	add	r3, r2
 8002540:	11db      	asrs	r3, r3, #7
 8002542:	b21a      	sxth	r2, r3
 8002544:	4b65      	ldr	r3, [pc, #404]	; (80026dc <Calculo_modbus+0x26c>)
 8002546:	801a      	strh	r2, [r3, #0]
		ex = ex-126;
 8002548:	4b64      	ldr	r3, [pc, #400]	; (80026dc <Calculo_modbus+0x26c>)
 800254a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800254e:	b29b      	uxth	r3, r3
 8002550:	3b7e      	subs	r3, #126	; 0x7e
 8002552:	b29b      	uxth	r3, r3
 8002554:	b21a      	sxth	r2, r3
 8002556:	4b61      	ldr	r3, [pc, #388]	; (80026dc <Calculo_modbus+0x26c>)
 8002558:	801a      	strh	r2, [r3, #0]
		if(((dato_b>>7)&(0x1))== 1){
 800255a:	4b5b      	ldr	r3, [pc, #364]	; (80026c8 <Calculo_modbus+0x258>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	09db      	lsrs	r3, r3, #7
 8002560:	b2db      	uxtb	r3, r3
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d017      	beq.n	800259a <Calculo_modbus+0x12a>
			mantisa = dato_b*0x10000;
 800256a:	4b57      	ldr	r3, [pc, #348]	; (80026c8 <Calculo_modbus+0x258>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	041b      	lsls	r3, r3, #16
 8002570:	461a      	mov	r2, r3
 8002572:	4b5b      	ldr	r3, [pc, #364]	; (80026e0 <Calculo_modbus+0x270>)
 8002574:	601a      	str	r2, [r3, #0]
			mantisa = mantisa + dato_c*0x100;
 8002576:	4b55      	ldr	r3, [pc, #340]	; (80026cc <Calculo_modbus+0x25c>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	021b      	lsls	r3, r3, #8
 800257c:	461a      	mov	r2, r3
 800257e:	4b58      	ldr	r3, [pc, #352]	; (80026e0 <Calculo_modbus+0x270>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4413      	add	r3, r2
 8002584:	4a56      	ldr	r2, [pc, #344]	; (80026e0 <Calculo_modbus+0x270>)
 8002586:	6013      	str	r3, [r2, #0]
			mantisa = mantisa + dato_d;
 8002588:	4b51      	ldr	r3, [pc, #324]	; (80026d0 <Calculo_modbus+0x260>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	4b54      	ldr	r3, [pc, #336]	; (80026e0 <Calculo_modbus+0x270>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4413      	add	r3, r2
 8002594:	4a52      	ldr	r2, [pc, #328]	; (80026e0 <Calculo_modbus+0x270>)
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	e01d      	b.n	80025d6 <Calculo_modbus+0x166>
		}else{
			mantisa = 0x800000;
 800259a:	4b51      	ldr	r3, [pc, #324]	; (80026e0 <Calculo_modbus+0x270>)
 800259c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80025a0:	601a      	str	r2, [r3, #0]
			mantisa = mantisa + dato_b*0x10000;
 80025a2:	4b49      	ldr	r3, [pc, #292]	; (80026c8 <Calculo_modbus+0x258>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	041b      	lsls	r3, r3, #16
 80025a8:	461a      	mov	r2, r3
 80025aa:	4b4d      	ldr	r3, [pc, #308]	; (80026e0 <Calculo_modbus+0x270>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4413      	add	r3, r2
 80025b0:	4a4b      	ldr	r2, [pc, #300]	; (80026e0 <Calculo_modbus+0x270>)
 80025b2:	6013      	str	r3, [r2, #0]
			mantisa = mantisa + dato_c*0x100;
 80025b4:	4b45      	ldr	r3, [pc, #276]	; (80026cc <Calculo_modbus+0x25c>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	021b      	lsls	r3, r3, #8
 80025ba:	461a      	mov	r2, r3
 80025bc:	4b48      	ldr	r3, [pc, #288]	; (80026e0 <Calculo_modbus+0x270>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4413      	add	r3, r2
 80025c2:	4a47      	ldr	r2, [pc, #284]	; (80026e0 <Calculo_modbus+0x270>)
 80025c4:	6013      	str	r3, [r2, #0]
			mantisa = mantisa + dato_d;
 80025c6:	4b42      	ldr	r3, [pc, #264]	; (80026d0 <Calculo_modbus+0x260>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	4b44      	ldr	r3, [pc, #272]	; (80026e0 <Calculo_modbus+0x270>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4413      	add	r3, r2
 80025d2:	4a43      	ldr	r2, [pc, #268]	; (80026e0 <Calculo_modbus+0x270>)
 80025d4:	6013      	str	r3, [r2, #0]
		}
		if(ex <= 24 ){
 80025d6:	4b41      	ldr	r3, [pc, #260]	; (80026dc <Calculo_modbus+0x26c>)
 80025d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025dc:	2b18      	cmp	r3, #24
 80025de:	dc25      	bgt.n	800262c <Calculo_modbus+0x1bc>
			mantisa = mantisa/ pow(2,24-ex);
 80025e0:	4b3f      	ldr	r3, [pc, #252]	; (80026e0 <Calculo_modbus+0x270>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fd fef5 	bl	80003d4 <__aeabi_ui2d>
 80025ea:	4604      	mov	r4, r0
 80025ec:	460d      	mov	r5, r1
 80025ee:	4b3b      	ldr	r3, [pc, #236]	; (80026dc <Calculo_modbus+0x26c>)
 80025f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025f4:	f1c3 0318 	rsb	r3, r3, #24
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fd fefb 	bl	80003f4 <__aeabi_i2d>
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	f04f 0000 	mov.w	r0, #0
 8002606:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800260a:	f009 fb49 	bl	800bca0 <pow>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4620      	mov	r0, r4
 8002614:	4629      	mov	r1, r5
 8002616:	f7fe f881 	bl	800071c <__aeabi_ddiv>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4610      	mov	r0, r2
 8002620:	4619      	mov	r1, r3
 8002622:	f7fe fa01 	bl	8000a28 <__aeabi_d2uiz>
 8002626:	4603      	mov	r3, r0
 8002628:	4a2d      	ldr	r2, [pc, #180]	; (80026e0 <Calculo_modbus+0x270>)
 800262a:	6013      	str	r3, [r2, #0]
		}
		ubicacion = (vuelta+1) / 4;
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	3301      	adds	r3, #1
 8002630:	2b00      	cmp	r3, #0
 8002632:	da00      	bge.n	8002636 <Calculo_modbus+0x1c6>
 8002634:	3303      	adds	r3, #3
 8002636:	109b      	asrs	r3, r3, #2
 8002638:	b2da      	uxtb	r2, r3
 800263a:	4b2a      	ldr	r3, [pc, #168]	; (80026e4 <Calculo_modbus+0x274>)
 800263c:	701a      	strb	r2, [r3, #0]
		ubicacion -= 1;
 800263e:	4b29      	ldr	r3, [pc, #164]	; (80026e4 <Calculo_modbus+0x274>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	3b01      	subs	r3, #1
 8002644:	b2da      	uxtb	r2, r3
 8002646:	4b27      	ldr	r3, [pc, #156]	; (80026e4 <Calculo_modbus+0x274>)
 8002648:	701a      	strb	r2, [r3, #0]
		if(mensaje == 1){
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d109      	bne.n	8002664 <Calculo_modbus+0x1f4>
			Tension[ubicacion] = mantisa;
 8002650:	4b23      	ldr	r3, [pc, #140]	; (80026e0 <Calculo_modbus+0x270>)
 8002652:	6819      	ldr	r1, [r3, #0]
 8002654:	4b23      	ldr	r3, [pc, #140]	; (80026e4 <Calculo_modbus+0x274>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	b289      	uxth	r1, r1
 800265c:	4b22      	ldr	r3, [pc, #136]	; (80026e8 <Calculo_modbus+0x278>)
 800265e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8002662:	e020      	b.n	80026a6 <Calculo_modbus+0x236>
		}else if(mensaje == 2){
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d109      	bne.n	800267e <Calculo_modbus+0x20e>
			Corriente[ubicacion] = mantisa;
 800266a:	4b1d      	ldr	r3, [pc, #116]	; (80026e0 <Calculo_modbus+0x270>)
 800266c:	6819      	ldr	r1, [r3, #0]
 800266e:	4b1d      	ldr	r3, [pc, #116]	; (80026e4 <Calculo_modbus+0x274>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	b289      	uxth	r1, r1
 8002676:	4b1d      	ldr	r3, [pc, #116]	; (80026ec <Calculo_modbus+0x27c>)
 8002678:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800267c:	e013      	b.n	80026a6 <Calculo_modbus+0x236>
		}else if(mensaje == 3){
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	2b03      	cmp	r3, #3
 8002682:	d110      	bne.n	80026a6 <Calculo_modbus+0x236>
			mantisa /= 1000;
 8002684:	4b16      	ldr	r3, [pc, #88]	; (80026e0 <Calculo_modbus+0x270>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a19      	ldr	r2, [pc, #100]	; (80026f0 <Calculo_modbus+0x280>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	099b      	lsrs	r3, r3, #6
 8002690:	4a13      	ldr	r2, [pc, #76]	; (80026e0 <Calculo_modbus+0x270>)
 8002692:	6013      	str	r3, [r2, #0]
			Potencia[ubicacion] = mantisa;
 8002694:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <Calculo_modbus+0x270>)
 8002696:	6819      	ldr	r1, [r3, #0]
 8002698:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <Calculo_modbus+0x274>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	b289      	uxth	r1, r1
 80026a0:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <Calculo_modbus+0x284>)
 80026a2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(uint8_t vuelta=3;vuelta < 12; vuelta+=4){
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
 80026a8:	3304      	adds	r3, #4
 80026aa:	73fb      	strb	r3, [r7, #15]
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	2b0b      	cmp	r3, #11
 80026b0:	f67f aee6 	bls.w	8002480 <Calculo_modbus+0x10>
		}
	}
}
 80026b4:	bf00      	nop
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bdb0      	pop	{r4, r5, r7, pc}
 80026be:	bf00      	nop
 80026c0:	2000083c 	.word	0x2000083c
 80026c4:	20000c8d 	.word	0x20000c8d
 80026c8:	200006c8 	.word	0x200006c8
 80026cc:	20000c8e 	.word	0x20000c8e
 80026d0:	2000076b 	.word	0x2000076b
 80026d4:	20000758 	.word	0x20000758
 80026d8:	200006ac 	.word	0x200006ac
 80026dc:	200006be 	.word	0x200006be
 80026e0:	20000114 	.word	0x20000114
 80026e4:	20000c8c 	.word	0x20000c8c
 80026e8:	200007d0 	.word	0x200007d0
 80026ec:	20000750 	.word	0x20000750
 80026f0:	10624dd3 	.word	0x10624dd3
 80026f4:	20000710 	.word	0x20000710

080026f8 <Procesado>:


void Procesado(){
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
	if((h_calculo & 0x01)== 0x01){
 80026fc:	4b19      	ldr	r3, [pc, #100]	; (8002764 <Procesado+0x6c>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00a      	beq.n	800271e <Procesado+0x26>
		Calculo_modbus(1);
 8002708:	2001      	movs	r0, #1
 800270a:	f7ff feb1 	bl	8002470 <Calculo_modbus>
		h_calculo ^= 0x01;
 800270e:	4b15      	ldr	r3, [pc, #84]	; (8002764 <Procesado+0x6c>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	f083 0301 	eor.w	r3, r3, #1
 8002716:	b2da      	uxtb	r2, r3
 8002718:	4b12      	ldr	r3, [pc, #72]	; (8002764 <Procesado+0x6c>)
 800271a:	701a      	strb	r2, [r3, #0]
	}else if((h_calculo & 0x04)== 0x04){
		Calculo_modbus(3);

		h_calculo ^= 0x04;
	}
}
 800271c:	e020      	b.n	8002760 <Procesado+0x68>
	}else if((h_calculo & 0x02)== 0x02){
 800271e:	4b11      	ldr	r3, [pc, #68]	; (8002764 <Procesado+0x6c>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00a      	beq.n	8002740 <Procesado+0x48>
		Calculo_modbus(2);
 800272a:	2002      	movs	r0, #2
 800272c:	f7ff fea0 	bl	8002470 <Calculo_modbus>
		h_calculo ^= 0x02;
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <Procesado+0x6c>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	f083 0302 	eor.w	r3, r3, #2
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <Procesado+0x6c>)
 800273c:	701a      	strb	r2, [r3, #0]
}
 800273e:	e00f      	b.n	8002760 <Procesado+0x68>
	}else if((h_calculo & 0x04)== 0x04){
 8002740:	4b08      	ldr	r3, [pc, #32]	; (8002764 <Procesado+0x6c>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d009      	beq.n	8002760 <Procesado+0x68>
		Calculo_modbus(3);
 800274c:	2003      	movs	r0, #3
 800274e:	f7ff fe8f 	bl	8002470 <Calculo_modbus>
		h_calculo ^= 0x04;
 8002752:	4b04      	ldr	r3, [pc, #16]	; (8002764 <Procesado+0x6c>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	f083 0304 	eor.w	r3, r3, #4
 800275a:	b2da      	uxtb	r2, r3
 800275c:	4b01      	ldr	r3, [pc, #4]	; (8002764 <Procesado+0x6c>)
 800275e:	701a      	strb	r2, [r3, #0]
}
 8002760:	bf00      	nop
 8002762:	bd80      	pop	{r7, pc}
 8002764:	20000112 	.word	0x20000112

08002768 <MuestraTiempo>:

void MuestraTiempo(){
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af02      	add	r7, sp, #8
	sprintf(buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 800276e:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <MuestraTiempo+0x40>)
 8002770:	789b      	ldrb	r3, [r3, #2]
 8002772:	461a      	mov	r2, r3
 8002774:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <MuestraTiempo+0x40>)
 8002776:	785b      	ldrb	r3, [r3, #1]
 8002778:	4619      	mov	r1, r3
 800277a:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <MuestraTiempo+0x40>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	460b      	mov	r3, r1
 8002782:	490a      	ldr	r1, [pc, #40]	; (80027ac <MuestraTiempo+0x44>)
 8002784:	480a      	ldr	r0, [pc, #40]	; (80027b0 <MuestraTiempo+0x48>)
 8002786:	f008 ff07 	bl	800b598 <siprintf>
	compsegundo = time.seconds;
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <MuestraTiempo+0x40>)
 800278c:	781a      	ldrb	r2, [r3, #0]
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <MuestraTiempo+0x4c>)
 8002790:	701a      	strb	r2, [r3, #0]
	lcd_put_cur(1, 0);
 8002792:	2100      	movs	r1, #0
 8002794:	2001      	movs	r0, #1
 8002796:	f7fe feac 	bl	80014f2 <lcd_put_cur>
	lcd_send_string(buffer);
 800279a:	4805      	ldr	r0, [pc, #20]	; (80027b0 <MuestraTiempo+0x48>)
 800279c:	f7fe ff05 	bl	80015aa <lcd_send_string>
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	200007c0 	.word	0x200007c0
 80027ac:	0800cc10 	.word	0x0800cc10
 80027b0:	2000071c 	.word	0x2000071c
 80027b4:	200006c0 	.word	0x200006c0

080027b8 <Automatico>:

void Automatico(void){
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
	if(time.seconds != compsegundo) {MuestraTiempo(); Escritura_SD();}
 80027be:	4ba0      	ldr	r3, [pc, #640]	; (8002a40 <Automatico+0x288>)
 80027c0:	781a      	ldrb	r2, [r3, #0]
 80027c2:	4ba0      	ldr	r3, [pc, #640]	; (8002a44 <Automatico+0x28c>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d003      	beq.n	80027d2 <Automatico+0x1a>
 80027ca:	f7ff ffcd 	bl	8002768 <MuestraTiempo>
 80027ce:	f7ff fd81 	bl	80022d4 <Escritura_SD>
	Procesado();
 80027d2:	f7ff ff91 	bl	80026f8 <Procesado>
  //Modbus();
  //lcd_put_cur(1, 0);
  //lcd.print(Potencia[0]);lcd_send_string("W      ");
  if(leer == 1){
 80027d6:	4b9c      	ldr	r3, [pc, #624]	; (8002a48 <Automatico+0x290>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	f040 815d 	bne.w	8002a9a <Automatico+0x2e2>
	pcf1_send(salidaReles[direccion]);
 80027e0:	4b9a      	ldr	r3, [pc, #616]	; (8002a4c <Automatico+0x294>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	461a      	mov	r2, r3
 80027e6:	4b9a      	ldr	r3, [pc, #616]	; (8002a50 <Automatico+0x298>)
 80027e8:	5c9b      	ldrb	r3, [r3, r2]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff f89e 	bl	800192c <pcf1_send>
	pcf2_send(salidaReles[direccion+1]);
 80027f0:	4b96      	ldr	r3, [pc, #600]	; (8002a4c <Automatico+0x294>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	3301      	adds	r3, #1
 80027f6:	4a96      	ldr	r2, [pc, #600]	; (8002a50 <Automatico+0x298>)
 80027f8:	5cd3      	ldrb	r3, [r2, r3]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff f8ac 	bl	8001958 <pcf2_send>
    uint16_t valor1 = 75*P_sig;
 8002800:	4b94      	ldr	r3, [pc, #592]	; (8002a54 <Automatico+0x29c>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	b29b      	uxth	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	0092      	lsls	r2, r2, #2
 800280a:	4413      	add	r3, r2
 800280c:	461a      	mov	r2, r3
 800280e:	0112      	lsls	r2, r2, #4
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	80fb      	strh	r3, [r7, #6]
    uint8_t ent_valor1 = valor1*0.1;
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	4618      	mov	r0, r3
 8002818:	f7fd fdec 	bl	80003f4 <__aeabi_i2d>
 800281c:	a386      	add	r3, pc, #536	; (adr r3, 8002a38 <Automatico+0x280>)
 800281e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002822:	f7fd fe51 	bl	80004c8 <__aeabi_dmul>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4610      	mov	r0, r2
 800282c:	4619      	mov	r1, r3
 800282e:	f7fe f8fb 	bl	8000a28 <__aeabi_d2uiz>
 8002832:	4603      	mov	r3, r0
 8002834:	717b      	strb	r3, [r7, #5]
    uint8_t un_valor1 = valor1 - (ent_valor1 * 10);
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	b2da      	uxtb	r2, r3
 800283a:	797b      	ldrb	r3, [r7, #5]
 800283c:	4619      	mov	r1, r3
 800283e:	0149      	lsls	r1, r1, #5
 8002840:	1ac9      	subs	r1, r1, r3
 8002842:	0089      	lsls	r1, r1, #2
 8002844:	1acb      	subs	r3, r1, r3
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	b2db      	uxtb	r3, r3
 800284a:	4413      	add	r3, r2
 800284c:	713b      	strb	r3, [r7, #4]
    lcd_put_cur(0, 0);
 800284e:	2100      	movs	r1, #0
 8002850:	2000      	movs	r0, #0
 8002852:	f7fe fe4e 	bl	80014f2 <lcd_put_cur>
    lcd_send_string("ACTUAL: ");
 8002856:	4880      	ldr	r0, [pc, #512]	; (8002a58 <Automatico+0x2a0>)
 8002858:	f7fe fea7 	bl	80015aa <lcd_send_string>
    sprintf(buffer,"%d",ent_valor1);
 800285c:	797b      	ldrb	r3, [r7, #5]
 800285e:	461a      	mov	r2, r3
 8002860:	497e      	ldr	r1, [pc, #504]	; (8002a5c <Automatico+0x2a4>)
 8002862:	487f      	ldr	r0, [pc, #508]	; (8002a60 <Automatico+0x2a8>)
 8002864:	f008 fe98 	bl	800b598 <siprintf>
    lcd_send_string(buffer);//lcd.print(ent_valor1);
 8002868:	487d      	ldr	r0, [pc, #500]	; (8002a60 <Automatico+0x2a8>)
 800286a:	f7fe fe9e 	bl	80015aa <lcd_send_string>
    lcd_send_string(".");
 800286e:	487d      	ldr	r0, [pc, #500]	; (8002a64 <Automatico+0x2ac>)
 8002870:	f7fe fe9b 	bl	80015aa <lcd_send_string>
    sprintf(buffer,"%d",un_valor1);
 8002874:	793b      	ldrb	r3, [r7, #4]
 8002876:	461a      	mov	r2, r3
 8002878:	4978      	ldr	r1, [pc, #480]	; (8002a5c <Automatico+0x2a4>)
 800287a:	4879      	ldr	r0, [pc, #484]	; (8002a60 <Automatico+0x2a8>)
 800287c:	f008 fe8c 	bl	800b598 <siprintf>
    lcd_send_string(buffer);//lcd.print(un_valor1);
 8002880:	4877      	ldr	r0, [pc, #476]	; (8002a60 <Automatico+0x2a8>)
 8002882:	f7fe fe92 	bl	80015aa <lcd_send_string>
    lcd_send_string("Kw");
 8002886:	4878      	ldr	r0, [pc, #480]	; (8002a68 <Automatico+0x2b0>)
 8002888:	f7fe fe8f 	bl	80015aa <lcd_send_string>
    set_segundo = time.seconds;
 800288c:	4b6c      	ldr	r3, [pc, #432]	; (8002a40 <Automatico+0x288>)
 800288e:	781a      	ldrb	r2, [r3, #0]
 8002890:	4b76      	ldr	r3, [pc, #472]	; (8002a6c <Automatico+0x2b4>)
 8002892:	701a      	strb	r2, [r3, #0]
    set_minuto = time.minutes;
 8002894:	4b6a      	ldr	r3, [pc, #424]	; (8002a40 <Automatico+0x288>)
 8002896:	785a      	ldrb	r2, [r3, #1]
 8002898:	4b75      	ldr	r3, [pc, #468]	; (8002a70 <Automatico+0x2b8>)
 800289a:	701a      	strb	r2, [r3, #0]
    set_minuto = set_minuto + tiempo;
 800289c:	4b74      	ldr	r3, [pc, #464]	; (8002a70 <Automatico+0x2b8>)
 800289e:	781a      	ldrb	r2, [r3, #0]
 80028a0:	4b74      	ldr	r3, [pc, #464]	; (8002a74 <Automatico+0x2bc>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	4413      	add	r3, r2
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	4b71      	ldr	r3, [pc, #452]	; (8002a70 <Automatico+0x2b8>)
 80028aa:	701a      	strb	r2, [r3, #0]
    set_hors = time.hour;
 80028ac:	4b64      	ldr	r3, [pc, #400]	; (8002a40 <Automatico+0x288>)
 80028ae:	789a      	ldrb	r2, [r3, #2]
 80028b0:	4b71      	ldr	r3, [pc, #452]	; (8002a78 <Automatico+0x2c0>)
 80028b2:	701a      	strb	r2, [r3, #0]
    if(set_minuto >= 60){
 80028b4:	4b6e      	ldr	r3, [pc, #440]	; (8002a70 <Automatico+0x2b8>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b3b      	cmp	r3, #59	; 0x3b
 80028ba:	d90b      	bls.n	80028d4 <Automatico+0x11c>
      set_minuto = set_minuto - 60;
 80028bc:	4b6c      	ldr	r3, [pc, #432]	; (8002a70 <Automatico+0x2b8>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	3b3c      	subs	r3, #60	; 0x3c
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	4b6a      	ldr	r3, [pc, #424]	; (8002a70 <Automatico+0x2b8>)
 80028c6:	701a      	strb	r2, [r3, #0]
      set_hors = set_hors + 1;
 80028c8:	4b6b      	ldr	r3, [pc, #428]	; (8002a78 <Automatico+0x2c0>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	3301      	adds	r3, #1
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	4b69      	ldr	r3, [pc, #420]	; (8002a78 <Automatico+0x2c0>)
 80028d2:	701a      	strb	r2, [r3, #0]
    }
    leer = 0;
 80028d4:	4b5c      	ldr	r3, [pc, #368]	; (8002a48 <Automatico+0x290>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	701a      	strb	r2, [r3, #0]
    if(ultimo == 0){
 80028da:	4b68      	ldr	r3, [pc, #416]	; (8002a7c <Automatico+0x2c4>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f040 80d8 	bne.w	8002a94 <Automatico+0x2dc>
      if(P_modo == 1){
 80028e4:	4b66      	ldr	r3, [pc, #408]	; (8002a80 <Automatico+0x2c8>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d122      	bne.n	8002932 <Automatico+0x17a>
          P_sig = P_sig + P_pas;
 80028ec:	4b59      	ldr	r3, [pc, #356]	; (8002a54 <Automatico+0x29c>)
 80028ee:	781a      	ldrb	r2, [r3, #0]
 80028f0:	4b64      	ldr	r3, [pc, #400]	; (8002a84 <Automatico+0x2cc>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	4413      	add	r3, r2
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	4b56      	ldr	r3, [pc, #344]	; (8002a54 <Automatico+0x29c>)
 80028fa:	701a      	strb	r2, [r3, #0]
          direccion = 2*P_sig;
 80028fc:	4b55      	ldr	r3, [pc, #340]	; (8002a54 <Automatico+0x29c>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	b2da      	uxtb	r2, r3
 8002904:	4b51      	ldr	r3, [pc, #324]	; (8002a4c <Automatico+0x294>)
 8002906:	701a      	strb	r2, [r3, #0]
          if(P_sig >= P_max){
 8002908:	4b52      	ldr	r3, [pc, #328]	; (8002a54 <Automatico+0x29c>)
 800290a:	781a      	ldrb	r2, [r3, #0]
 800290c:	4b5e      	ldr	r3, [pc, #376]	; (8002a88 <Automatico+0x2d0>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	f0c0 80c2 	bcc.w	8002a9a <Automatico+0x2e2>
            P_sig = P_max;
 8002916:	4b5c      	ldr	r3, [pc, #368]	; (8002a88 <Automatico+0x2d0>)
 8002918:	781a      	ldrb	r2, [r3, #0]
 800291a:	4b4e      	ldr	r3, [pc, #312]	; (8002a54 <Automatico+0x29c>)
 800291c:	701a      	strb	r2, [r3, #0]
            direccion = 2*P_sig;
 800291e:	4b4d      	ldr	r3, [pc, #308]	; (8002a54 <Automatico+0x29c>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	b2da      	uxtb	r2, r3
 8002926:	4b49      	ldr	r3, [pc, #292]	; (8002a4c <Automatico+0x294>)
 8002928:	701a      	strb	r2, [r3, #0]
            ultimo = 1;
 800292a:	4b54      	ldr	r3, [pc, #336]	; (8002a7c <Automatico+0x2c4>)
 800292c:	2201      	movs	r2, #1
 800292e:	701a      	strb	r2, [r3, #0]
 8002930:	e0b3      	b.n	8002a9a <Automatico+0x2e2>
          }
      }else if(P_modo == 2){
 8002932:	4b53      	ldr	r3, [pc, #332]	; (8002a80 <Automatico+0x2c8>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d126      	bne.n	8002988 <Automatico+0x1d0>
          P_sig = P_sig - P_pas;
 800293a:	4b46      	ldr	r3, [pc, #280]	; (8002a54 <Automatico+0x29c>)
 800293c:	781a      	ldrb	r2, [r3, #0]
 800293e:	4b51      	ldr	r3, [pc, #324]	; (8002a84 <Automatico+0x2cc>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	b2da      	uxtb	r2, r3
 8002946:	4b43      	ldr	r3, [pc, #268]	; (8002a54 <Automatico+0x29c>)
 8002948:	701a      	strb	r2, [r3, #0]
          direccion = 2*P_sig;
 800294a:	4b42      	ldr	r3, [pc, #264]	; (8002a54 <Automatico+0x29c>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	b2da      	uxtb	r2, r3
 8002952:	4b3e      	ldr	r3, [pc, #248]	; (8002a4c <Automatico+0x294>)
 8002954:	701a      	strb	r2, [r3, #0]
          if((P_sig<=P_min)||(P_sig>240)){
 8002956:	4b3f      	ldr	r3, [pc, #252]	; (8002a54 <Automatico+0x29c>)
 8002958:	781a      	ldrb	r2, [r3, #0]
 800295a:	4b4c      	ldr	r3, [pc, #304]	; (8002a8c <Automatico+0x2d4>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d904      	bls.n	800296c <Automatico+0x1b4>
 8002962:	4b3c      	ldr	r3, [pc, #240]	; (8002a54 <Automatico+0x29c>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2bf0      	cmp	r3, #240	; 0xf0
 8002968:	f240 8097 	bls.w	8002a9a <Automatico+0x2e2>
            P_sig = P_min;
 800296c:	4b47      	ldr	r3, [pc, #284]	; (8002a8c <Automatico+0x2d4>)
 800296e:	781a      	ldrb	r2, [r3, #0]
 8002970:	4b38      	ldr	r3, [pc, #224]	; (8002a54 <Automatico+0x29c>)
 8002972:	701a      	strb	r2, [r3, #0]
            direccion = 2*P_sig;
 8002974:	4b37      	ldr	r3, [pc, #220]	; (8002a54 <Automatico+0x29c>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	b2da      	uxtb	r2, r3
 800297c:	4b33      	ldr	r3, [pc, #204]	; (8002a4c <Automatico+0x294>)
 800297e:	701a      	strb	r2, [r3, #0]
            ultimo = 1;
 8002980:	4b3e      	ldr	r3, [pc, #248]	; (8002a7c <Automatico+0x2c4>)
 8002982:	2201      	movs	r2, #1
 8002984:	701a      	strb	r2, [r3, #0]
 8002986:	e088      	b.n	8002a9a <Automatico+0x2e2>
          }
      }else if(P_modo == 3){
 8002988:	4b3d      	ldr	r3, [pc, #244]	; (8002a80 <Automatico+0x2c8>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b03      	cmp	r3, #3
 800298e:	f040 8084 	bne.w	8002a9a <Automatico+0x2e2>
          if(P_modo_franco == 1){
 8002992:	4b3f      	ldr	r3, [pc, #252]	; (8002a90 <Automatico+0x2d8>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d121      	bne.n	80029de <Automatico+0x226>
              P_sig = P_sig + P_pas;
 800299a:	4b2e      	ldr	r3, [pc, #184]	; (8002a54 <Automatico+0x29c>)
 800299c:	781a      	ldrb	r2, [r3, #0]
 800299e:	4b39      	ldr	r3, [pc, #228]	; (8002a84 <Automatico+0x2cc>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	4413      	add	r3, r2
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	4b2b      	ldr	r3, [pc, #172]	; (8002a54 <Automatico+0x29c>)
 80029a8:	701a      	strb	r2, [r3, #0]
              direccion = 2*P_sig;
 80029aa:	4b2a      	ldr	r3, [pc, #168]	; (8002a54 <Automatico+0x29c>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	4b26      	ldr	r3, [pc, #152]	; (8002a4c <Automatico+0x294>)
 80029b4:	701a      	strb	r2, [r3, #0]
              if(P_sig >= P_max){
 80029b6:	4b27      	ldr	r3, [pc, #156]	; (8002a54 <Automatico+0x29c>)
 80029b8:	781a      	ldrb	r2, [r3, #0]
 80029ba:	4b33      	ldr	r3, [pc, #204]	; (8002a88 <Automatico+0x2d0>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d36b      	bcc.n	8002a9a <Automatico+0x2e2>
                P_sig = P_max;
 80029c2:	4b31      	ldr	r3, [pc, #196]	; (8002a88 <Automatico+0x2d0>)
 80029c4:	781a      	ldrb	r2, [r3, #0]
 80029c6:	4b23      	ldr	r3, [pc, #140]	; (8002a54 <Automatico+0x29c>)
 80029c8:	701a      	strb	r2, [r3, #0]
                direccion = 2*P_sig;
 80029ca:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <Automatico+0x29c>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	4b1e      	ldr	r3, [pc, #120]	; (8002a4c <Automatico+0x294>)
 80029d4:	701a      	strb	r2, [r3, #0]
                P_modo_franco = 0;
 80029d6:	4b2e      	ldr	r3, [pc, #184]	; (8002a90 <Automatico+0x2d8>)
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]
 80029dc:	e05d      	b.n	8002a9a <Automatico+0x2e2>
              }
          }else if(P_modo_franco == 0){
 80029de:	4b2c      	ldr	r3, [pc, #176]	; (8002a90 <Automatico+0x2d8>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d159      	bne.n	8002a9a <Automatico+0x2e2>
              P_sig = P_sig - P_pas;
 80029e6:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <Automatico+0x29c>)
 80029e8:	781a      	ldrb	r2, [r3, #0]
 80029ea:	4b26      	ldr	r3, [pc, #152]	; (8002a84 <Automatico+0x2cc>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	4b18      	ldr	r3, [pc, #96]	; (8002a54 <Automatico+0x29c>)
 80029f4:	701a      	strb	r2, [r3, #0]
              direccion = 2*P_sig;
 80029f6:	4b17      	ldr	r3, [pc, #92]	; (8002a54 <Automatico+0x29c>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <Automatico+0x294>)
 8002a00:	701a      	strb	r2, [r3, #0]
              if((P_sig<=P_min)||(P_sig>240)){
 8002a02:	4b14      	ldr	r3, [pc, #80]	; (8002a54 <Automatico+0x29c>)
 8002a04:	781a      	ldrb	r2, [r3, #0]
 8002a06:	4b21      	ldr	r3, [pc, #132]	; (8002a8c <Automatico+0x2d4>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d903      	bls.n	8002a16 <Automatico+0x25e>
 8002a0e:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <Automatico+0x29c>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2bf0      	cmp	r3, #240	; 0xf0
 8002a14:	d941      	bls.n	8002a9a <Automatico+0x2e2>
                P_sig = P_min;
 8002a16:	4b1d      	ldr	r3, [pc, #116]	; (8002a8c <Automatico+0x2d4>)
 8002a18:	781a      	ldrb	r2, [r3, #0]
 8002a1a:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <Automatico+0x29c>)
 8002a1c:	701a      	strb	r2, [r3, #0]
                direccion = 2*P_sig;
 8002a1e:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <Automatico+0x29c>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <Automatico+0x294>)
 8002a28:	701a      	strb	r2, [r3, #0]
                ultimo = 1;
 8002a2a:	4b14      	ldr	r3, [pc, #80]	; (8002a7c <Automatico+0x2c4>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	701a      	strb	r2, [r3, #0]
 8002a30:	e033      	b.n	8002a9a <Automatico+0x2e2>
 8002a32:	bf00      	nop
 8002a34:	f3af 8000 	nop.w
 8002a38:	9999999a 	.word	0x9999999a
 8002a3c:	3fb99999 	.word	0x3fb99999
 8002a40:	200007c0 	.word	0x200007c0
 8002a44:	200006c0 	.word	0x200006c0
 8002a48:	20000042 	.word	0x20000042
 8002a4c:	20000124 	.word	0x20000124
 8002a50:	20000004 	.word	0x20000004
 8002a54:	20000123 	.word	0x20000123
 8002a58:	0800cc24 	.word	0x0800cc24
 8002a5c:	0800cbe0 	.word	0x0800cbe0
 8002a60:	2000071c 	.word	0x2000071c
 8002a64:	0800cbe4 	.word	0x0800cbe4
 8002a68:	0800cc30 	.word	0x0800cc30
 8002a6c:	200006bd 	.word	0x200006bd
 8002a70:	20000164 	.word	0x20000164
 8002a74:	20000043 	.word	0x20000043
 8002a78:	20000772 	.word	0x20000772
 8002a7c:	20000126 	.word	0x20000126
 8002a80:	20000047 	.word	0x20000047
 8002a84:	20000046 	.word	0x20000046
 8002a88:	20000045 	.word	0x20000045
 8002a8c:	20000044 	.word	0x20000044
 8002a90:	20000048 	.word	0x20000048
              }
          }
      }
    }else{fin = 1;}
 8002a94:	4b29      	ldr	r3, [pc, #164]	; (8002b3c <Automatico+0x384>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	701a      	strb	r2, [r3, #0]
  }
  if((time.seconds== set_segundo)&&(time.minutes== set_minuto)&&(time.hour == set_hors)){
 8002a9a:	4b29      	ldr	r3, [pc, #164]	; (8002b40 <Automatico+0x388>)
 8002a9c:	781a      	ldrb	r2, [r3, #0]
 8002a9e:	4b29      	ldr	r3, [pc, #164]	; (8002b44 <Automatico+0x38c>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d145      	bne.n	8002b32 <Automatico+0x37a>
 8002aa6:	4b26      	ldr	r3, [pc, #152]	; (8002b40 <Automatico+0x388>)
 8002aa8:	785a      	ldrb	r2, [r3, #1]
 8002aaa:	4b27      	ldr	r3, [pc, #156]	; (8002b48 <Automatico+0x390>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d13f      	bne.n	8002b32 <Automatico+0x37a>
 8002ab2:	4b23      	ldr	r3, [pc, #140]	; (8002b40 <Automatico+0x388>)
 8002ab4:	789a      	ldrb	r2, [r3, #2]
 8002ab6:	4b25      	ldr	r3, [pc, #148]	; (8002b4c <Automatico+0x394>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d139      	bne.n	8002b32 <Automatico+0x37a>
    //Vuelve a repetir el leer
    if(fin == 1){
 8002abe:	4b1f      	ldr	r3, [pc, #124]	; (8002b3c <Automatico+0x384>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d132      	bne.n	8002b2c <Automatico+0x374>
      menu_conf = 1;
 8002ac6:	4b22      	ldr	r3, [pc, #136]	; (8002b50 <Automatico+0x398>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	701a      	strb	r2, [r3, #0]
      menu_auto = 0;
 8002acc:	4b21      	ldr	r3, [pc, #132]	; (8002b54 <Automatico+0x39c>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
      menu_manu = 0;
 8002ad2:	4b21      	ldr	r3, [pc, #132]	; (8002b58 <Automatico+0x3a0>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	701a      	strb	r2, [r3, #0]
      pag_menu = 0;
 8002ad8:	4b20      	ldr	r3, [pc, #128]	; (8002b5c <Automatico+0x3a4>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	701a      	strb	r2, [r3, #0]
      g_menu = 0;
 8002ade:	4b20      	ldr	r3, [pc, #128]	; (8002b60 <Automatico+0x3a8>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]
      m_cursor = 0;
 8002ae4:	4b1f      	ldr	r3, [pc, #124]	; (8002b64 <Automatico+0x3ac>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	701a      	strb	r2, [r3, #0]
      cursor_fila = 0;
 8002aea:	4b1f      	ldr	r3, [pc, #124]	; (8002b68 <Automatico+0x3b0>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]
      paso = 1;
 8002af0:	4b1e      	ldr	r3, [pc, #120]	; (8002b6c <Automatico+0x3b4>)
 8002af2:	2201      	movs	r2, #1
 8002af4:	701a      	strb	r2, [r3, #0]
      pag_anterior = 0;
 8002af6:	4b1e      	ldr	r3, [pc, #120]	; (8002b70 <Automatico+0x3b8>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	701a      	strb	r2, [r3, #0]
      pcf1_send(salidaReles[0]);
 8002afc:	4b1d      	ldr	r3, [pc, #116]	; (8002b74 <Automatico+0x3bc>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fe ff13 	bl	800192c <pcf1_send>
      pcf2_send(salidaReles[1]);
 8002b06:	4b1b      	ldr	r3, [pc, #108]	; (8002b74 <Automatico+0x3bc>)
 8002b08:	785b      	ldrb	r3, [r3, #1]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe ff24 	bl	8001958 <pcf2_send>
      lcd_clear();
 8002b10:	f7fe fcd8 	bl	80014c4 <lcd_clear>
      lcd_put_cur(0, 0);
 8002b14:	2100      	movs	r1, #0
 8002b16:	2000      	movs	r0, #0
 8002b18:	f7fe fceb 	bl	80014f2 <lcd_put_cur>
      lcd_send_string("FIN DE SECUENCIA");
 8002b1c:	4816      	ldr	r0, [pc, #88]	; (8002b78 <Automatico+0x3c0>)
 8002b1e:	f7fe fd44 	bl	80015aa <lcd_send_string>
      HAL_Delay(2000);
 8002b22:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b26:	f001 f8cf 	bl	8003cc8 <HAL_Delay>
    }else{
      leer = 1;
    }
  }
}
 8002b2a:	e002      	b.n	8002b32 <Automatico+0x37a>
      leer = 1;
 8002b2c:	4b13      	ldr	r3, [pc, #76]	; (8002b7c <Automatico+0x3c4>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	701a      	strb	r2, [r3, #0]
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000125 	.word	0x20000125
 8002b40:	200007c0 	.word	0x200007c0
 8002b44:	200006bd 	.word	0x200006bd
 8002b48:	20000164 	.word	0x20000164
 8002b4c:	20000772 	.word	0x20000772
 8002b50:	20000040 	.word	0x20000040
 8002b54:	2000011c 	.word	0x2000011c
 8002b58:	2000011d 	.word	0x2000011d
 8002b5c:	2000011e 	.word	0x2000011e
 8002b60:	2000011f 	.word	0x2000011f
 8002b64:	20000120 	.word	0x20000120
 8002b68:	20000121 	.word	0x20000121
 8002b6c:	20000041 	.word	0x20000041
 8002b70:	20000122 	.word	0x20000122
 8002b74:	20000004 	.word	0x20000004
 8002b78:	0800cc34 	.word	0x0800cc34
 8002b7c:	20000042 	.word	0x20000042

08002b80 <Manual>:




void Manual(void){
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0

	Procesado();
 8002b84:	f7ff fdb8 	bl	80026f8 <Procesado>
  //Modbus();
  //lcd_put_cur(1, 0);
  //lcd.print(Potencia[0]);lcd_send_string("W      ");

  if(est_left == 1){
 8002b88:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <Manual+0x34>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d10e      	bne.n	8002bae <Manual+0x2e>
      menu_conf = 1;
 8002b90:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <Manual+0x38>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	701a      	strb	r2, [r3, #0]
      menu_auto = 0;
 8002b96:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <Manual+0x3c>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	701a      	strb	r2, [r3, #0]
      menu_manu = 0;
 8002b9c:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <Manual+0x40>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
      pag_menu = 8;
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <Manual+0x44>)
 8002ba4:	2208      	movs	r2, #8
 8002ba6:	701a      	strb	r2, [r3, #0]
      g_menu = 8;
 8002ba8:	4b07      	ldr	r3, [pc, #28]	; (8002bc8 <Manual+0x48>)
 8002baa:	2208      	movs	r2, #8
 8002bac:	701a      	strb	r2, [r3, #0]
  }
}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000838 	.word	0x20000838
 8002bb8:	20000040 	.word	0x20000040
 8002bbc:	2000011c 	.word	0x2000011c
 8002bc0:	2000011d 	.word	0x2000011d
 8002bc4:	2000011e 	.word	0x2000011e
 8002bc8:	2000011f 	.word	0x2000011f
 8002bcc:	00000000 	.word	0x00000000

08002bd0 <Lcd_Menu>:



void Lcd_Menu(void){
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
  if(pag_menu == 0){
 8002bd6:	4bb2      	ldr	r3, [pc, #712]	; (8002ea0 <Lcd_Menu+0x2d0>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d110      	bne.n	8002c00 <Lcd_Menu+0x30>
      lcd_clear();
 8002bde:	f7fe fc71 	bl	80014c4 <lcd_clear>
      lcd_put_cur(0, 1);
 8002be2:	2101      	movs	r1, #1
 8002be4:	2000      	movs	r0, #0
 8002be6:	f7fe fc84 	bl	80014f2 <lcd_put_cur>
      lcd_send_string("AUTOMATICO");
 8002bea:	48ae      	ldr	r0, [pc, #696]	; (8002ea4 <Lcd_Menu+0x2d4>)
 8002bec:	f7fe fcdd 	bl	80015aa <lcd_send_string>
      lcd_put_cur(1, 1);
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	f7fe fc7d 	bl	80014f2 <lcd_put_cur>
      lcd_send_string("MANUAL");
 8002bf8:	48ab      	ldr	r0, [pc, #684]	; (8002ea8 <Lcd_Menu+0x2d8>)
 8002bfa:	f7fe fcd6 	bl	80015aa <lcd_send_string>
 8002bfe:	e233      	b.n	8003068 <Lcd_Menu+0x498>
  }else if(pag_menu == 1){
 8002c00:	4ba7      	ldr	r3, [pc, #668]	; (8002ea0 <Lcd_Menu+0x2d0>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d117      	bne.n	8002c38 <Lcd_Menu+0x68>
      lcd_clear();
 8002c08:	f7fe fc5c 	bl	80014c4 <lcd_clear>
      lcd_put_cur(0, 1);
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	2000      	movs	r0, #0
 8002c10:	f7fe fc6f 	bl	80014f2 <lcd_put_cur>
      lcd_send_string("POTENCIA MIN");
 8002c14:	48a5      	ldr	r0, [pc, #660]	; (8002eac <Lcd_Menu+0x2dc>)
 8002c16:	f7fe fcc8 	bl	80015aa <lcd_send_string>
      lcd_put_cur(1, 1);
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	2001      	movs	r0, #1
 8002c1e:	f7fe fc68 	bl	80014f2 <lcd_put_cur>
      lcd_send_string("POTENCIA MAX");
 8002c22:	48a3      	ldr	r0, [pc, #652]	; (8002eb0 <Lcd_Menu+0x2e0>)
 8002c24:	f7fe fcc1 	bl	80015aa <lcd_send_string>
      lcd_put_cur(1, 15);
 8002c28:	210f      	movs	r1, #15
 8002c2a:	2001      	movs	r0, #1
 8002c2c:	f7fe fc61 	bl	80014f2 <lcd_put_cur>
      lcd_write(3);
 8002c30:	2003      	movs	r0, #3
 8002c32:	f7fe fcff 	bl	8001634 <lcd_write>
 8002c36:	e217      	b.n	8003068 <Lcd_Menu+0x498>
  }else if(pag_menu == 2){
 8002c38:	4b99      	ldr	r3, [pc, #612]	; (8002ea0 <Lcd_Menu+0x2d0>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d11e      	bne.n	8002c7e <Lcd_Menu+0xae>
      lcd_clear();
 8002c40:	f7fe fc40 	bl	80014c4 <lcd_clear>
      lcd_put_cur(0, 15);
 8002c44:	210f      	movs	r1, #15
 8002c46:	2000      	movs	r0, #0
 8002c48:	f7fe fc53 	bl	80014f2 <lcd_put_cur>
      lcd_write(2);
 8002c4c:	2002      	movs	r0, #2
 8002c4e:	f7fe fcf1 	bl	8001634 <lcd_write>
      lcd_put_cur(0, 1);
 8002c52:	2101      	movs	r1, #1
 8002c54:	2000      	movs	r0, #0
 8002c56:	f7fe fc4c 	bl	80014f2 <lcd_put_cur>
      lcd_send_string("POTENCIA PASO");
 8002c5a:	4896      	ldr	r0, [pc, #600]	; (8002eb4 <Lcd_Menu+0x2e4>)
 8002c5c:	f7fe fca5 	bl	80015aa <lcd_send_string>

      lcd_put_cur(1, 1);
 8002c60:	2101      	movs	r1, #1
 8002c62:	2001      	movs	r0, #1
 8002c64:	f7fe fc45 	bl	80014f2 <lcd_put_cur>
      lcd_send_string("TIEMPO PASO");
 8002c68:	4893      	ldr	r0, [pc, #588]	; (8002eb8 <Lcd_Menu+0x2e8>)
 8002c6a:	f7fe fc9e 	bl	80015aa <lcd_send_string>
      lcd_put_cur(1, 15);
 8002c6e:	210f      	movs	r1, #15
 8002c70:	2001      	movs	r0, #1
 8002c72:	f7fe fc3e 	bl	80014f2 <lcd_put_cur>
      lcd_write(3);
 8002c76:	2003      	movs	r0, #3
 8002c78:	f7fe fcdc 	bl	8001634 <lcd_write>
 8002c7c:	e1f4      	b.n	8003068 <Lcd_Menu+0x498>
  }else if(pag_menu == 3){
 8002c7e:	4b88      	ldr	r3, [pc, #544]	; (8002ea0 <Lcd_Menu+0x2d0>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	d117      	bne.n	8002cb6 <Lcd_Menu+0xe6>
      lcd_clear();
 8002c86:	f7fe fc1d 	bl	80014c4 <lcd_clear>
      lcd_put_cur(0, 15);
 8002c8a:	210f      	movs	r1, #15
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	f7fe fc30 	bl	80014f2 <lcd_put_cur>
      lcd_write(2);
 8002c92:	2002      	movs	r0, #2
 8002c94:	f7fe fcce 	bl	8001634 <lcd_write>
      lcd_put_cur(0, 1);
 8002c98:	2101      	movs	r1, #1
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	f7fe fc29 	bl	80014f2 <lcd_put_cur>
      lcd_send_string("MODO ARRANQUE");
 8002ca0:	4886      	ldr	r0, [pc, #536]	; (8002ebc <Lcd_Menu+0x2ec>)
 8002ca2:	f7fe fc82 	bl	80015aa <lcd_send_string>
      lcd_put_cur(1, 1);
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	2001      	movs	r0, #1
 8002caa:	f7fe fc22 	bl	80014f2 <lcd_put_cur>
      lcd_send_string("INICIAR");
 8002cae:	4884      	ldr	r0, [pc, #528]	; (8002ec0 <Lcd_Menu+0x2f0>)
 8002cb0:	f7fe fc7b 	bl	80015aa <lcd_send_string>
 8002cb4:	e1d8      	b.n	8003068 <Lcd_Menu+0x498>
  }else if(pag_menu == 4){
 8002cb6:	4b7a      	ldr	r3, [pc, #488]	; (8002ea0 <Lcd_Menu+0x2d0>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	f040 8084 	bne.w	8002dc8 <Lcd_Menu+0x1f8>
	  uint16_t valor1 = 75*paso;
 8002cc0:	4b80      	ldr	r3, [pc, #512]	; (8002ec4 <Lcd_Menu+0x2f4>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	0092      	lsls	r2, r2, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	461a      	mov	r2, r3
 8002cce:	0112      	lsls	r2, r2, #4
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	817b      	strh	r3, [r7, #10]
      uint16_t valor2 = 75*(paso+1);
 8002cd4:	4b7b      	ldr	r3, [pc, #492]	; (8002ec4 <Lcd_Menu+0x2f4>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	461a      	mov	r2, r3
 8002cde:	0092      	lsls	r2, r2, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	0112      	lsls	r2, r2, #4
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	813b      	strh	r3, [r7, #8]
      uint8_t ent_valor1 = valor1*0.1;
 8002cea:	897b      	ldrh	r3, [r7, #10]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fd fb81 	bl	80003f4 <__aeabi_i2d>
 8002cf2:	a369      	add	r3, pc, #420	; (adr r3, 8002e98 <Lcd_Menu+0x2c8>)
 8002cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf8:	f7fd fbe6 	bl	80004c8 <__aeabi_dmul>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4610      	mov	r0, r2
 8002d02:	4619      	mov	r1, r3
 8002d04:	f7fd fe90 	bl	8000a28 <__aeabi_d2uiz>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	71fb      	strb	r3, [r7, #7]
      uint8_t ent_valor2 = valor2*0.1;
 8002d0c:	893b      	ldrh	r3, [r7, #8]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fd fb70 	bl	80003f4 <__aeabi_i2d>
 8002d14:	a360      	add	r3, pc, #384	; (adr r3, 8002e98 <Lcd_Menu+0x2c8>)
 8002d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1a:	f7fd fbd5 	bl	80004c8 <__aeabi_dmul>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4610      	mov	r0, r2
 8002d24:	4619      	mov	r1, r3
 8002d26:	f7fd fe7f 	bl	8000a28 <__aeabi_d2uiz>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	71bb      	strb	r3, [r7, #6]
      uint8_t un_valor1 = valor1 - (ent_valor1 * 10);
 8002d2e:	897b      	ldrh	r3, [r7, #10]
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	4619      	mov	r1, r3
 8002d36:	0149      	lsls	r1, r1, #5
 8002d38:	1ac9      	subs	r1, r1, r3
 8002d3a:	0089      	lsls	r1, r1, #2
 8002d3c:	1acb      	subs	r3, r1, r3
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	717b      	strb	r3, [r7, #5]
      uint8_t un_valor2 = valor2 - (ent_valor2 * 10);
 8002d46:	893b      	ldrh	r3, [r7, #8]
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	79bb      	ldrb	r3, [r7, #6]
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	0149      	lsls	r1, r1, #5
 8002d50:	1ac9      	subs	r1, r1, r3
 8002d52:	0089      	lsls	r1, r1, #2
 8002d54:	1acb      	subs	r3, r1, r3
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	713b      	strb	r3, [r7, #4]
      lcd_clear();
 8002d5e:	f7fe fbb1 	bl	80014c4 <lcd_clear>
      lcd_put_cur(0, 1);
 8002d62:	2101      	movs	r1, #1
 8002d64:	2000      	movs	r0, #0
 8002d66:	f7fe fbc4 	bl	80014f2 <lcd_put_cur>
      sprintf(buffer,"%d",ent_valor1);
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4956      	ldr	r1, [pc, #344]	; (8002ec8 <Lcd_Menu+0x2f8>)
 8002d70:	4856      	ldr	r0, [pc, #344]	; (8002ecc <Lcd_Menu+0x2fc>)
 8002d72:	f008 fc11 	bl	800b598 <siprintf>
      lcd_send_string(buffer);//lcd.print(ent_valor1);
 8002d76:	4855      	ldr	r0, [pc, #340]	; (8002ecc <Lcd_Menu+0x2fc>)
 8002d78:	f7fe fc17 	bl	80015aa <lcd_send_string>
      lcd_send_string(".");
 8002d7c:	4854      	ldr	r0, [pc, #336]	; (8002ed0 <Lcd_Menu+0x300>)
 8002d7e:	f7fe fc14 	bl	80015aa <lcd_send_string>
      sprintf(buffer,"%d",un_valor1);
 8002d82:	797b      	ldrb	r3, [r7, #5]
 8002d84:	461a      	mov	r2, r3
 8002d86:	4950      	ldr	r1, [pc, #320]	; (8002ec8 <Lcd_Menu+0x2f8>)
 8002d88:	4850      	ldr	r0, [pc, #320]	; (8002ecc <Lcd_Menu+0x2fc>)
 8002d8a:	f008 fc05 	bl	800b598 <siprintf>
      lcd_send_string(buffer);//lcd.print(un_valor1);
 8002d8e:	484f      	ldr	r0, [pc, #316]	; (8002ecc <Lcd_Menu+0x2fc>)
 8002d90:	f7fe fc0b 	bl	80015aa <lcd_send_string>
      lcd_put_cur(1, 1);
 8002d94:	2101      	movs	r1, #1
 8002d96:	2001      	movs	r0, #1
 8002d98:	f7fe fbab 	bl	80014f2 <lcd_put_cur>
      sprintf(buffer,"%d",ent_valor2);
 8002d9c:	79bb      	ldrb	r3, [r7, #6]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	4949      	ldr	r1, [pc, #292]	; (8002ec8 <Lcd_Menu+0x2f8>)
 8002da2:	484a      	ldr	r0, [pc, #296]	; (8002ecc <Lcd_Menu+0x2fc>)
 8002da4:	f008 fbf8 	bl	800b598 <siprintf>
      lcd_send_string(buffer);//lcd.print(ent_valor2);
 8002da8:	4848      	ldr	r0, [pc, #288]	; (8002ecc <Lcd_Menu+0x2fc>)
 8002daa:	f7fe fbfe 	bl	80015aa <lcd_send_string>
      lcd_send_string(".");
 8002dae:	4848      	ldr	r0, [pc, #288]	; (8002ed0 <Lcd_Menu+0x300>)
 8002db0:	f7fe fbfb 	bl	80015aa <lcd_send_string>
      sprintf(buffer,"%d",un_valor2);
 8002db4:	793b      	ldrb	r3, [r7, #4]
 8002db6:	461a      	mov	r2, r3
 8002db8:	4943      	ldr	r1, [pc, #268]	; (8002ec8 <Lcd_Menu+0x2f8>)
 8002dba:	4844      	ldr	r0, [pc, #272]	; (8002ecc <Lcd_Menu+0x2fc>)
 8002dbc:	f008 fbec 	bl	800b598 <siprintf>
      lcd_send_string(buffer);//lcd.print(un_valor2);
 8002dc0:	4842      	ldr	r0, [pc, #264]	; (8002ecc <Lcd_Menu+0x2fc>)
 8002dc2:	f7fe fbf2 	bl	80015aa <lcd_send_string>
 8002dc6:	e14f      	b.n	8003068 <Lcd_Menu+0x498>
  }else if(pag_menu == 5){
 8002dc8:	4b35      	ldr	r3, [pc, #212]	; (8002ea0 <Lcd_Menu+0x2d0>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b05      	cmp	r3, #5
 8002dce:	d131      	bne.n	8002e34 <Lcd_Menu+0x264>
      if(paso<5){
 8002dd0:	4b3c      	ldr	r3, [pc, #240]	; (8002ec4 <Lcd_Menu+0x2f4>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d804      	bhi.n	8002de2 <Lcd_Menu+0x212>
        tiempo = paso;
 8002dd8:	4b3a      	ldr	r3, [pc, #232]	; (8002ec4 <Lcd_Menu+0x2f4>)
 8002dda:	781a      	ldrb	r2, [r3, #0]
 8002ddc:	4b3d      	ldr	r3, [pc, #244]	; (8002ed4 <Lcd_Menu+0x304>)
 8002dde:	701a      	strb	r2, [r3, #0]
 8002de0:	e00d      	b.n	8002dfe <Lcd_Menu+0x22e>
      }else if(paso >= 5 ){
 8002de2:	4b38      	ldr	r3, [pc, #224]	; (8002ec4 <Lcd_Menu+0x2f4>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d909      	bls.n	8002dfe <Lcd_Menu+0x22e>
        tiempo = 5*(paso-4);
 8002dea:	4b36      	ldr	r3, [pc, #216]	; (8002ec4 <Lcd_Menu+0x2f4>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	0092      	lsls	r2, r2, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	3b14      	subs	r3, #20
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	4b36      	ldr	r3, [pc, #216]	; (8002ed4 <Lcd_Menu+0x304>)
 8002dfc:	701a      	strb	r2, [r3, #0]
      }
      lcd_clear();
 8002dfe:	f7fe fb61 	bl	80014c4 <lcd_clear>
      lcd_put_cur(0, 1);
 8002e02:	2101      	movs	r1, #1
 8002e04:	2000      	movs	r0, #0
 8002e06:	f7fe fb74 	bl	80014f2 <lcd_put_cur>
      lcd_send_string("TIEMPO POR PASO");
 8002e0a:	4833      	ldr	r0, [pc, #204]	; (8002ed8 <Lcd_Menu+0x308>)
 8002e0c:	f7fe fbcd 	bl	80015aa <lcd_send_string>
      lcd_put_cur(1, 1);
 8002e10:	2101      	movs	r1, #1
 8002e12:	2001      	movs	r0, #1
 8002e14:	f7fe fb6d 	bl	80014f2 <lcd_put_cur>
      sprintf(buffer,"%d",tiempo);
 8002e18:	4b2e      	ldr	r3, [pc, #184]	; (8002ed4 <Lcd_Menu+0x304>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	492a      	ldr	r1, [pc, #168]	; (8002ec8 <Lcd_Menu+0x2f8>)
 8002e20:	482a      	ldr	r0, [pc, #168]	; (8002ecc <Lcd_Menu+0x2fc>)
 8002e22:	f008 fbb9 	bl	800b598 <siprintf>
      lcd_send_string(buffer);//lcd.print(tiempo);
 8002e26:	4829      	ldr	r0, [pc, #164]	; (8002ecc <Lcd_Menu+0x2fc>)
 8002e28:	f7fe fbbf 	bl	80015aa <lcd_send_string>
      lcd_send_string(" min");
 8002e2c:	482b      	ldr	r0, [pc, #172]	; (8002edc <Lcd_Menu+0x30c>)
 8002e2e:	f7fe fbbc 	bl	80015aa <lcd_send_string>
 8002e32:	e119      	b.n	8003068 <Lcd_Menu+0x498>
  }else if(pag_menu == 6){
 8002e34:	4b1a      	ldr	r3, [pc, #104]	; (8002ea0 <Lcd_Menu+0x2d0>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b06      	cmp	r3, #6
 8002e3a:	d159      	bne.n	8002ef0 <Lcd_Menu+0x320>
      lcd_clear();
 8002e3c:	f7fe fb42 	bl	80014c4 <lcd_clear>
      lcd_put_cur(0, 0);
 8002e40:	2100      	movs	r1, #0
 8002e42:	2000      	movs	r0, #0
 8002e44:	f7fe fb55 	bl	80014f2 <lcd_put_cur>
      lcd_send_string("MODO DE ARRANQUE");
 8002e48:	4825      	ldr	r0, [pc, #148]	; (8002ee0 <Lcd_Menu+0x310>)
 8002e4a:	f7fe fbae 	bl	80015aa <lcd_send_string>
      lcd_put_cur(1, 0);
 8002e4e:	2100      	movs	r1, #0
 8002e50:	2001      	movs	r0, #1
 8002e52:	f7fe fb4e 	bl	80014f2 <lcd_put_cur>
      switch(paso){
 8002e56:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <Lcd_Menu+0x2f4>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d015      	beq.n	8002e8a <Lcd_Menu+0x2ba>
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	f300 8102 	bgt.w	8003068 <Lcd_Menu+0x498>
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d002      	beq.n	8002e6e <Lcd_Menu+0x29e>
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d007      	beq.n	8002e7c <Lcd_Menu+0x2ac>
 8002e6c:	e0fc      	b.n	8003068 <Lcd_Menu+0x498>
        case 1: lcd_write(2);
 8002e6e:	2002      	movs	r0, #2
 8002e70:	f7fe fbe0 	bl	8001634 <lcd_write>
        	lcd_send_string("MIN-MAX");
 8002e74:	481b      	ldr	r0, [pc, #108]	; (8002ee4 <Lcd_Menu+0x314>)
 8002e76:	f7fe fb98 	bl	80015aa <lcd_send_string>
        break;
 8002e7a:	e0f5      	b.n	8003068 <Lcd_Menu+0x498>
        case 2: lcd_write(1);
 8002e7c:	2001      	movs	r0, #1
 8002e7e:	f7fe fbd9 	bl	8001634 <lcd_write>
        	lcd_send_string("MAX-MIN");
 8002e82:	4819      	ldr	r0, [pc, #100]	; (8002ee8 <Lcd_Menu+0x318>)
 8002e84:	f7fe fb91 	bl	80015aa <lcd_send_string>
        break;
 8002e88:	e0ee      	b.n	8003068 <Lcd_Menu+0x498>
        case 3: lcd_write(3);
 8002e8a:	2003      	movs	r0, #3
 8002e8c:	f7fe fbd2 	bl	8001634 <lcd_write>
        	lcd_send_string("MIN-MAX-MIN");
 8002e90:	4816      	ldr	r0, [pc, #88]	; (8002eec <Lcd_Menu+0x31c>)
 8002e92:	f7fe fb8a 	bl	80015aa <lcd_send_string>
        break;
 8002e96:	e0e7      	b.n	8003068 <Lcd_Menu+0x498>
 8002e98:	9999999a 	.word	0x9999999a
 8002e9c:	3fb99999 	.word	0x3fb99999
 8002ea0:	2000011e 	.word	0x2000011e
 8002ea4:	0800cc48 	.word	0x0800cc48
 8002ea8:	0800cc54 	.word	0x0800cc54
 8002eac:	0800cc5c 	.word	0x0800cc5c
 8002eb0:	0800cc6c 	.word	0x0800cc6c
 8002eb4:	0800cc7c 	.word	0x0800cc7c
 8002eb8:	0800cc8c 	.word	0x0800cc8c
 8002ebc:	0800cc98 	.word	0x0800cc98
 8002ec0:	0800cca8 	.word	0x0800cca8
 8002ec4:	20000041 	.word	0x20000041
 8002ec8:	0800cbe0 	.word	0x0800cbe0
 8002ecc:	2000071c 	.word	0x2000071c
 8002ed0:	0800cbe4 	.word	0x0800cbe4
 8002ed4:	20000043 	.word	0x20000043
 8002ed8:	0800ccb0 	.word	0x0800ccb0
 8002edc:	0800ccc0 	.word	0x0800ccc0
 8002ee0:	0800ccc8 	.word	0x0800ccc8
 8002ee4:	0800ccdc 	.word	0x0800ccdc
 8002ee8:	0800cce4 	.word	0x0800cce4
 8002eec:	0800ccec 	.word	0x0800ccec
      }
  }else if(pag_menu == 7){
 8002ef0:	4b67      	ldr	r3, [pc, #412]	; (8003090 <Lcd_Menu+0x4c0>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b07      	cmp	r3, #7
 8002ef6:	d157      	bne.n	8002fa8 <Lcd_Menu+0x3d8>
    lcd_clear();
 8002ef8:	f7fe fae4 	bl	80014c4 <lcd_clear>
    menu_conf = 0;
 8002efc:	4b65      	ldr	r3, [pc, #404]	; (8003094 <Lcd_Menu+0x4c4>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	701a      	strb	r2, [r3, #0]
    leer = 1;
 8002f02:	4b65      	ldr	r3, [pc, #404]	; (8003098 <Lcd_Menu+0x4c8>)
 8002f04:	2201      	movs	r2, #1
 8002f06:	701a      	strb	r2, [r3, #0]
    menu_auto = 1;
 8002f08:	4b64      	ldr	r3, [pc, #400]	; (800309c <Lcd_Menu+0x4cc>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	701a      	strb	r2, [r3, #0]
    ultimo = 0;
 8002f0e:	4b64      	ldr	r3, [pc, #400]	; (80030a0 <Lcd_Menu+0x4d0>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	701a      	strb	r2, [r3, #0]
    fin = 0;
 8002f14:	4b63      	ldr	r3, [pc, #396]	; (80030a4 <Lcd_Menu+0x4d4>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	701a      	strb	r2, [r3, #0]
    if(P_modo == 1){
 8002f1a:	4b63      	ldr	r3, [pc, #396]	; (80030a8 <Lcd_Menu+0x4d8>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d10a      	bne.n	8002f38 <Lcd_Menu+0x368>
      P_sig = P_min;
 8002f22:	4b62      	ldr	r3, [pc, #392]	; (80030ac <Lcd_Menu+0x4dc>)
 8002f24:	781a      	ldrb	r2, [r3, #0]
 8002f26:	4b62      	ldr	r3, [pc, #392]	; (80030b0 <Lcd_Menu+0x4e0>)
 8002f28:	701a      	strb	r2, [r3, #0]
      direccion = 2*P_min;
 8002f2a:	4b60      	ldr	r3, [pc, #384]	; (80030ac <Lcd_Menu+0x4dc>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	4b60      	ldr	r3, [pc, #384]	; (80030b4 <Lcd_Menu+0x4e4>)
 8002f34:	701a      	strb	r2, [r3, #0]
 8002f36:	e01f      	b.n	8002f78 <Lcd_Menu+0x3a8>
    }else if(P_modo == 2){
 8002f38:	4b5b      	ldr	r3, [pc, #364]	; (80030a8 <Lcd_Menu+0x4d8>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d10a      	bne.n	8002f56 <Lcd_Menu+0x386>
      P_sig = P_max;
 8002f40:	4b5d      	ldr	r3, [pc, #372]	; (80030b8 <Lcd_Menu+0x4e8>)
 8002f42:	781a      	ldrb	r2, [r3, #0]
 8002f44:	4b5a      	ldr	r3, [pc, #360]	; (80030b0 <Lcd_Menu+0x4e0>)
 8002f46:	701a      	strb	r2, [r3, #0]
      direccion = 2*P_max;
 8002f48:	4b5b      	ldr	r3, [pc, #364]	; (80030b8 <Lcd_Menu+0x4e8>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	4b58      	ldr	r3, [pc, #352]	; (80030b4 <Lcd_Menu+0x4e4>)
 8002f52:	701a      	strb	r2, [r3, #0]
 8002f54:	e010      	b.n	8002f78 <Lcd_Menu+0x3a8>
    }else if(P_modo == 3){
 8002f56:	4b54      	ldr	r3, [pc, #336]	; (80030a8 <Lcd_Menu+0x4d8>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b03      	cmp	r3, #3
 8002f5c:	d10c      	bne.n	8002f78 <Lcd_Menu+0x3a8>
      P_sig = P_min;
 8002f5e:	4b53      	ldr	r3, [pc, #332]	; (80030ac <Lcd_Menu+0x4dc>)
 8002f60:	781a      	ldrb	r2, [r3, #0]
 8002f62:	4b53      	ldr	r3, [pc, #332]	; (80030b0 <Lcd_Menu+0x4e0>)
 8002f64:	701a      	strb	r2, [r3, #0]
      direccion = 2*P_min;
 8002f66:	4b51      	ldr	r3, [pc, #324]	; (80030ac <Lcd_Menu+0x4dc>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	4b51      	ldr	r3, [pc, #324]	; (80030b4 <Lcd_Menu+0x4e4>)
 8002f70:	701a      	strb	r2, [r3, #0]
      P_modo_franco = 1;
 8002f72:	4b52      	ldr	r3, [pc, #328]	; (80030bc <Lcd_Menu+0x4ec>)
 8002f74:	2201      	movs	r2, #1
 8002f76:	701a      	strb	r2, [r3, #0]
    }
    compsegundo = time.seconds + 20;
 8002f78:	4b51      	ldr	r3, [pc, #324]	; (80030c0 <Lcd_Menu+0x4f0>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	3314      	adds	r3, #20
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	4b50      	ldr	r3, [pc, #320]	; (80030c4 <Lcd_Menu+0x4f4>)
 8002f82:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(modbus_GPIO_Port, modbus_Pin, 1);
 8002f84:	2201      	movs	r2, #1
 8002f86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f8a:	484f      	ldr	r0, [pc, #316]	; (80030c8 <Lcd_Menu+0x4f8>)
 8002f8c:	f001 fcc3 	bl	8004916 <HAL_GPIO_WritePin>
    h_envio = 1;
 8002f90:	4b4e      	ldr	r3, [pc, #312]	; (80030cc <Lcd_Menu+0x4fc>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	701a      	strb	r2, [r3, #0]
    h_calculo = 0;
 8002f96:	4b4e      	ldr	r3, [pc, #312]	; (80030d0 <Lcd_Menu+0x500>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_DMA(&huart3, mensaje1, 8);
 8002f9c:	2208      	movs	r2, #8
 8002f9e:	494d      	ldr	r1, [pc, #308]	; (80030d4 <Lcd_Menu+0x504>)
 8002fa0:	484d      	ldr	r0, [pc, #308]	; (80030d8 <Lcd_Menu+0x508>)
 8002fa2:	f003 ff9b 	bl	8006edc <HAL_UART_Transmit_DMA>
 8002fa6:	e05f      	b.n	8003068 <Lcd_Menu+0x498>

  }else if(pag_menu == 8){
 8002fa8:	4b39      	ldr	r3, [pc, #228]	; (8003090 <Lcd_Menu+0x4c0>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d15b      	bne.n	8003068 <Lcd_Menu+0x498>
    uint16_t valor1 = 75*paso;
 8002fb0:	4b4a      	ldr	r3, [pc, #296]	; (80030dc <Lcd_Menu+0x50c>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	0092      	lsls	r2, r2, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	0112      	lsls	r2, r2, #4
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	81fb      	strh	r3, [r7, #14]
    uint8_t ent_valor1 = valor1*0.1;
 8002fc4:	89fb      	ldrh	r3, [r7, #14]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fd fa14 	bl	80003f4 <__aeabi_i2d>
 8002fcc:	a32e      	add	r3, pc, #184	; (adr r3, 8003088 <Lcd_Menu+0x4b8>)
 8002fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd2:	f7fd fa79 	bl	80004c8 <__aeabi_dmul>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4610      	mov	r0, r2
 8002fdc:	4619      	mov	r1, r3
 8002fde:	f7fd fd23 	bl	8000a28 <__aeabi_d2uiz>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	737b      	strb	r3, [r7, #13]
    uint8_t un_valor1 = valor1 - (ent_valor1 * 10);
 8002fe6:	89fb      	ldrh	r3, [r7, #14]
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	7b7b      	ldrb	r3, [r7, #13]
 8002fec:	4619      	mov	r1, r3
 8002fee:	0149      	lsls	r1, r1, #5
 8002ff0:	1ac9      	subs	r1, r1, r3
 8002ff2:	0089      	lsls	r1, r1, #2
 8002ff4:	1acb      	subs	r3, r1, r3
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	733b      	strb	r3, [r7, #12]
    lcd_clear();
 8002ffe:	f7fe fa61 	bl	80014c4 <lcd_clear>
    lcd_put_cur(0, 0);
 8003002:	2100      	movs	r1, #0
 8003004:	2000      	movs	r0, #0
 8003006:	f7fe fa74 	bl	80014f2 <lcd_put_cur>
    if(paso == 0){
 800300a:	4b34      	ldr	r3, [pc, #208]	; (80030dc <Lcd_Menu+0x50c>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d103      	bne.n	800301a <Lcd_Menu+0x44a>
    	lcd_write(2);
 8003012:	2002      	movs	r0, #2
 8003014:	f7fe fb0e 	bl	8001634 <lcd_write>
 8003018:	e00a      	b.n	8003030 <Lcd_Menu+0x460>
    }else if(paso == 16){
 800301a:	4b30      	ldr	r3, [pc, #192]	; (80030dc <Lcd_Menu+0x50c>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b10      	cmp	r3, #16
 8003020:	d103      	bne.n	800302a <Lcd_Menu+0x45a>
    	lcd_write(3);
 8003022:	2003      	movs	r0, #3
 8003024:	f7fe fb06 	bl	8001634 <lcd_write>
 8003028:	e002      	b.n	8003030 <Lcd_Menu+0x460>
    }else{lcd_write(1);}
 800302a:	2001      	movs	r0, #1
 800302c:	f7fe fb02 	bl	8001634 <lcd_write>
    lcd_put_cur(0, 1);
 8003030:	2101      	movs	r1, #1
 8003032:	2000      	movs	r0, #0
 8003034:	f7fe fa5d 	bl	80014f2 <lcd_put_cur>
    lcd_send_string("POTENCIA: ");
 8003038:	4829      	ldr	r0, [pc, #164]	; (80030e0 <Lcd_Menu+0x510>)
 800303a:	f7fe fab6 	bl	80015aa <lcd_send_string>
    sprintf(buffer,"%d",ent_valor1);
 800303e:	7b7b      	ldrb	r3, [r7, #13]
 8003040:	461a      	mov	r2, r3
 8003042:	4928      	ldr	r1, [pc, #160]	; (80030e4 <Lcd_Menu+0x514>)
 8003044:	4828      	ldr	r0, [pc, #160]	; (80030e8 <Lcd_Menu+0x518>)
 8003046:	f008 faa7 	bl	800b598 <siprintf>
    lcd_send_string(buffer);//lcd.print(ent_valor1);
 800304a:	4827      	ldr	r0, [pc, #156]	; (80030e8 <Lcd_Menu+0x518>)
 800304c:	f7fe faad 	bl	80015aa <lcd_send_string>
    lcd_send_string(".");
 8003050:	4826      	ldr	r0, [pc, #152]	; (80030ec <Lcd_Menu+0x51c>)
 8003052:	f7fe faaa 	bl	80015aa <lcd_send_string>
    sprintf(buffer,"%d",un_valor1);
 8003056:	7b3b      	ldrb	r3, [r7, #12]
 8003058:	461a      	mov	r2, r3
 800305a:	4922      	ldr	r1, [pc, #136]	; (80030e4 <Lcd_Menu+0x514>)
 800305c:	4822      	ldr	r0, [pc, #136]	; (80030e8 <Lcd_Menu+0x518>)
 800305e:	f008 fa9b 	bl	800b598 <siprintf>
    lcd_send_string(buffer);//lcd.print(un_valor1);
 8003062:	4821      	ldr	r0, [pc, #132]	; (80030e8 <Lcd_Menu+0x518>)
 8003064:	f7fe faa1 	bl	80015aa <lcd_send_string>
  }

  if(pag_menu != 254){
 8003068:	4b09      	ldr	r3, [pc, #36]	; (8003090 <Lcd_Menu+0x4c0>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2bfe      	cmp	r3, #254	; 0xfe
 800306e:	d003      	beq.n	8003078 <Lcd_Menu+0x4a8>
    g_menu = pag_menu;
 8003070:	4b07      	ldr	r3, [pc, #28]	; (8003090 <Lcd_Menu+0x4c0>)
 8003072:	781a      	ldrb	r2, [r3, #0]
 8003074:	4b1e      	ldr	r3, [pc, #120]	; (80030f0 <Lcd_Menu+0x520>)
 8003076:	701a      	strb	r2, [r3, #0]
  }
  pag_menu = 254;
 8003078:	4b05      	ldr	r3, [pc, #20]	; (8003090 <Lcd_Menu+0x4c0>)
 800307a:	22fe      	movs	r2, #254	; 0xfe
 800307c:	701a      	strb	r2, [r3, #0]
}
 800307e:	bf00      	nop
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	9999999a 	.word	0x9999999a
 800308c:	3fb99999 	.word	0x3fb99999
 8003090:	2000011e 	.word	0x2000011e
 8003094:	20000040 	.word	0x20000040
 8003098:	20000042 	.word	0x20000042
 800309c:	2000011c 	.word	0x2000011c
 80030a0:	20000126 	.word	0x20000126
 80030a4:	20000125 	.word	0x20000125
 80030a8:	20000047 	.word	0x20000047
 80030ac:	20000044 	.word	0x20000044
 80030b0:	20000123 	.word	0x20000123
 80030b4:	20000124 	.word	0x20000124
 80030b8:	20000045 	.word	0x20000045
 80030bc:	20000048 	.word	0x20000048
 80030c0:	200007c0 	.word	0x200007c0
 80030c4:	200006c0 	.word	0x200006c0
 80030c8:	40010c00 	.word	0x40010c00
 80030cc:	20000113 	.word	0x20000113
 80030d0:	20000112 	.word	0x20000112
 80030d4:	20000028 	.word	0x20000028
 80030d8:	200001ac 	.word	0x200001ac
 80030dc:	20000041 	.word	0x20000041
 80030e0:	0800ccf8 	.word	0x0800ccf8
 80030e4:	0800cbe0 	.word	0x0800cbe0
 80030e8:	2000071c 	.word	0x2000071c
 80030ec:	0800cbe4 	.word	0x0800cbe4
 80030f0:	2000011f 	.word	0x2000011f

080030f4 <Ajuste>:

void Ajuste(void){
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  Lcd_Menu();
 80030f8:	f7ff fd6a 	bl	8002bd0 <Lcd_Menu>
  Lcd_Cursor();
 80030fc:	f7fe fd0c 	bl	8001b18 <Lcd_Cursor>
}
 8003100:	bf00      	nop
 8003102:	bd80      	pop	{r7, pc}

08003104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003108:	f000 fd7c 	bl	8003c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800310c:	f000 f8d0 	bl	80032b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003110:	f000 fa18 	bl	8003544 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003114:	f000 f912 	bl	800333c <MX_I2C1_Init>
  MX_SPI1_Init();
 8003118:	f000 f93e 	bl	8003398 <MX_SPI1_Init>
  MX_FATFS_Init();
 800311c:	f004 fc8a 	bl	8007a34 <MX_FATFS_Init>
  MX_DMA_Init();
 8003120:	f000 f9ea 	bl	80034f8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8003124:	f000 f9be 	bl	80034a4 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8003128:	f000 f96c 	bl	8003404 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /*------------------------- INICIO DE LA PROGRAMACION -------------------------*/

  pcf1_send(0xFF);
 800312c:	20ff      	movs	r0, #255	; 0xff
 800312e:	f7fe fbfd 	bl	800192c <pcf1_send>
  pcf2_send(0xFF);
 8003132:	20ff      	movs	r0, #255	; 0xff
 8003134:	f7fe fc10 	bl	8001958 <pcf2_send>


  lcd_init();
 8003138:	f7fe f9fa 	bl	8001530 <lcd_init>
  HAL_Delay (1000);
 800313c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003140:	f000 fdc2 	bl	8003cc8 <HAL_Delay>
  lcd_create_character(0, customChar);
 8003144:	4949      	ldr	r1, [pc, #292]	; (800326c <main+0x168>)
 8003146:	2000      	movs	r0, #0
 8003148:	f7fe fa44 	bl	80015d4 <lcd_create_character>
  lcd_create_character(1, ambos);
 800314c:	4948      	ldr	r1, [pc, #288]	; (8003270 <main+0x16c>)
 800314e:	2001      	movs	r0, #1
 8003150:	f7fe fa40 	bl	80015d4 <lcd_create_character>
  lcd_create_character(2, arriba);
 8003154:	4947      	ldr	r1, [pc, #284]	; (8003274 <main+0x170>)
 8003156:	2002      	movs	r0, #2
 8003158:	f7fe fa3c 	bl	80015d4 <lcd_create_character>
  lcd_create_character(3, abajo);
 800315c:	4946      	ldr	r1, [pc, #280]	; (8003278 <main+0x174>)
 800315e:	2003      	movs	r0, #3
 8003160:	f7fe fa38 	bl	80015d4 <lcd_create_character>
  lcd_put_cur(0, 0);
 8003164:	2100      	movs	r1, #0
 8003166:	2000      	movs	r0, #0
 8003168:	f7fe f9c3 	bl	80014f2 <lcd_put_cur>
  lcd_send_string("Iniciando SD ...");
 800316c:	4843      	ldr	r0, [pc, #268]	; (800327c <main+0x178>)
 800316e:	f7fe fa1c 	bl	80015aa <lcd_send_string>
  HAL_Delay(1000);
 8003172:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003176:	f000 fda7 	bl	8003cc8 <HAL_Delay>
  lcd_clear();
 800317a:	f7fe f9a3 	bl	80014c4 <lcd_clear>
  fresult = f_mount(&fs, "/", 1);
 800317e:	2201      	movs	r2, #1
 8003180:	493f      	ldr	r1, [pc, #252]	; (8003280 <main+0x17c>)
 8003182:	4840      	ldr	r0, [pc, #256]	; (8003284 <main+0x180>)
 8003184:	f007 f802 	bl	800a18c <f_mount>
 8003188:	4603      	mov	r3, r0
 800318a:	461a      	mov	r2, r3
 800318c:	4b3e      	ldr	r3, [pc, #248]	; (8003288 <main+0x184>)
 800318e:	701a      	strb	r2, [r3, #0]
  while(fresult != FR_OK) {
 8003190:	e017      	b.n	80031c2 <main+0xbe>
	  f_mount(NULL, "/", 1);
 8003192:	2201      	movs	r2, #1
 8003194:	493a      	ldr	r1, [pc, #232]	; (8003280 <main+0x17c>)
 8003196:	2000      	movs	r0, #0
 8003198:	f006 fff8 	bl	800a18c <f_mount>
	  HAL_Delay(50);
 800319c:	2032      	movs	r0, #50	; 0x32
 800319e:	f000 fd93 	bl	8003cc8 <HAL_Delay>
	  fresult = f_mount(&fs, "/", 1);
 80031a2:	2201      	movs	r2, #1
 80031a4:	4936      	ldr	r1, [pc, #216]	; (8003280 <main+0x17c>)
 80031a6:	4837      	ldr	r0, [pc, #220]	; (8003284 <main+0x180>)
 80031a8:	f006 fff0 	bl	800a18c <f_mount>
 80031ac:	4603      	mov	r3, r0
 80031ae:	461a      	mov	r2, r3
 80031b0:	4b35      	ldr	r3, [pc, #212]	; (8003288 <main+0x184>)
 80031b2:	701a      	strb	r2, [r3, #0]
	  lcd_put_cur(0, 0);
 80031b4:	2100      	movs	r1, #0
 80031b6:	2000      	movs	r0, #0
 80031b8:	f7fe f99b 	bl	80014f2 <lcd_put_cur>
	  lcd_send_string("Inserte SD");
 80031bc:	4833      	ldr	r0, [pc, #204]	; (800328c <main+0x188>)
 80031be:	f7fe f9f4 	bl	80015aa <lcd_send_string>
  while(fresult != FR_OK) {
 80031c2:	4b31      	ldr	r3, [pc, #196]	; (8003288 <main+0x184>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1e3      	bne.n	8003192 <main+0x8e>
  }
  lcd_put_cur(0, 0);
 80031ca:	2100      	movs	r1, #0
 80031cc:	2000      	movs	r0, #0
 80031ce:	f7fe f990 	bl	80014f2 <lcd_put_cur>
  lcd_send_string("SD iniciado");
 80031d2:	482f      	ldr	r0, [pc, #188]	; (8003290 <main+0x18c>)
 80031d4:	f7fe f9e9 	bl	80015aa <lcd_send_string>
  HAL_Delay(1000);
 80031d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031dc:	f000 fd74 	bl	8003cc8 <HAL_Delay>
  lcd_clear();
 80031e0:	f7fe f970 	bl	80014c4 <lcd_clear>
  fresult = f_open(&fil, "DATOS.csv", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 80031e4:	2203      	movs	r2, #3
 80031e6:	492b      	ldr	r1, [pc, #172]	; (8003294 <main+0x190>)
 80031e8:	482b      	ldr	r0, [pc, #172]	; (8003298 <main+0x194>)
 80031ea:	f007 f817 	bl	800a21c <f_open>
 80031ee:	4603      	mov	r3, r0
 80031f0:	461a      	mov	r2, r3
 80031f2:	4b25      	ldr	r3, [pc, #148]	; (8003288 <main+0x184>)
 80031f4:	701a      	strb	r2, [r3, #0]
  f_close(&fil);
 80031f6:	4828      	ldr	r0, [pc, #160]	; (8003298 <main+0x194>)
 80031f8:	f007 fcd2 	bl	800aba0 <f_close>
  if(fresult != FR_OK){
 80031fc:	4b22      	ldr	r3, [pc, #136]	; (8003288 <main+0x184>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d01b      	beq.n	800323c <main+0x138>
	  fresult = f_open(&fil, "DATOS.csv", FA_OPEN_ALWAYS | FA_WRITE);
 8003204:	2212      	movs	r2, #18
 8003206:	4923      	ldr	r1, [pc, #140]	; (8003294 <main+0x190>)
 8003208:	4823      	ldr	r0, [pc, #140]	; (8003298 <main+0x194>)
 800320a:	f007 f807 	bl	800a21c <f_open>
 800320e:	4603      	mov	r3, r0
 8003210:	461a      	mov	r2, r3
 8003212:	4b1d      	ldr	r3, [pc, #116]	; (8003288 <main+0x184>)
 8003214:	701a      	strb	r2, [r3, #0]
	  /* Writing text */
	  fresult = f_puts("FECHA,HORA,TENSION A,TENSION B,TENSION C,CORRIENTE A,CORRIENTE B,CORRIENTE C,POTENCIA A,POTENCIA B,POTENCIA C", &fil);
 8003216:	4920      	ldr	r1, [pc, #128]	; (8003298 <main+0x194>)
 8003218:	4820      	ldr	r0, [pc, #128]	; (800329c <main+0x198>)
 800321a:	f007 ffb1 	bl	800b180 <f_puts>
 800321e:	4603      	mov	r3, r0
 8003220:	b2da      	uxtb	r2, r3
 8003222:	4b19      	ldr	r3, [pc, #100]	; (8003288 <main+0x184>)
 8003224:	701a      	strb	r2, [r3, #0]
	  f_puts("\n", &fil);
 8003226:	491c      	ldr	r1, [pc, #112]	; (8003298 <main+0x194>)
 8003228:	481d      	ldr	r0, [pc, #116]	; (80032a0 <main+0x19c>)
 800322a:	f007 ffa9 	bl	800b180 <f_puts>
	  /* Close file */
	  fresult = f_close(&fil);
 800322e:	481a      	ldr	r0, [pc, #104]	; (8003298 <main+0x194>)
 8003230:	f007 fcb6 	bl	800aba0 <f_close>
 8003234:	4603      	mov	r3, r0
 8003236:	461a      	mov	r2, r3
 8003238:	4b13      	ldr	r3, [pc, #76]	; (8003288 <main+0x184>)
 800323a:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Pulsadores();
 800323c:	f7fe fba2 	bl	8001984 <Pulsadores>
	  Get_Time();
 8003240:	f7fe faf6 	bl	8001830 <Get_Time>
	  if(menu_conf == 1){
 8003244:	4b17      	ldr	r3, [pc, #92]	; (80032a4 <main+0x1a0>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <main+0x14c>
		  Ajuste();
 800324c:	f7ff ff52 	bl	80030f4 <Ajuste>
	  }
	  if(menu_auto == 1){
 8003250:	4b15      	ldr	r3, [pc, #84]	; (80032a8 <main+0x1a4>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <main+0x158>
	      Automatico();
 8003258:	f7ff faae 	bl	80027b8 <Automatico>
	  }
	  if(menu_manu == 1){
 800325c:	4b13      	ldr	r3, [pc, #76]	; (80032ac <main+0x1a8>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d1eb      	bne.n	800323c <main+0x138>
	      Manual();
 8003264:	f7ff fc8c 	bl	8002b80 <Manual>
	  Pulsadores();
 8003268:	e7e8      	b.n	800323c <main+0x138>
 800326a:	bf00      	nop
 800326c:	2000004c 	.word	0x2000004c
 8003270:	20000054 	.word	0x20000054
 8003274:	2000005c 	.word	0x2000005c
 8003278:	20000064 	.word	0x20000064
 800327c:	0800cd04 	.word	0x0800cd04
 8003280:	0800cd18 	.word	0x0800cd18
 8003284:	20000210 	.word	0x20000210
 8003288:	200007dc 	.word	0x200007dc
 800328c:	0800cd1c 	.word	0x0800cd1c
 8003290:	0800cd28 	.word	0x0800cd28
 8003294:	0800cbf0 	.word	0x0800cbf0
 8003298:	20000860 	.word	0x20000860
 800329c:	0800cd34 	.word	0x0800cd34
 80032a0:	0800cc20 	.word	0x0800cc20
 80032a4:	20000040 	.word	0x20000040
 80032a8:	2000011c 	.word	0x2000011c
 80032ac:	2000011d 	.word	0x2000011d

080032b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b090      	sub	sp, #64	; 0x40
 80032b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032b6:	f107 0318 	add.w	r3, r7, #24
 80032ba:	2228      	movs	r2, #40	; 0x28
 80032bc:	2100      	movs	r1, #0
 80032be:	4618      	mov	r0, r3
 80032c0:	f008 f8ac 	bl	800b41c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032c4:	1d3b      	adds	r3, r7, #4
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	605a      	str	r2, [r3, #4]
 80032cc:	609a      	str	r2, [r3, #8]
 80032ce:	60da      	str	r2, [r3, #12]
 80032d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80032d2:	2301      	movs	r3, #1
 80032d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80032d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80032dc:	2300      	movs	r3, #0
 80032de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032e0:	2301      	movs	r3, #1
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032e4:	2302      	movs	r3, #2
 80032e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80032e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 80032ee:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80032f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032f4:	f107 0318 	add.w	r3, r7, #24
 80032f8:	4618      	mov	r0, r3
 80032fa:	f002 fb15 	bl	8005928 <HAL_RCC_OscConfig>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003304:	f000 fa16 	bl	8003734 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003308:	230f      	movs	r3, #15
 800330a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800330c:	2302      	movs	r3, #2
 800330e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8003314:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003318:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800331e:	1d3b      	adds	r3, r7, #4
 8003320:	2101      	movs	r1, #1
 8003322:	4618      	mov	r0, r3
 8003324:	f002 fd80 	bl	8005e28 <HAL_RCC_ClockConfig>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800332e:	f000 fa01 	bl	8003734 <Error_Handler>
  }
}
 8003332:	bf00      	nop
 8003334:	3740      	adds	r7, #64	; 0x40
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
	...

0800333c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003340:	4b12      	ldr	r3, [pc, #72]	; (800338c <MX_I2C1_Init+0x50>)
 8003342:	4a13      	ldr	r2, [pc, #76]	; (8003390 <MX_I2C1_Init+0x54>)
 8003344:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003346:	4b11      	ldr	r3, [pc, #68]	; (800338c <MX_I2C1_Init+0x50>)
 8003348:	4a12      	ldr	r2, [pc, #72]	; (8003394 <MX_I2C1_Init+0x58>)
 800334a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800334c:	4b0f      	ldr	r3, [pc, #60]	; (800338c <MX_I2C1_Init+0x50>)
 800334e:	2200      	movs	r2, #0
 8003350:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003352:	4b0e      	ldr	r3, [pc, #56]	; (800338c <MX_I2C1_Init+0x50>)
 8003354:	2200      	movs	r2, #0
 8003356:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003358:	4b0c      	ldr	r3, [pc, #48]	; (800338c <MX_I2C1_Init+0x50>)
 800335a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800335e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003360:	4b0a      	ldr	r3, [pc, #40]	; (800338c <MX_I2C1_Init+0x50>)
 8003362:	2200      	movs	r2, #0
 8003364:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003366:	4b09      	ldr	r3, [pc, #36]	; (800338c <MX_I2C1_Init+0x50>)
 8003368:	2200      	movs	r2, #0
 800336a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800336c:	4b07      	ldr	r3, [pc, #28]	; (800338c <MX_I2C1_Init+0x50>)
 800336e:	2200      	movs	r2, #0
 8003370:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003372:	4b06      	ldr	r3, [pc, #24]	; (800338c <MX_I2C1_Init+0x50>)
 8003374:	2200      	movs	r2, #0
 8003376:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003378:	4804      	ldr	r0, [pc, #16]	; (800338c <MX_I2C1_Init+0x50>)
 800337a:	f001 fae5 	bl	8004948 <HAL_I2C_Init>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003384:	f000 f9d6 	bl	8003734 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003388:	bf00      	nop
 800338a:	bd80      	pop	{r7, pc}
 800338c:	20000658 	.word	0x20000658
 8003390:	40005400 	.word	0x40005400
 8003394:	000186a0 	.word	0x000186a0

08003398 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800339c:	4b17      	ldr	r3, [pc, #92]	; (80033fc <MX_SPI1_Init+0x64>)
 800339e:	4a18      	ldr	r2, [pc, #96]	; (8003400 <MX_SPI1_Init+0x68>)
 80033a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80033a2:	4b16      	ldr	r3, [pc, #88]	; (80033fc <MX_SPI1_Init+0x64>)
 80033a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80033a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80033aa:	4b14      	ldr	r3, [pc, #80]	; (80033fc <MX_SPI1_Init+0x64>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80033b0:	4b12      	ldr	r3, [pc, #72]	; (80033fc <MX_SPI1_Init+0x64>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033b6:	4b11      	ldr	r3, [pc, #68]	; (80033fc <MX_SPI1_Init+0x64>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033bc:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <MX_SPI1_Init+0x64>)
 80033be:	2200      	movs	r2, #0
 80033c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80033c2:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <MX_SPI1_Init+0x64>)
 80033c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80033ca:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <MX_SPI1_Init+0x64>)
 80033cc:	2208      	movs	r2, #8
 80033ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033d0:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <MX_SPI1_Init+0x64>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80033d6:	4b09      	ldr	r3, [pc, #36]	; (80033fc <MX_SPI1_Init+0x64>)
 80033d8:	2200      	movs	r2, #0
 80033da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033dc:	4b07      	ldr	r3, [pc, #28]	; (80033fc <MX_SPI1_Init+0x64>)
 80033de:	2200      	movs	r2, #0
 80033e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80033e2:	4b06      	ldr	r3, [pc, #24]	; (80033fc <MX_SPI1_Init+0x64>)
 80033e4:	220a      	movs	r2, #10
 80033e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80033e8:	4804      	ldr	r0, [pc, #16]	; (80033fc <MX_SPI1_Init+0x64>)
 80033ea:	f002 feb7 	bl	800615c <HAL_SPI_Init>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80033f4:	f000 f99e 	bl	8003734 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80033f8:	bf00      	nop
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	200007e0 	.word	0x200007e0
 8003400:	40013000 	.word	0x40013000

08003404 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800340a:	f107 0308 	add.w	r3, r7, #8
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	605a      	str	r2, [r3, #4]
 8003414:	609a      	str	r2, [r3, #8]
 8003416:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003418:	463b      	mov	r3, r7
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003420:	4b1e      	ldr	r3, [pc, #120]	; (800349c <MX_TIM1_Init+0x98>)
 8003422:	4a1f      	ldr	r2, [pc, #124]	; (80034a0 <MX_TIM1_Init+0x9c>)
 8003424:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8003426:	4b1d      	ldr	r3, [pc, #116]	; (800349c <MX_TIM1_Init+0x98>)
 8003428:	2200      	movs	r2, #0
 800342a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800342c:	4b1b      	ldr	r3, [pc, #108]	; (800349c <MX_TIM1_Init+0x98>)
 800342e:	2200      	movs	r2, #0
 8003430:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8003432:	4b1a      	ldr	r3, [pc, #104]	; (800349c <MX_TIM1_Init+0x98>)
 8003434:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003438:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800343a:	4b18      	ldr	r3, [pc, #96]	; (800349c <MX_TIM1_Init+0x98>)
 800343c:	2200      	movs	r2, #0
 800343e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003440:	4b16      	ldr	r3, [pc, #88]	; (800349c <MX_TIM1_Init+0x98>)
 8003442:	2200      	movs	r2, #0
 8003444:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003446:	4b15      	ldr	r3, [pc, #84]	; (800349c <MX_TIM1_Init+0x98>)
 8003448:	2200      	movs	r2, #0
 800344a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800344c:	4813      	ldr	r0, [pc, #76]	; (800349c <MX_TIM1_Init+0x98>)
 800344e:	f003 fa8d 	bl	800696c <HAL_TIM_Base_Init>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003458:	f000 f96c 	bl	8003734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800345c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003460:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003462:	f107 0308 	add.w	r3, r7, #8
 8003466:	4619      	mov	r1, r3
 8003468:	480c      	ldr	r0, [pc, #48]	; (800349c <MX_TIM1_Init+0x98>)
 800346a:	f003 face 	bl	8006a0a <HAL_TIM_ConfigClockSource>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003474:	f000 f95e 	bl	8003734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003478:	2300      	movs	r3, #0
 800347a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800347c:	2300      	movs	r3, #0
 800347e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003480:	463b      	mov	r3, r7
 8003482:	4619      	mov	r1, r3
 8003484:	4805      	ldr	r0, [pc, #20]	; (800349c <MX_TIM1_Init+0x98>)
 8003486:	f003 fc7d 	bl	8006d84 <HAL_TIMEx_MasterConfigSynchronization>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003490:	f000 f950 	bl	8003734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003494:	bf00      	nop
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	20000778 	.word	0x20000778
 80034a0:	40012c00 	.word	0x40012c00

080034a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80034a8:	4b11      	ldr	r3, [pc, #68]	; (80034f0 <MX_USART3_UART_Init+0x4c>)
 80034aa:	4a12      	ldr	r2, [pc, #72]	; (80034f4 <MX_USART3_UART_Init+0x50>)
 80034ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80034ae:	4b10      	ldr	r3, [pc, #64]	; (80034f0 <MX_USART3_UART_Init+0x4c>)
 80034b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80034b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80034b6:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <MX_USART3_UART_Init+0x4c>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80034bc:	4b0c      	ldr	r3, [pc, #48]	; (80034f0 <MX_USART3_UART_Init+0x4c>)
 80034be:	2200      	movs	r2, #0
 80034c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80034c2:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <MX_USART3_UART_Init+0x4c>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80034c8:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <MX_USART3_UART_Init+0x4c>)
 80034ca:	220c      	movs	r2, #12
 80034cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034ce:	4b08      	ldr	r3, [pc, #32]	; (80034f0 <MX_USART3_UART_Init+0x4c>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80034d4:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <MX_USART3_UART_Init+0x4c>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80034da:	4805      	ldr	r0, [pc, #20]	; (80034f0 <MX_USART3_UART_Init+0x4c>)
 80034dc:	f003 fcb0 	bl	8006e40 <HAL_UART_Init>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80034e6:	f000 f925 	bl	8003734 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80034ea:	bf00      	nop
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	200001ac 	.word	0x200001ac
 80034f4:	40004800 	.word	0x40004800

080034f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034fe:	4b10      	ldr	r3, [pc, #64]	; (8003540 <MX_DMA_Init+0x48>)
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	4a0f      	ldr	r2, [pc, #60]	; (8003540 <MX_DMA_Init+0x48>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	6153      	str	r3, [r2, #20]
 800350a:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <MX_DMA_Init+0x48>)
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	607b      	str	r3, [r7, #4]
 8003514:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003516:	2200      	movs	r2, #0
 8003518:	2100      	movs	r1, #0
 800351a:	200c      	movs	r0, #12
 800351c:	f000 fccf 	bl	8003ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003520:	200c      	movs	r0, #12
 8003522:	f000 fce8 	bl	8003ef6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003526:	2200      	movs	r2, #0
 8003528:	2100      	movs	r1, #0
 800352a:	200d      	movs	r0, #13
 800352c:	f000 fcc7 	bl	8003ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003530:	200d      	movs	r0, #13
 8003532:	f000 fce0 	bl	8003ef6 <HAL_NVIC_EnableIRQ>

}
 8003536:	bf00      	nop
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40021000 	.word	0x40021000

08003544 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b088      	sub	sp, #32
 8003548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800354a:	f107 0310 	add.w	r3, r7, #16
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	605a      	str	r2, [r3, #4]
 8003554:	609a      	str	r2, [r3, #8]
 8003556:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003558:	4b2b      	ldr	r3, [pc, #172]	; (8003608 <MX_GPIO_Init+0xc4>)
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	4a2a      	ldr	r2, [pc, #168]	; (8003608 <MX_GPIO_Init+0xc4>)
 800355e:	f043 0320 	orr.w	r3, r3, #32
 8003562:	6193      	str	r3, [r2, #24]
 8003564:	4b28      	ldr	r3, [pc, #160]	; (8003608 <MX_GPIO_Init+0xc4>)
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	f003 0320 	and.w	r3, r3, #32
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003570:	4b25      	ldr	r3, [pc, #148]	; (8003608 <MX_GPIO_Init+0xc4>)
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	4a24      	ldr	r2, [pc, #144]	; (8003608 <MX_GPIO_Init+0xc4>)
 8003576:	f043 0304 	orr.w	r3, r3, #4
 800357a:	6193      	str	r3, [r2, #24]
 800357c:	4b22      	ldr	r3, [pc, #136]	; (8003608 <MX_GPIO_Init+0xc4>)
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	60bb      	str	r3, [r7, #8]
 8003586:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003588:	4b1f      	ldr	r3, [pc, #124]	; (8003608 <MX_GPIO_Init+0xc4>)
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	4a1e      	ldr	r2, [pc, #120]	; (8003608 <MX_GPIO_Init+0xc4>)
 800358e:	f043 0308 	orr.w	r3, r3, #8
 8003592:	6193      	str	r3, [r2, #24]
 8003594:	4b1c      	ldr	r3, [pc, #112]	; (8003608 <MX_GPIO_Init+0xc4>)
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	607b      	str	r3, [r7, #4]
 800359e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|modbus_Pin, GPIO_PIN_RESET);
 80035a0:	2200      	movs	r2, #0
 80035a2:	f240 2101 	movw	r1, #513	; 0x201
 80035a6:	4819      	ldr	r0, [pc, #100]	; (800360c <MX_GPIO_Init+0xc8>)
 80035a8:	f001 f9b5 	bl	8004916 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 modbus_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|modbus_Pin;
 80035ac:	f240 2301 	movw	r3, #513	; 0x201
 80035b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035b2:	2301      	movs	r3, #1
 80035b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ba:	2302      	movs	r3, #2
 80035bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035be:	f107 0310 	add.w	r3, r7, #16
 80035c2:	4619      	mov	r1, r3
 80035c4:	4811      	ldr	r0, [pc, #68]	; (800360c <MX_GPIO_Init+0xc8>)
 80035c6:	f000 ff4f 	bl	8004468 <HAL_GPIO_Init>

  /*Configure GPIO pins : entrada4_Pin entrada2_Pin entrada1_Pin */
  GPIO_InitStruct.Pin = entrada4_Pin|entrada2_Pin|entrada1_Pin;
 80035ca:	f248 0318 	movw	r3, #32792	; 0x8018
 80035ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d4:	2300      	movs	r3, #0
 80035d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035d8:	f107 0310 	add.w	r3, r7, #16
 80035dc:	4619      	mov	r1, r3
 80035de:	480b      	ldr	r0, [pc, #44]	; (800360c <MX_GPIO_Init+0xc8>)
 80035e0:	f000 ff42 	bl	8004468 <HAL_GPIO_Init>

  /*Configure GPIO pin : entrada3_Pin */
  GPIO_InitStruct.Pin = entrada3_Pin;
 80035e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(entrada3_GPIO_Port, &GPIO_InitStruct);
 80035f2:	f107 0310 	add.w	r3, r7, #16
 80035f6:	4619      	mov	r1, r3
 80035f8:	4805      	ldr	r0, [pc, #20]	; (8003610 <MX_GPIO_Init+0xcc>)
 80035fa:	f000 ff35 	bl	8004468 <HAL_GPIO_Init>

}
 80035fe:	bf00      	nop
 8003600:	3720      	adds	r7, #32
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40021000 	.word	0x40021000
 800360c:	40010c00 	.word	0x40010c00
 8003610:	40010800 	.word	0x40010800

08003614 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(modbus_GPIO_Port, modbus_Pin, 0);
 800361c:	2200      	movs	r2, #0
 800361e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003622:	4812      	ldr	r0, [pc, #72]	; (800366c <HAL_UART_TxCpltCallback+0x58>)
 8003624:	f001 f977 	bl	8004916 <HAL_GPIO_WritePin>
	if(h_envio == 1){
 8003628:	4b11      	ldr	r3, [pc, #68]	; (8003670 <HAL_UART_TxCpltCallback+0x5c>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d105      	bne.n	800363c <HAL_UART_TxCpltCallback+0x28>
			HAL_UART_Receive_DMA(&huart3, M_Tension, 17);
 8003630:	2211      	movs	r2, #17
 8003632:	4910      	ldr	r1, [pc, #64]	; (8003674 <HAL_UART_TxCpltCallback+0x60>)
 8003634:	4810      	ldr	r0, [pc, #64]	; (8003678 <HAL_UART_TxCpltCallback+0x64>)
 8003636:	f003 fcbd 	bl	8006fb4 <HAL_UART_Receive_DMA>
	}else if(h_envio == 2){
			HAL_UART_Receive_DMA(&huart3, M_Corriente, 17);
	}else if(h_envio == 3){
			HAL_UART_Receive_DMA(&huart3, M_Potencia, 17);
	}
}
 800363a:	e012      	b.n	8003662 <HAL_UART_TxCpltCallback+0x4e>
	}else if(h_envio == 2){
 800363c:	4b0c      	ldr	r3, [pc, #48]	; (8003670 <HAL_UART_TxCpltCallback+0x5c>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b02      	cmp	r3, #2
 8003642:	d105      	bne.n	8003650 <HAL_UART_TxCpltCallback+0x3c>
			HAL_UART_Receive_DMA(&huart3, M_Corriente, 17);
 8003644:	2211      	movs	r2, #17
 8003646:	490d      	ldr	r1, [pc, #52]	; (800367c <HAL_UART_TxCpltCallback+0x68>)
 8003648:	480b      	ldr	r0, [pc, #44]	; (8003678 <HAL_UART_TxCpltCallback+0x64>)
 800364a:	f003 fcb3 	bl	8006fb4 <HAL_UART_Receive_DMA>
}
 800364e:	e008      	b.n	8003662 <HAL_UART_TxCpltCallback+0x4e>
	}else if(h_envio == 3){
 8003650:	4b07      	ldr	r3, [pc, #28]	; (8003670 <HAL_UART_TxCpltCallback+0x5c>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b03      	cmp	r3, #3
 8003656:	d104      	bne.n	8003662 <HAL_UART_TxCpltCallback+0x4e>
			HAL_UART_Receive_DMA(&huart3, M_Potencia, 17);
 8003658:	2211      	movs	r2, #17
 800365a:	4909      	ldr	r1, [pc, #36]	; (8003680 <HAL_UART_TxCpltCallback+0x6c>)
 800365c:	4806      	ldr	r0, [pc, #24]	; (8003678 <HAL_UART_TxCpltCallback+0x64>)
 800365e:	f003 fca9 	bl	8006fb4 <HAL_UART_Receive_DMA>
}
 8003662:	bf00      	nop
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40010c00 	.word	0x40010c00
 8003670:	20000113 	.word	0x20000113
 8003674:	2000083c 	.word	0x2000083c
 8003678:	200001ac 	.word	0x200001ac
 800367c:	20000758 	.word	0x20000758
 8003680:	200006ac 	.word	0x200006ac

08003684 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(modbus_GPIO_Port, modbus_Pin, 1);
 800368c:	2201      	movs	r2, #1
 800368e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003692:	4821      	ldr	r0, [pc, #132]	; (8003718 <HAL_UART_RxCpltCallback+0x94>)
 8003694:	f001 f93f 	bl	8004916 <HAL_GPIO_WritePin>
	if(h_envio == 1){
 8003698:	4b20      	ldr	r3, [pc, #128]	; (800371c <HAL_UART_RxCpltCallback+0x98>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d10f      	bne.n	80036c0 <HAL_UART_RxCpltCallback+0x3c>
		h_envio = 2;
 80036a0:	4b1e      	ldr	r3, [pc, #120]	; (800371c <HAL_UART_RxCpltCallback+0x98>)
 80036a2:	2202      	movs	r2, #2
 80036a4:	701a      	strb	r2, [r3, #0]
		h_calculo |= 0x01;
 80036a6:	4b1e      	ldr	r3, [pc, #120]	; (8003720 <HAL_UART_RxCpltCallback+0x9c>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	4b1b      	ldr	r3, [pc, #108]	; (8003720 <HAL_UART_RxCpltCallback+0x9c>)
 80036b2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart3, mensaje2, 8);
 80036b4:	2208      	movs	r2, #8
 80036b6:	491b      	ldr	r1, [pc, #108]	; (8003724 <HAL_UART_RxCpltCallback+0xa0>)
 80036b8:	481b      	ldr	r0, [pc, #108]	; (8003728 <HAL_UART_RxCpltCallback+0xa4>)
 80036ba:	f003 fc0f 	bl	8006edc <HAL_UART_Transmit_DMA>
	}else if(h_envio == 3){
		h_envio = 1;
		h_calculo |= 0x04;
		HAL_UART_Transmit_DMA(&huart3, mensaje1, 8);
	}
}
 80036be:	e026      	b.n	800370e <HAL_UART_RxCpltCallback+0x8a>
	}else if(h_envio == 2){
 80036c0:	4b16      	ldr	r3, [pc, #88]	; (800371c <HAL_UART_RxCpltCallback+0x98>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d10f      	bne.n	80036e8 <HAL_UART_RxCpltCallback+0x64>
		h_envio = 3;
 80036c8:	4b14      	ldr	r3, [pc, #80]	; (800371c <HAL_UART_RxCpltCallback+0x98>)
 80036ca:	2203      	movs	r2, #3
 80036cc:	701a      	strb	r2, [r3, #0]
		h_calculo |= 0x02;
 80036ce:	4b14      	ldr	r3, [pc, #80]	; (8003720 <HAL_UART_RxCpltCallback+0x9c>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	f043 0302 	orr.w	r3, r3, #2
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	4b11      	ldr	r3, [pc, #68]	; (8003720 <HAL_UART_RxCpltCallback+0x9c>)
 80036da:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart3, mensaje3, 8);
 80036dc:	2208      	movs	r2, #8
 80036de:	4913      	ldr	r1, [pc, #76]	; (800372c <HAL_UART_RxCpltCallback+0xa8>)
 80036e0:	4811      	ldr	r0, [pc, #68]	; (8003728 <HAL_UART_RxCpltCallback+0xa4>)
 80036e2:	f003 fbfb 	bl	8006edc <HAL_UART_Transmit_DMA>
}
 80036e6:	e012      	b.n	800370e <HAL_UART_RxCpltCallback+0x8a>
	}else if(h_envio == 3){
 80036e8:	4b0c      	ldr	r3, [pc, #48]	; (800371c <HAL_UART_RxCpltCallback+0x98>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	d10e      	bne.n	800370e <HAL_UART_RxCpltCallback+0x8a>
		h_envio = 1;
 80036f0:	4b0a      	ldr	r3, [pc, #40]	; (800371c <HAL_UART_RxCpltCallback+0x98>)
 80036f2:	2201      	movs	r2, #1
 80036f4:	701a      	strb	r2, [r3, #0]
		h_calculo |= 0x04;
 80036f6:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <HAL_UART_RxCpltCallback+0x9c>)
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	f043 0304 	orr.w	r3, r3, #4
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	4b07      	ldr	r3, [pc, #28]	; (8003720 <HAL_UART_RxCpltCallback+0x9c>)
 8003702:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart3, mensaje1, 8);
 8003704:	2208      	movs	r2, #8
 8003706:	490a      	ldr	r1, [pc, #40]	; (8003730 <HAL_UART_RxCpltCallback+0xac>)
 8003708:	4807      	ldr	r0, [pc, #28]	; (8003728 <HAL_UART_RxCpltCallback+0xa4>)
 800370a:	f003 fbe7 	bl	8006edc <HAL_UART_Transmit_DMA>
}
 800370e:	bf00      	nop
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40010c00 	.word	0x40010c00
 800371c:	20000113 	.word	0x20000113
 8003720:	20000112 	.word	0x20000112
 8003724:	20000030 	.word	0x20000030
 8003728:	200001ac 	.word	0x200001ac
 800372c:	20000038 	.word	0x20000038
 8003730:	20000028 	.word	0x20000028

08003734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003738:	b672      	cpsid	i
}
 800373a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800373c:	e7fe      	b.n	800373c <Error_Handler+0x8>
	...

08003740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003746:	4b15      	ldr	r3, [pc, #84]	; (800379c <HAL_MspInit+0x5c>)
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	4a14      	ldr	r2, [pc, #80]	; (800379c <HAL_MspInit+0x5c>)
 800374c:	f043 0301 	orr.w	r3, r3, #1
 8003750:	6193      	str	r3, [r2, #24]
 8003752:	4b12      	ldr	r3, [pc, #72]	; (800379c <HAL_MspInit+0x5c>)
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	60bb      	str	r3, [r7, #8]
 800375c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800375e:	4b0f      	ldr	r3, [pc, #60]	; (800379c <HAL_MspInit+0x5c>)
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	4a0e      	ldr	r2, [pc, #56]	; (800379c <HAL_MspInit+0x5c>)
 8003764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003768:	61d3      	str	r3, [r2, #28]
 800376a:	4b0c      	ldr	r3, [pc, #48]	; (800379c <HAL_MspInit+0x5c>)
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003772:	607b      	str	r3, [r7, #4]
 8003774:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003776:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <HAL_MspInit+0x60>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	4a04      	ldr	r2, [pc, #16]	; (80037a0 <HAL_MspInit+0x60>)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003792:	bf00      	nop
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr
 800379c:	40021000 	.word	0x40021000
 80037a0:	40010000 	.word	0x40010000

080037a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b088      	sub	sp, #32
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ac:	f107 0310 	add.w	r3, r7, #16
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	605a      	str	r2, [r3, #4]
 80037b6:	609a      	str	r2, [r3, #8]
 80037b8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a15      	ldr	r2, [pc, #84]	; (8003814 <HAL_I2C_MspInit+0x70>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d123      	bne.n	800380c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037c4:	4b14      	ldr	r3, [pc, #80]	; (8003818 <HAL_I2C_MspInit+0x74>)
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	4a13      	ldr	r2, [pc, #76]	; (8003818 <HAL_I2C_MspInit+0x74>)
 80037ca:	f043 0308 	orr.w	r3, r3, #8
 80037ce:	6193      	str	r3, [r2, #24]
 80037d0:	4b11      	ldr	r3, [pc, #68]	; (8003818 <HAL_I2C_MspInit+0x74>)
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	f003 0308 	and.w	r3, r3, #8
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80037dc:	23c0      	movs	r3, #192	; 0xc0
 80037de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037e0:	2312      	movs	r3, #18
 80037e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037e4:	2303      	movs	r3, #3
 80037e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037e8:	f107 0310 	add.w	r3, r7, #16
 80037ec:	4619      	mov	r1, r3
 80037ee:	480b      	ldr	r0, [pc, #44]	; (800381c <HAL_I2C_MspInit+0x78>)
 80037f0:	f000 fe3a 	bl	8004468 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80037f4:	4b08      	ldr	r3, [pc, #32]	; (8003818 <HAL_I2C_MspInit+0x74>)
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	4a07      	ldr	r2, [pc, #28]	; (8003818 <HAL_I2C_MspInit+0x74>)
 80037fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80037fe:	61d3      	str	r3, [r2, #28]
 8003800:	4b05      	ldr	r3, [pc, #20]	; (8003818 <HAL_I2C_MspInit+0x74>)
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800380c:	bf00      	nop
 800380e:	3720      	adds	r7, #32
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40005400 	.word	0x40005400
 8003818:	40021000 	.word	0x40021000
 800381c:	40010c00 	.word	0x40010c00

08003820 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b088      	sub	sp, #32
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003828:	f107 0310 	add.w	r3, r7, #16
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	605a      	str	r2, [r3, #4]
 8003832:	609a      	str	r2, [r3, #8]
 8003834:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a1b      	ldr	r2, [pc, #108]	; (80038a8 <HAL_SPI_MspInit+0x88>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d12f      	bne.n	80038a0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003840:	4b1a      	ldr	r3, [pc, #104]	; (80038ac <HAL_SPI_MspInit+0x8c>)
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	4a19      	ldr	r2, [pc, #100]	; (80038ac <HAL_SPI_MspInit+0x8c>)
 8003846:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800384a:	6193      	str	r3, [r2, #24]
 800384c:	4b17      	ldr	r3, [pc, #92]	; (80038ac <HAL_SPI_MspInit+0x8c>)
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003858:	4b14      	ldr	r3, [pc, #80]	; (80038ac <HAL_SPI_MspInit+0x8c>)
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	4a13      	ldr	r2, [pc, #76]	; (80038ac <HAL_SPI_MspInit+0x8c>)
 800385e:	f043 0304 	orr.w	r3, r3, #4
 8003862:	6193      	str	r3, [r2, #24]
 8003864:	4b11      	ldr	r3, [pc, #68]	; (80038ac <HAL_SPI_MspInit+0x8c>)
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	60bb      	str	r3, [r7, #8]
 800386e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003870:	23a0      	movs	r3, #160	; 0xa0
 8003872:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003874:	2302      	movs	r3, #2
 8003876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003878:	2303      	movs	r3, #3
 800387a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800387c:	f107 0310 	add.w	r3, r7, #16
 8003880:	4619      	mov	r1, r3
 8003882:	480b      	ldr	r0, [pc, #44]	; (80038b0 <HAL_SPI_MspInit+0x90>)
 8003884:	f000 fdf0 	bl	8004468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003888:	2340      	movs	r3, #64	; 0x40
 800388a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800388c:	2300      	movs	r3, #0
 800388e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003890:	2300      	movs	r3, #0
 8003892:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003894:	f107 0310 	add.w	r3, r7, #16
 8003898:	4619      	mov	r1, r3
 800389a:	4805      	ldr	r0, [pc, #20]	; (80038b0 <HAL_SPI_MspInit+0x90>)
 800389c:	f000 fde4 	bl	8004468 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80038a0:	bf00      	nop
 80038a2:	3720      	adds	r7, #32
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40013000 	.word	0x40013000
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40010800 	.word	0x40010800

080038b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a09      	ldr	r2, [pc, #36]	; (80038e8 <HAL_TIM_Base_MspInit+0x34>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d10b      	bne.n	80038de <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80038c6:	4b09      	ldr	r3, [pc, #36]	; (80038ec <HAL_TIM_Base_MspInit+0x38>)
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	4a08      	ldr	r2, [pc, #32]	; (80038ec <HAL_TIM_Base_MspInit+0x38>)
 80038cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038d0:	6193      	str	r3, [r2, #24]
 80038d2:	4b06      	ldr	r3, [pc, #24]	; (80038ec <HAL_TIM_Base_MspInit+0x38>)
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80038de:	bf00      	nop
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bc80      	pop	{r7}
 80038e6:	4770      	bx	lr
 80038e8:	40012c00 	.word	0x40012c00
 80038ec:	40021000 	.word	0x40021000

080038f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f8:	f107 0310 	add.w	r3, r7, #16
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	605a      	str	r2, [r3, #4]
 8003902:	609a      	str	r2, [r3, #8]
 8003904:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a47      	ldr	r2, [pc, #284]	; (8003a28 <HAL_UART_MspInit+0x138>)
 800390c:	4293      	cmp	r3, r2
 800390e:	f040 8086 	bne.w	8003a1e <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003912:	4b46      	ldr	r3, [pc, #280]	; (8003a2c <HAL_UART_MspInit+0x13c>)
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	4a45      	ldr	r2, [pc, #276]	; (8003a2c <HAL_UART_MspInit+0x13c>)
 8003918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800391c:	61d3      	str	r3, [r2, #28]
 800391e:	4b43      	ldr	r3, [pc, #268]	; (8003a2c <HAL_UART_MspInit+0x13c>)
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800392a:	4b40      	ldr	r3, [pc, #256]	; (8003a2c <HAL_UART_MspInit+0x13c>)
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	4a3f      	ldr	r2, [pc, #252]	; (8003a2c <HAL_UART_MspInit+0x13c>)
 8003930:	f043 0308 	orr.w	r3, r3, #8
 8003934:	6193      	str	r3, [r2, #24]
 8003936:	4b3d      	ldr	r3, [pc, #244]	; (8003a2c <HAL_UART_MspInit+0x13c>)
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	60bb      	str	r3, [r7, #8]
 8003940:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003946:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003948:	2302      	movs	r3, #2
 800394a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800394c:	2303      	movs	r3, #3
 800394e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003950:	f107 0310 	add.w	r3, r7, #16
 8003954:	4619      	mov	r1, r3
 8003956:	4836      	ldr	r0, [pc, #216]	; (8003a30 <HAL_UART_MspInit+0x140>)
 8003958:	f000 fd86 	bl	8004468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800395c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003960:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003966:	2300      	movs	r3, #0
 8003968:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800396a:	f107 0310 	add.w	r3, r7, #16
 800396e:	4619      	mov	r1, r3
 8003970:	482f      	ldr	r0, [pc, #188]	; (8003a30 <HAL_UART_MspInit+0x140>)
 8003972:	f000 fd79 	bl	8004468 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003976:	4b2f      	ldr	r3, [pc, #188]	; (8003a34 <HAL_UART_MspInit+0x144>)
 8003978:	4a2f      	ldr	r2, [pc, #188]	; (8003a38 <HAL_UART_MspInit+0x148>)
 800397a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800397c:	4b2d      	ldr	r3, [pc, #180]	; (8003a34 <HAL_UART_MspInit+0x144>)
 800397e:	2200      	movs	r2, #0
 8003980:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003982:	4b2c      	ldr	r3, [pc, #176]	; (8003a34 <HAL_UART_MspInit+0x144>)
 8003984:	2200      	movs	r2, #0
 8003986:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003988:	4b2a      	ldr	r3, [pc, #168]	; (8003a34 <HAL_UART_MspInit+0x144>)
 800398a:	2280      	movs	r2, #128	; 0x80
 800398c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800398e:	4b29      	ldr	r3, [pc, #164]	; (8003a34 <HAL_UART_MspInit+0x144>)
 8003990:	2200      	movs	r2, #0
 8003992:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003994:	4b27      	ldr	r3, [pc, #156]	; (8003a34 <HAL_UART_MspInit+0x144>)
 8003996:	2200      	movs	r2, #0
 8003998:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800399a:	4b26      	ldr	r3, [pc, #152]	; (8003a34 <HAL_UART_MspInit+0x144>)
 800399c:	2200      	movs	r2, #0
 800399e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039a0:	4b24      	ldr	r3, [pc, #144]	; (8003a34 <HAL_UART_MspInit+0x144>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80039a6:	4823      	ldr	r0, [pc, #140]	; (8003a34 <HAL_UART_MspInit+0x144>)
 80039a8:	f000 fac0 	bl	8003f2c <HAL_DMA_Init>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80039b2:	f7ff febf 	bl	8003734 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a1e      	ldr	r2, [pc, #120]	; (8003a34 <HAL_UART_MspInit+0x144>)
 80039ba:	639a      	str	r2, [r3, #56]	; 0x38
 80039bc:	4a1d      	ldr	r2, [pc, #116]	; (8003a34 <HAL_UART_MspInit+0x144>)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80039c2:	4b1e      	ldr	r3, [pc, #120]	; (8003a3c <HAL_UART_MspInit+0x14c>)
 80039c4:	4a1e      	ldr	r2, [pc, #120]	; (8003a40 <HAL_UART_MspInit+0x150>)
 80039c6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039c8:	4b1c      	ldr	r3, [pc, #112]	; (8003a3c <HAL_UART_MspInit+0x14c>)
 80039ca:	2210      	movs	r2, #16
 80039cc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039ce:	4b1b      	ldr	r3, [pc, #108]	; (8003a3c <HAL_UART_MspInit+0x14c>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039d4:	4b19      	ldr	r3, [pc, #100]	; (8003a3c <HAL_UART_MspInit+0x14c>)
 80039d6:	2280      	movs	r2, #128	; 0x80
 80039d8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039da:	4b18      	ldr	r3, [pc, #96]	; (8003a3c <HAL_UART_MspInit+0x14c>)
 80039dc:	2200      	movs	r2, #0
 80039de:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039e0:	4b16      	ldr	r3, [pc, #88]	; (8003a3c <HAL_UART_MspInit+0x14c>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80039e6:	4b15      	ldr	r3, [pc, #84]	; (8003a3c <HAL_UART_MspInit+0x14c>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80039ec:	4b13      	ldr	r3, [pc, #76]	; (8003a3c <HAL_UART_MspInit+0x14c>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80039f2:	4812      	ldr	r0, [pc, #72]	; (8003a3c <HAL_UART_MspInit+0x14c>)
 80039f4:	f000 fa9a 	bl	8003f2c <HAL_DMA_Init>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80039fe:	f7ff fe99 	bl	8003734 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a0d      	ldr	r2, [pc, #52]	; (8003a3c <HAL_UART_MspInit+0x14c>)
 8003a06:	635a      	str	r2, [r3, #52]	; 0x34
 8003a08:	4a0c      	ldr	r2, [pc, #48]	; (8003a3c <HAL_UART_MspInit+0x14c>)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003a0e:	2200      	movs	r2, #0
 8003a10:	2100      	movs	r1, #0
 8003a12:	2027      	movs	r0, #39	; 0x27
 8003a14:	f000 fa53 	bl	8003ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003a18:	2027      	movs	r0, #39	; 0x27
 8003a1a:	f000 fa6c 	bl	8003ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003a1e:	bf00      	nop
 8003a20:	3720      	adds	r7, #32
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	40004800 	.word	0x40004800
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	40010c00 	.word	0x40010c00
 8003a34:	20000168 	.word	0x20000168
 8003a38:	40020030 	.word	0x40020030
 8003a3c:	200006cc 	.word	0x200006cc
 8003a40:	4002001c 	.word	0x4002001c

08003a44 <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8003a48:	4b0d      	ldr	r3, [pc, #52]	; (8003a80 <SDTimer_Handler+0x3c>)
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d006      	beq.n	8003a60 <SDTimer_Handler+0x1c>
    Timer1--;
 8003a52:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <SDTimer_Handler+0x3c>)
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <SDTimer_Handler+0x3c>)
 8003a5e:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8003a60:	4b08      	ldr	r3, [pc, #32]	; (8003a84 <SDTimer_Handler+0x40>)
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d006      	beq.n	8003a78 <SDTimer_Handler+0x34>
    Timer2--;
 8003a6a:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <SDTimer_Handler+0x40>)
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	4b03      	ldr	r3, [pc, #12]	; (8003a84 <SDTimer_Handler+0x40>)
 8003a76:	801a      	strh	r2, [r3, #0]
}
 8003a78:	bf00      	nop
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr
 8003a80:	20000c92 	.word	0x20000c92
 8003a84:	20000c90 	.word	0x20000c90

08003a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003a8c:	bf00      	nop
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr

08003a94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a98:	e7fe      	b.n	8003a98 <HardFault_Handler+0x4>

08003a9a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a9e:	e7fe      	b.n	8003a9e <MemManage_Handler+0x4>

08003aa0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003aa4:	e7fe      	b.n	8003aa4 <BusFault_Handler+0x4>

08003aa6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003aaa:	e7fe      	b.n	8003aaa <UsageFault_Handler+0x4>

08003aac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ab0:	bf00      	nop
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr

08003ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003abc:	bf00      	nop
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr

08003ac4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ac8:	bf00      	nop
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr

08003ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	  FatFsCnt++;
 8003ad4:	4b0a      	ldr	r3, [pc, #40]	; (8003b00 <SysTick_Handler+0x30>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	3301      	adds	r3, #1
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <SysTick_Handler+0x30>)
 8003ae0:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8003ae2:	4b07      	ldr	r3, [pc, #28]	; (8003b00 <SysTick_Handler+0x30>)
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b09      	cmp	r3, #9
 8003aea:	d904      	bls.n	8003af6 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8003aec:	4b04      	ldr	r3, [pc, #16]	; (8003b00 <SysTick_Handler+0x30>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8003af2:	f7ff ffa7 	bl	8003a44 <SDTimer_Handler>
	  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003af6:	f000 f8cb 	bl	8003c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003afa:	bf00      	nop
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	20000127 	.word	0x20000127

08003b04 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003b08:	4802      	ldr	r0, [pc, #8]	; (8003b14 <DMA1_Channel2_IRQHandler+0x10>)
 8003b0a:	f000 fb79 	bl	8004200 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003b0e:	bf00      	nop
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	200006cc 	.word	0x200006cc

08003b18 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003b1c:	4802      	ldr	r0, [pc, #8]	; (8003b28 <DMA1_Channel3_IRQHandler+0x10>)
 8003b1e:	f000 fb6f 	bl	8004200 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003b22:	bf00      	nop
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	20000168 	.word	0x20000168

08003b2c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003b30:	4802      	ldr	r0, [pc, #8]	; (8003b3c <USART3_IRQHandler+0x10>)
 8003b32:	f003 fa6f 	bl	8007014 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003b36:	bf00      	nop
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	200001ac 	.word	0x200001ac

08003b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b48:	4a14      	ldr	r2, [pc, #80]	; (8003b9c <_sbrk+0x5c>)
 8003b4a:	4b15      	ldr	r3, [pc, #84]	; (8003ba0 <_sbrk+0x60>)
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b54:	4b13      	ldr	r3, [pc, #76]	; (8003ba4 <_sbrk+0x64>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d102      	bne.n	8003b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b5c:	4b11      	ldr	r3, [pc, #68]	; (8003ba4 <_sbrk+0x64>)
 8003b5e:	4a12      	ldr	r2, [pc, #72]	; (8003ba8 <_sbrk+0x68>)
 8003b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b62:	4b10      	ldr	r3, [pc, #64]	; (8003ba4 <_sbrk+0x64>)
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4413      	add	r3, r2
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d207      	bcs.n	8003b80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b70:	f007 fc1a 	bl	800b3a8 <__errno>
 8003b74:	4603      	mov	r3, r0
 8003b76:	220c      	movs	r2, #12
 8003b78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7e:	e009      	b.n	8003b94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b80:	4b08      	ldr	r3, [pc, #32]	; (8003ba4 <_sbrk+0x64>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b86:	4b07      	ldr	r3, [pc, #28]	; (8003ba4 <_sbrk+0x64>)
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	4a05      	ldr	r2, [pc, #20]	; (8003ba4 <_sbrk+0x64>)
 8003b90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b92:	68fb      	ldr	r3, [r7, #12]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	20005000 	.word	0x20005000
 8003ba0:	00000400 	.word	0x00000400
 8003ba4:	20000128 	.word	0x20000128
 8003ba8:	20001510 	.word	0x20001510

08003bac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bb0:	bf00      	nop
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bc80      	pop	{r7}
 8003bb6:	4770      	bx	lr

08003bb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003bb8:	480c      	ldr	r0, [pc, #48]	; (8003bec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003bba:	490d      	ldr	r1, [pc, #52]	; (8003bf0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003bbc:	4a0d      	ldr	r2, [pc, #52]	; (8003bf4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bc0:	e002      	b.n	8003bc8 <LoopCopyDataInit>

08003bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bc6:	3304      	adds	r3, #4

08003bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bcc:	d3f9      	bcc.n	8003bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bce:	4a0a      	ldr	r2, [pc, #40]	; (8003bf8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003bd0:	4c0a      	ldr	r4, [pc, #40]	; (8003bfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bd4:	e001      	b.n	8003bda <LoopFillZerobss>

08003bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bd8:	3204      	adds	r2, #4

08003bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bdc:	d3fb      	bcc.n	8003bd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003bde:	f7ff ffe5 	bl	8003bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003be2:	f007 fbe7 	bl	800b3b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003be6:	f7ff fa8d 	bl	8003104 <main>
  bx lr
 8003bea:	4770      	bx	lr
  ldr r0, =_sdata
 8003bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bf0:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8003bf4:	0800d3e0 	.word	0x0800d3e0
  ldr r2, =_sbss
 8003bf8:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 8003bfc:	2000150c 	.word	0x2000150c

08003c00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c00:	e7fe      	b.n	8003c00 <ADC1_2_IRQHandler>
	...

08003c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c08:	4b08      	ldr	r3, [pc, #32]	; (8003c2c <HAL_Init+0x28>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a07      	ldr	r2, [pc, #28]	; (8003c2c <HAL_Init+0x28>)
 8003c0e:	f043 0310 	orr.w	r3, r3, #16
 8003c12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c14:	2003      	movs	r0, #3
 8003c16:	f000 f947 	bl	8003ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c1a:	200f      	movs	r0, #15
 8003c1c:	f000 f808 	bl	8003c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c20:	f7ff fd8e 	bl	8003740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40022000 	.word	0x40022000

08003c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c38:	4b12      	ldr	r3, [pc, #72]	; (8003c84 <HAL_InitTick+0x54>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	4b12      	ldr	r3, [pc, #72]	; (8003c88 <HAL_InitTick+0x58>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	4619      	mov	r1, r3
 8003c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 f95f 	bl	8003f12 <HAL_SYSTICK_Config>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e00e      	b.n	8003c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b0f      	cmp	r3, #15
 8003c62:	d80a      	bhi.n	8003c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c64:	2200      	movs	r2, #0
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	f04f 30ff 	mov.w	r0, #4294967295
 8003c6c:	f000 f927 	bl	8003ebe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c70:	4a06      	ldr	r2, [pc, #24]	; (8003c8c <HAL_InitTick+0x5c>)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	e000      	b.n	8003c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3708      	adds	r7, #8
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	2000006c 	.word	0x2000006c
 8003c88:	20000074 	.word	0x20000074
 8003c8c:	20000070 	.word	0x20000070

08003c90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c94:	4b05      	ldr	r3, [pc, #20]	; (8003cac <HAL_IncTick+0x1c>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <HAL_IncTick+0x20>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	4a03      	ldr	r2, [pc, #12]	; (8003cb0 <HAL_IncTick+0x20>)
 8003ca2:	6013      	str	r3, [r2, #0]
}
 8003ca4:	bf00      	nop
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bc80      	pop	{r7}
 8003caa:	4770      	bx	lr
 8003cac:	20000074 	.word	0x20000074
 8003cb0:	20000c94 	.word	0x20000c94

08003cb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8003cb8:	4b02      	ldr	r3, [pc, #8]	; (8003cc4 <HAL_GetTick+0x10>)
 8003cba:	681b      	ldr	r3, [r3, #0]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr
 8003cc4:	20000c94 	.word	0x20000c94

08003cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cd0:	f7ff fff0 	bl	8003cb4 <HAL_GetTick>
 8003cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce0:	d005      	beq.n	8003cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <HAL_Delay+0x44>)
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4413      	add	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003cee:	bf00      	nop
 8003cf0:	f7ff ffe0 	bl	8003cb4 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d8f7      	bhi.n	8003cf0 <HAL_Delay+0x28>
  {
  }
}
 8003d00:	bf00      	nop
 8003d02:	bf00      	nop
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20000074 	.word	0x20000074

08003d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d20:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <__NVIC_SetPriorityGrouping+0x44>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d42:	4a04      	ldr	r2, [pc, #16]	; (8003d54 <__NVIC_SetPriorityGrouping+0x44>)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	60d3      	str	r3, [r2, #12]
}
 8003d48:	bf00      	nop
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bc80      	pop	{r7}
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	e000ed00 	.word	0xe000ed00

08003d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d5c:	4b04      	ldr	r3, [pc, #16]	; (8003d70 <__NVIC_GetPriorityGrouping+0x18>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	0a1b      	lsrs	r3, r3, #8
 8003d62:	f003 0307 	and.w	r3, r3, #7
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc80      	pop	{r7}
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	e000ed00 	.word	0xe000ed00

08003d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	db0b      	blt.n	8003d9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d86:	79fb      	ldrb	r3, [r7, #7]
 8003d88:	f003 021f 	and.w	r2, r3, #31
 8003d8c:	4906      	ldr	r1, [pc, #24]	; (8003da8 <__NVIC_EnableIRQ+0x34>)
 8003d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	2001      	movs	r0, #1
 8003d96:	fa00 f202 	lsl.w	r2, r0, r2
 8003d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr
 8003da8:	e000e100 	.word	0xe000e100

08003dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	6039      	str	r1, [r7, #0]
 8003db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	db0a      	blt.n	8003dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	490c      	ldr	r1, [pc, #48]	; (8003df8 <__NVIC_SetPriority+0x4c>)
 8003dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dca:	0112      	lsls	r2, r2, #4
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	440b      	add	r3, r1
 8003dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dd4:	e00a      	b.n	8003dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	4908      	ldr	r1, [pc, #32]	; (8003dfc <__NVIC_SetPriority+0x50>)
 8003ddc:	79fb      	ldrb	r3, [r7, #7]
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	3b04      	subs	r3, #4
 8003de4:	0112      	lsls	r2, r2, #4
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	440b      	add	r3, r1
 8003dea:	761a      	strb	r2, [r3, #24]
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bc80      	pop	{r7}
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	e000e100 	.word	0xe000e100
 8003dfc:	e000ed00 	.word	0xe000ed00

08003e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b089      	sub	sp, #36	; 0x24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f1c3 0307 	rsb	r3, r3, #7
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	bf28      	it	cs
 8003e1e:	2304      	movcs	r3, #4
 8003e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	3304      	adds	r3, #4
 8003e26:	2b06      	cmp	r3, #6
 8003e28:	d902      	bls.n	8003e30 <NVIC_EncodePriority+0x30>
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	3b03      	subs	r3, #3
 8003e2e:	e000      	b.n	8003e32 <NVIC_EncodePriority+0x32>
 8003e30:	2300      	movs	r3, #0
 8003e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e34:	f04f 32ff 	mov.w	r2, #4294967295
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	43da      	mvns	r2, r3
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	401a      	ands	r2, r3
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e48:	f04f 31ff 	mov.w	r1, #4294967295
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e52:	43d9      	mvns	r1, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e58:	4313      	orrs	r3, r2
         );
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3724      	adds	r7, #36	; 0x24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr

08003e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e74:	d301      	bcc.n	8003e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e76:	2301      	movs	r3, #1
 8003e78:	e00f      	b.n	8003e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ea4 <SysTick_Config+0x40>)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e82:	210f      	movs	r1, #15
 8003e84:	f04f 30ff 	mov.w	r0, #4294967295
 8003e88:	f7ff ff90 	bl	8003dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e8c:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <SysTick_Config+0x40>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e92:	4b04      	ldr	r3, [pc, #16]	; (8003ea4 <SysTick_Config+0x40>)
 8003e94:	2207      	movs	r2, #7
 8003e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	e000e010 	.word	0xe000e010

08003ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7ff ff2d 	bl	8003d10 <__NVIC_SetPriorityGrouping>
}
 8003eb6:	bf00      	nop
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b086      	sub	sp, #24
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	607a      	str	r2, [r7, #4]
 8003eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ed0:	f7ff ff42 	bl	8003d58 <__NVIC_GetPriorityGrouping>
 8003ed4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	68b9      	ldr	r1, [r7, #8]
 8003eda:	6978      	ldr	r0, [r7, #20]
 8003edc:	f7ff ff90 	bl	8003e00 <NVIC_EncodePriority>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff ff5f 	bl	8003dac <__NVIC_SetPriority>
}
 8003eee:	bf00      	nop
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b082      	sub	sp, #8
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	4603      	mov	r3, r0
 8003efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7ff ff35 	bl	8003d74 <__NVIC_EnableIRQ>
}
 8003f0a:	bf00      	nop
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff ffa2 	bl	8003e64 <SysTick_Config>
 8003f20:	4603      	mov	r3, r0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e043      	b.n	8003fca <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	4b22      	ldr	r3, [pc, #136]	; (8003fd4 <HAL_DMA_Init+0xa8>)
 8003f4a:	4413      	add	r3, r2
 8003f4c:	4a22      	ldr	r2, [pc, #136]	; (8003fd8 <HAL_DMA_Init+0xac>)
 8003f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f52:	091b      	lsrs	r3, r3, #4
 8003f54:	009a      	lsls	r2, r3, #2
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a1f      	ldr	r2, [pc, #124]	; (8003fdc <HAL_DMA_Init+0xb0>)
 8003f5e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003f76:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003f7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003f84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bc80      	pop	{r7}
 8003fd2:	4770      	bx	lr
 8003fd4:	bffdfff8 	.word	0xbffdfff8
 8003fd8:	cccccccd 	.word	0xcccccccd
 8003fdc:	40020000 	.word	0x40020000

08003fe0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d101      	bne.n	8004000 <HAL_DMA_Start_IT+0x20>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e04a      	b.n	8004096 <HAL_DMA_Start_IT+0xb6>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800400e:	2b01      	cmp	r3, #1
 8004010:	d13a      	bne.n	8004088 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2202      	movs	r2, #2
 8004016:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 0201 	bic.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 f9e8 	bl	800440c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004040:	2b00      	cmp	r3, #0
 8004042:	d008      	beq.n	8004056 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 020e 	orr.w	r2, r2, #14
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	e00f      	b.n	8004076 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0204 	bic.w	r2, r2, #4
 8004064:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 020a 	orr.w	r2, r2, #10
 8004074:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f042 0201 	orr.w	r2, r2, #1
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	e005      	b.n	8004094 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004090:	2302      	movs	r3, #2
 8004092:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004094:	7dfb      	ldrb	r3, [r7, #23]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800409e:	b480      	push	{r7}
 80040a0:	b085      	sub	sp, #20
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d008      	beq.n	80040c6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2204      	movs	r2, #4
 80040b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e020      	b.n	8004108 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 020e 	bic.w	r2, r2, #14
 80040d4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0201 	bic.w	r2, r2, #1
 80040e4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ee:	2101      	movs	r1, #1
 80040f0:	fa01 f202 	lsl.w	r2, r1, r2
 80040f4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004106:	7bfb      	ldrb	r3, [r7, #15]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	bc80      	pop	{r7}
 8004110:	4770      	bx	lr
	...

08004114 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800411c:	2300      	movs	r3, #0
 800411e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004126:	2b02      	cmp	r3, #2
 8004128:	d005      	beq.n	8004136 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2204      	movs	r2, #4
 800412e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	73fb      	strb	r3, [r7, #15]
 8004134:	e051      	b.n	80041da <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 020e 	bic.w	r2, r2, #14
 8004144:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 0201 	bic.w	r2, r2, #1
 8004154:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a22      	ldr	r2, [pc, #136]	; (80041e4 <HAL_DMA_Abort_IT+0xd0>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d029      	beq.n	80041b4 <HAL_DMA_Abort_IT+0xa0>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a20      	ldr	r2, [pc, #128]	; (80041e8 <HAL_DMA_Abort_IT+0xd4>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d022      	beq.n	80041b0 <HAL_DMA_Abort_IT+0x9c>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a1f      	ldr	r2, [pc, #124]	; (80041ec <HAL_DMA_Abort_IT+0xd8>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d01a      	beq.n	80041aa <HAL_DMA_Abort_IT+0x96>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a1d      	ldr	r2, [pc, #116]	; (80041f0 <HAL_DMA_Abort_IT+0xdc>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d012      	beq.n	80041a4 <HAL_DMA_Abort_IT+0x90>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a1c      	ldr	r2, [pc, #112]	; (80041f4 <HAL_DMA_Abort_IT+0xe0>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d00a      	beq.n	800419e <HAL_DMA_Abort_IT+0x8a>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a1a      	ldr	r2, [pc, #104]	; (80041f8 <HAL_DMA_Abort_IT+0xe4>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d102      	bne.n	8004198 <HAL_DMA_Abort_IT+0x84>
 8004192:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004196:	e00e      	b.n	80041b6 <HAL_DMA_Abort_IT+0xa2>
 8004198:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800419c:	e00b      	b.n	80041b6 <HAL_DMA_Abort_IT+0xa2>
 800419e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041a2:	e008      	b.n	80041b6 <HAL_DMA_Abort_IT+0xa2>
 80041a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041a8:	e005      	b.n	80041b6 <HAL_DMA_Abort_IT+0xa2>
 80041aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041ae:	e002      	b.n	80041b6 <HAL_DMA_Abort_IT+0xa2>
 80041b0:	2310      	movs	r3, #16
 80041b2:	e000      	b.n	80041b6 <HAL_DMA_Abort_IT+0xa2>
 80041b4:	2301      	movs	r3, #1
 80041b6:	4a11      	ldr	r2, [pc, #68]	; (80041fc <HAL_DMA_Abort_IT+0xe8>)
 80041b8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	4798      	blx	r3
    } 
  }
  return status;
 80041da:	7bfb      	ldrb	r3, [r7, #15]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40020008 	.word	0x40020008
 80041e8:	4002001c 	.word	0x4002001c
 80041ec:	40020030 	.word	0x40020030
 80041f0:	40020044 	.word	0x40020044
 80041f4:	40020058 	.word	0x40020058
 80041f8:	4002006c 	.word	0x4002006c
 80041fc:	40020000 	.word	0x40020000

08004200 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	2204      	movs	r2, #4
 800421e:	409a      	lsls	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4013      	ands	r3, r2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d04f      	beq.n	80042c8 <HAL_DMA_IRQHandler+0xc8>
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	f003 0304 	and.w	r3, r3, #4
 800422e:	2b00      	cmp	r3, #0
 8004230:	d04a      	beq.n	80042c8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0320 	and.w	r3, r3, #32
 800423c:	2b00      	cmp	r3, #0
 800423e:	d107      	bne.n	8004250 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0204 	bic.w	r2, r2, #4
 800424e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a66      	ldr	r2, [pc, #408]	; (80043f0 <HAL_DMA_IRQHandler+0x1f0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d029      	beq.n	80042ae <HAL_DMA_IRQHandler+0xae>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a65      	ldr	r2, [pc, #404]	; (80043f4 <HAL_DMA_IRQHandler+0x1f4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d022      	beq.n	80042aa <HAL_DMA_IRQHandler+0xaa>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a63      	ldr	r2, [pc, #396]	; (80043f8 <HAL_DMA_IRQHandler+0x1f8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d01a      	beq.n	80042a4 <HAL_DMA_IRQHandler+0xa4>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a62      	ldr	r2, [pc, #392]	; (80043fc <HAL_DMA_IRQHandler+0x1fc>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d012      	beq.n	800429e <HAL_DMA_IRQHandler+0x9e>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a60      	ldr	r2, [pc, #384]	; (8004400 <HAL_DMA_IRQHandler+0x200>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00a      	beq.n	8004298 <HAL_DMA_IRQHandler+0x98>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a5f      	ldr	r2, [pc, #380]	; (8004404 <HAL_DMA_IRQHandler+0x204>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d102      	bne.n	8004292 <HAL_DMA_IRQHandler+0x92>
 800428c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004290:	e00e      	b.n	80042b0 <HAL_DMA_IRQHandler+0xb0>
 8004292:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004296:	e00b      	b.n	80042b0 <HAL_DMA_IRQHandler+0xb0>
 8004298:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800429c:	e008      	b.n	80042b0 <HAL_DMA_IRQHandler+0xb0>
 800429e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80042a2:	e005      	b.n	80042b0 <HAL_DMA_IRQHandler+0xb0>
 80042a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042a8:	e002      	b.n	80042b0 <HAL_DMA_IRQHandler+0xb0>
 80042aa:	2340      	movs	r3, #64	; 0x40
 80042ac:	e000      	b.n	80042b0 <HAL_DMA_IRQHandler+0xb0>
 80042ae:	2304      	movs	r3, #4
 80042b0:	4a55      	ldr	r2, [pc, #340]	; (8004408 <HAL_DMA_IRQHandler+0x208>)
 80042b2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 8094 	beq.w	80043e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80042c6:	e08e      	b.n	80043e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	2202      	movs	r2, #2
 80042ce:	409a      	lsls	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4013      	ands	r3, r2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d056      	beq.n	8004386 <HAL_DMA_IRQHandler+0x186>
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d051      	beq.n	8004386 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0320 	and.w	r3, r3, #32
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10b      	bne.n	8004308 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 020a 	bic.w	r2, r2, #10
 80042fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a38      	ldr	r2, [pc, #224]	; (80043f0 <HAL_DMA_IRQHandler+0x1f0>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d029      	beq.n	8004366 <HAL_DMA_IRQHandler+0x166>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a37      	ldr	r2, [pc, #220]	; (80043f4 <HAL_DMA_IRQHandler+0x1f4>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d022      	beq.n	8004362 <HAL_DMA_IRQHandler+0x162>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a35      	ldr	r2, [pc, #212]	; (80043f8 <HAL_DMA_IRQHandler+0x1f8>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d01a      	beq.n	800435c <HAL_DMA_IRQHandler+0x15c>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a34      	ldr	r2, [pc, #208]	; (80043fc <HAL_DMA_IRQHandler+0x1fc>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d012      	beq.n	8004356 <HAL_DMA_IRQHandler+0x156>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a32      	ldr	r2, [pc, #200]	; (8004400 <HAL_DMA_IRQHandler+0x200>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d00a      	beq.n	8004350 <HAL_DMA_IRQHandler+0x150>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a31      	ldr	r2, [pc, #196]	; (8004404 <HAL_DMA_IRQHandler+0x204>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d102      	bne.n	800434a <HAL_DMA_IRQHandler+0x14a>
 8004344:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004348:	e00e      	b.n	8004368 <HAL_DMA_IRQHandler+0x168>
 800434a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800434e:	e00b      	b.n	8004368 <HAL_DMA_IRQHandler+0x168>
 8004350:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004354:	e008      	b.n	8004368 <HAL_DMA_IRQHandler+0x168>
 8004356:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800435a:	e005      	b.n	8004368 <HAL_DMA_IRQHandler+0x168>
 800435c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004360:	e002      	b.n	8004368 <HAL_DMA_IRQHandler+0x168>
 8004362:	2320      	movs	r3, #32
 8004364:	e000      	b.n	8004368 <HAL_DMA_IRQHandler+0x168>
 8004366:	2302      	movs	r3, #2
 8004368:	4a27      	ldr	r2, [pc, #156]	; (8004408 <HAL_DMA_IRQHandler+0x208>)
 800436a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004378:	2b00      	cmp	r3, #0
 800437a:	d034      	beq.n	80043e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004384:	e02f      	b.n	80043e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	2208      	movs	r2, #8
 800438c:	409a      	lsls	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4013      	ands	r3, r2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d028      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x1e8>
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f003 0308 	and.w	r3, r3, #8
 800439c:	2b00      	cmp	r3, #0
 800439e:	d023      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 020e 	bic.w	r2, r2, #14
 80043ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b8:	2101      	movs	r1, #1
 80043ba:	fa01 f202 	lsl.w	r2, r1, r2
 80043be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d004      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	4798      	blx	r3
    }
  }
  return;
 80043e6:	bf00      	nop
 80043e8:	bf00      	nop
}
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40020008 	.word	0x40020008
 80043f4:	4002001c 	.word	0x4002001c
 80043f8:	40020030 	.word	0x40020030
 80043fc:	40020044 	.word	0x40020044
 8004400:	40020058 	.word	0x40020058
 8004404:	4002006c 	.word	0x4002006c
 8004408:	40020000 	.word	0x40020000

0800440c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004422:	2101      	movs	r1, #1
 8004424:	fa01 f202 	lsl.w	r2, r1, r2
 8004428:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b10      	cmp	r3, #16
 8004438:	d108      	bne.n	800444c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800444a:	e007      	b.n	800445c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	60da      	str	r2, [r3, #12]
}
 800445c:	bf00      	nop
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	bc80      	pop	{r7}
 8004464:	4770      	bx	lr
	...

08004468 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004468:	b480      	push	{r7}
 800446a:	b08b      	sub	sp, #44	; 0x2c
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004472:	2300      	movs	r3, #0
 8004474:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004476:	2300      	movs	r3, #0
 8004478:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800447a:	e169      	b.n	8004750 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800447c:	2201      	movs	r2, #1
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	69fa      	ldr	r2, [r7, #28]
 800448c:	4013      	ands	r3, r2
 800448e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	429a      	cmp	r2, r3
 8004496:	f040 8158 	bne.w	800474a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	4a9a      	ldr	r2, [pc, #616]	; (8004708 <HAL_GPIO_Init+0x2a0>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d05e      	beq.n	8004562 <HAL_GPIO_Init+0xfa>
 80044a4:	4a98      	ldr	r2, [pc, #608]	; (8004708 <HAL_GPIO_Init+0x2a0>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d875      	bhi.n	8004596 <HAL_GPIO_Init+0x12e>
 80044aa:	4a98      	ldr	r2, [pc, #608]	; (800470c <HAL_GPIO_Init+0x2a4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d058      	beq.n	8004562 <HAL_GPIO_Init+0xfa>
 80044b0:	4a96      	ldr	r2, [pc, #600]	; (800470c <HAL_GPIO_Init+0x2a4>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d86f      	bhi.n	8004596 <HAL_GPIO_Init+0x12e>
 80044b6:	4a96      	ldr	r2, [pc, #600]	; (8004710 <HAL_GPIO_Init+0x2a8>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d052      	beq.n	8004562 <HAL_GPIO_Init+0xfa>
 80044bc:	4a94      	ldr	r2, [pc, #592]	; (8004710 <HAL_GPIO_Init+0x2a8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d869      	bhi.n	8004596 <HAL_GPIO_Init+0x12e>
 80044c2:	4a94      	ldr	r2, [pc, #592]	; (8004714 <HAL_GPIO_Init+0x2ac>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d04c      	beq.n	8004562 <HAL_GPIO_Init+0xfa>
 80044c8:	4a92      	ldr	r2, [pc, #584]	; (8004714 <HAL_GPIO_Init+0x2ac>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d863      	bhi.n	8004596 <HAL_GPIO_Init+0x12e>
 80044ce:	4a92      	ldr	r2, [pc, #584]	; (8004718 <HAL_GPIO_Init+0x2b0>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d046      	beq.n	8004562 <HAL_GPIO_Init+0xfa>
 80044d4:	4a90      	ldr	r2, [pc, #576]	; (8004718 <HAL_GPIO_Init+0x2b0>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d85d      	bhi.n	8004596 <HAL_GPIO_Init+0x12e>
 80044da:	2b12      	cmp	r3, #18
 80044dc:	d82a      	bhi.n	8004534 <HAL_GPIO_Init+0xcc>
 80044de:	2b12      	cmp	r3, #18
 80044e0:	d859      	bhi.n	8004596 <HAL_GPIO_Init+0x12e>
 80044e2:	a201      	add	r2, pc, #4	; (adr r2, 80044e8 <HAL_GPIO_Init+0x80>)
 80044e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e8:	08004563 	.word	0x08004563
 80044ec:	0800453d 	.word	0x0800453d
 80044f0:	0800454f 	.word	0x0800454f
 80044f4:	08004591 	.word	0x08004591
 80044f8:	08004597 	.word	0x08004597
 80044fc:	08004597 	.word	0x08004597
 8004500:	08004597 	.word	0x08004597
 8004504:	08004597 	.word	0x08004597
 8004508:	08004597 	.word	0x08004597
 800450c:	08004597 	.word	0x08004597
 8004510:	08004597 	.word	0x08004597
 8004514:	08004597 	.word	0x08004597
 8004518:	08004597 	.word	0x08004597
 800451c:	08004597 	.word	0x08004597
 8004520:	08004597 	.word	0x08004597
 8004524:	08004597 	.word	0x08004597
 8004528:	08004597 	.word	0x08004597
 800452c:	08004545 	.word	0x08004545
 8004530:	08004559 	.word	0x08004559
 8004534:	4a79      	ldr	r2, [pc, #484]	; (800471c <HAL_GPIO_Init+0x2b4>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d013      	beq.n	8004562 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800453a:	e02c      	b.n	8004596 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	623b      	str	r3, [r7, #32]
          break;
 8004542:	e029      	b.n	8004598 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	3304      	adds	r3, #4
 800454a:	623b      	str	r3, [r7, #32]
          break;
 800454c:	e024      	b.n	8004598 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	3308      	adds	r3, #8
 8004554:	623b      	str	r3, [r7, #32]
          break;
 8004556:	e01f      	b.n	8004598 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	330c      	adds	r3, #12
 800455e:	623b      	str	r3, [r7, #32]
          break;
 8004560:	e01a      	b.n	8004598 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d102      	bne.n	8004570 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800456a:	2304      	movs	r3, #4
 800456c:	623b      	str	r3, [r7, #32]
          break;
 800456e:	e013      	b.n	8004598 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d105      	bne.n	8004584 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004578:	2308      	movs	r3, #8
 800457a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	69fa      	ldr	r2, [r7, #28]
 8004580:	611a      	str	r2, [r3, #16]
          break;
 8004582:	e009      	b.n	8004598 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004584:	2308      	movs	r3, #8
 8004586:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	69fa      	ldr	r2, [r7, #28]
 800458c:	615a      	str	r2, [r3, #20]
          break;
 800458e:	e003      	b.n	8004598 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004590:	2300      	movs	r3, #0
 8004592:	623b      	str	r3, [r7, #32]
          break;
 8004594:	e000      	b.n	8004598 <HAL_GPIO_Init+0x130>
          break;
 8004596:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	2bff      	cmp	r3, #255	; 0xff
 800459c:	d801      	bhi.n	80045a2 <HAL_GPIO_Init+0x13a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	e001      	b.n	80045a6 <HAL_GPIO_Init+0x13e>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	3304      	adds	r3, #4
 80045a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	2bff      	cmp	r3, #255	; 0xff
 80045ac:	d802      	bhi.n	80045b4 <HAL_GPIO_Init+0x14c>
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	e002      	b.n	80045ba <HAL_GPIO_Init+0x152>
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	3b08      	subs	r3, #8
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	210f      	movs	r1, #15
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	fa01 f303 	lsl.w	r3, r1, r3
 80045c8:	43db      	mvns	r3, r3
 80045ca:	401a      	ands	r2, r3
 80045cc:	6a39      	ldr	r1, [r7, #32]
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	fa01 f303 	lsl.w	r3, r1, r3
 80045d4:	431a      	orrs	r2, r3
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 80b1 	beq.w	800474a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80045e8:	4b4d      	ldr	r3, [pc, #308]	; (8004720 <HAL_GPIO_Init+0x2b8>)
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	4a4c      	ldr	r2, [pc, #304]	; (8004720 <HAL_GPIO_Init+0x2b8>)
 80045ee:	f043 0301 	orr.w	r3, r3, #1
 80045f2:	6193      	str	r3, [r2, #24]
 80045f4:	4b4a      	ldr	r3, [pc, #296]	; (8004720 <HAL_GPIO_Init+0x2b8>)
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	60bb      	str	r3, [r7, #8]
 80045fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004600:	4a48      	ldr	r2, [pc, #288]	; (8004724 <HAL_GPIO_Init+0x2bc>)
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	089b      	lsrs	r3, r3, #2
 8004606:	3302      	adds	r3, #2
 8004608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800460c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	220f      	movs	r2, #15
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	43db      	mvns	r3, r3
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4013      	ands	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a40      	ldr	r2, [pc, #256]	; (8004728 <HAL_GPIO_Init+0x2c0>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d013      	beq.n	8004654 <HAL_GPIO_Init+0x1ec>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a3f      	ldr	r2, [pc, #252]	; (800472c <HAL_GPIO_Init+0x2c4>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d00d      	beq.n	8004650 <HAL_GPIO_Init+0x1e8>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a3e      	ldr	r2, [pc, #248]	; (8004730 <HAL_GPIO_Init+0x2c8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d007      	beq.n	800464c <HAL_GPIO_Init+0x1e4>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a3d      	ldr	r2, [pc, #244]	; (8004734 <HAL_GPIO_Init+0x2cc>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d101      	bne.n	8004648 <HAL_GPIO_Init+0x1e0>
 8004644:	2303      	movs	r3, #3
 8004646:	e006      	b.n	8004656 <HAL_GPIO_Init+0x1ee>
 8004648:	2304      	movs	r3, #4
 800464a:	e004      	b.n	8004656 <HAL_GPIO_Init+0x1ee>
 800464c:	2302      	movs	r3, #2
 800464e:	e002      	b.n	8004656 <HAL_GPIO_Init+0x1ee>
 8004650:	2301      	movs	r3, #1
 8004652:	e000      	b.n	8004656 <HAL_GPIO_Init+0x1ee>
 8004654:	2300      	movs	r3, #0
 8004656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004658:	f002 0203 	and.w	r2, r2, #3
 800465c:	0092      	lsls	r2, r2, #2
 800465e:	4093      	lsls	r3, r2
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004666:	492f      	ldr	r1, [pc, #188]	; (8004724 <HAL_GPIO_Init+0x2bc>)
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	089b      	lsrs	r3, r3, #2
 800466c:	3302      	adds	r3, #2
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d006      	beq.n	800468e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004680:	4b2d      	ldr	r3, [pc, #180]	; (8004738 <HAL_GPIO_Init+0x2d0>)
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	492c      	ldr	r1, [pc, #176]	; (8004738 <HAL_GPIO_Init+0x2d0>)
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	4313      	orrs	r3, r2
 800468a:	600b      	str	r3, [r1, #0]
 800468c:	e006      	b.n	800469c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800468e:	4b2a      	ldr	r3, [pc, #168]	; (8004738 <HAL_GPIO_Init+0x2d0>)
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	43db      	mvns	r3, r3
 8004696:	4928      	ldr	r1, [pc, #160]	; (8004738 <HAL_GPIO_Init+0x2d0>)
 8004698:	4013      	ands	r3, r2
 800469a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d006      	beq.n	80046b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80046a8:	4b23      	ldr	r3, [pc, #140]	; (8004738 <HAL_GPIO_Init+0x2d0>)
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	4922      	ldr	r1, [pc, #136]	; (8004738 <HAL_GPIO_Init+0x2d0>)
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	604b      	str	r3, [r1, #4]
 80046b4:	e006      	b.n	80046c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80046b6:	4b20      	ldr	r3, [pc, #128]	; (8004738 <HAL_GPIO_Init+0x2d0>)
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	43db      	mvns	r3, r3
 80046be:	491e      	ldr	r1, [pc, #120]	; (8004738 <HAL_GPIO_Init+0x2d0>)
 80046c0:	4013      	ands	r3, r2
 80046c2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d006      	beq.n	80046de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80046d0:	4b19      	ldr	r3, [pc, #100]	; (8004738 <HAL_GPIO_Init+0x2d0>)
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	4918      	ldr	r1, [pc, #96]	; (8004738 <HAL_GPIO_Init+0x2d0>)
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	4313      	orrs	r3, r2
 80046da:	608b      	str	r3, [r1, #8]
 80046dc:	e006      	b.n	80046ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80046de:	4b16      	ldr	r3, [pc, #88]	; (8004738 <HAL_GPIO_Init+0x2d0>)
 80046e0:	689a      	ldr	r2, [r3, #8]
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	43db      	mvns	r3, r3
 80046e6:	4914      	ldr	r1, [pc, #80]	; (8004738 <HAL_GPIO_Init+0x2d0>)
 80046e8:	4013      	ands	r3, r2
 80046ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d021      	beq.n	800473c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80046f8:	4b0f      	ldr	r3, [pc, #60]	; (8004738 <HAL_GPIO_Init+0x2d0>)
 80046fa:	68da      	ldr	r2, [r3, #12]
 80046fc:	490e      	ldr	r1, [pc, #56]	; (8004738 <HAL_GPIO_Init+0x2d0>)
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	4313      	orrs	r3, r2
 8004702:	60cb      	str	r3, [r1, #12]
 8004704:	e021      	b.n	800474a <HAL_GPIO_Init+0x2e2>
 8004706:	bf00      	nop
 8004708:	10320000 	.word	0x10320000
 800470c:	10310000 	.word	0x10310000
 8004710:	10220000 	.word	0x10220000
 8004714:	10210000 	.word	0x10210000
 8004718:	10120000 	.word	0x10120000
 800471c:	10110000 	.word	0x10110000
 8004720:	40021000 	.word	0x40021000
 8004724:	40010000 	.word	0x40010000
 8004728:	40010800 	.word	0x40010800
 800472c:	40010c00 	.word	0x40010c00
 8004730:	40011000 	.word	0x40011000
 8004734:	40011400 	.word	0x40011400
 8004738:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800473c:	4b0b      	ldr	r3, [pc, #44]	; (800476c <HAL_GPIO_Init+0x304>)
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	43db      	mvns	r3, r3
 8004744:	4909      	ldr	r1, [pc, #36]	; (800476c <HAL_GPIO_Init+0x304>)
 8004746:	4013      	ands	r3, r2
 8004748:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	3301      	adds	r3, #1
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	fa22 f303 	lsr.w	r3, r2, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	f47f ae8e 	bne.w	800447c <HAL_GPIO_Init+0x14>
  }
}
 8004760:	bf00      	nop
 8004762:	bf00      	nop
 8004764:	372c      	adds	r7, #44	; 0x2c
 8004766:	46bd      	mov	sp, r7
 8004768:	bc80      	pop	{r7}
 800476a:	4770      	bx	lr
 800476c:	40010400 	.word	0x40010400

08004770 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004770:	b480      	push	{r7}
 8004772:	b089      	sub	sp, #36	; 0x24
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800477a:	2300      	movs	r3, #0
 800477c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800477e:	e09a      	b.n	80048b6 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004780:	2201      	movs	r2, #1
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	4013      	ands	r3, r2
 800478c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 808d 	beq.w	80048b0 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8004796:	4a4e      	ldr	r2, [pc, #312]	; (80048d0 <HAL_GPIO_DeInit+0x160>)
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	089b      	lsrs	r3, r3, #2
 800479c:	3302      	adds	r3, #2
 800479e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047a2:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	220f      	movs	r2, #15
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	4013      	ands	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a46      	ldr	r2, [pc, #280]	; (80048d4 <HAL_GPIO_DeInit+0x164>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d013      	beq.n	80047e8 <HAL_GPIO_DeInit+0x78>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a45      	ldr	r2, [pc, #276]	; (80048d8 <HAL_GPIO_DeInit+0x168>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d00d      	beq.n	80047e4 <HAL_GPIO_DeInit+0x74>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a44      	ldr	r2, [pc, #272]	; (80048dc <HAL_GPIO_DeInit+0x16c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d007      	beq.n	80047e0 <HAL_GPIO_DeInit+0x70>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a43      	ldr	r2, [pc, #268]	; (80048e0 <HAL_GPIO_DeInit+0x170>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d101      	bne.n	80047dc <HAL_GPIO_DeInit+0x6c>
 80047d8:	2303      	movs	r3, #3
 80047da:	e006      	b.n	80047ea <HAL_GPIO_DeInit+0x7a>
 80047dc:	2304      	movs	r3, #4
 80047de:	e004      	b.n	80047ea <HAL_GPIO_DeInit+0x7a>
 80047e0:	2302      	movs	r3, #2
 80047e2:	e002      	b.n	80047ea <HAL_GPIO_DeInit+0x7a>
 80047e4:	2301      	movs	r3, #1
 80047e6:	e000      	b.n	80047ea <HAL_GPIO_DeInit+0x7a>
 80047e8:	2300      	movs	r3, #0
 80047ea:	69fa      	ldr	r2, [r7, #28]
 80047ec:	f002 0203 	and.w	r2, r2, #3
 80047f0:	0092      	lsls	r2, r2, #2
 80047f2:	4093      	lsls	r3, r2
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d132      	bne.n	8004860 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	f003 0303 	and.w	r3, r3, #3
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	220f      	movs	r2, #15
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800480a:	4a31      	ldr	r2, [pc, #196]	; (80048d0 <HAL_GPIO_DeInit+0x160>)
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	089b      	lsrs	r3, r3, #2
 8004810:	3302      	adds	r3, #2
 8004812:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	43da      	mvns	r2, r3
 800481a:	482d      	ldr	r0, [pc, #180]	; (80048d0 <HAL_GPIO_DeInit+0x160>)
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	089b      	lsrs	r3, r3, #2
 8004820:	400a      	ands	r2, r1
 8004822:	3302      	adds	r3, #2
 8004824:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8004828:	4b2e      	ldr	r3, [pc, #184]	; (80048e4 <HAL_GPIO_DeInit+0x174>)
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	43db      	mvns	r3, r3
 8004830:	492c      	ldr	r1, [pc, #176]	; (80048e4 <HAL_GPIO_DeInit+0x174>)
 8004832:	4013      	ands	r3, r2
 8004834:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8004836:	4b2b      	ldr	r3, [pc, #172]	; (80048e4 <HAL_GPIO_DeInit+0x174>)
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	43db      	mvns	r3, r3
 800483e:	4929      	ldr	r1, [pc, #164]	; (80048e4 <HAL_GPIO_DeInit+0x174>)
 8004840:	4013      	ands	r3, r2
 8004842:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8004844:	4b27      	ldr	r3, [pc, #156]	; (80048e4 <HAL_GPIO_DeInit+0x174>)
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	43db      	mvns	r3, r3
 800484c:	4925      	ldr	r1, [pc, #148]	; (80048e4 <HAL_GPIO_DeInit+0x174>)
 800484e:	4013      	ands	r3, r2
 8004850:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8004852:	4b24      	ldr	r3, [pc, #144]	; (80048e4 <HAL_GPIO_DeInit+0x174>)
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	43db      	mvns	r3, r3
 800485a:	4922      	ldr	r1, [pc, #136]	; (80048e4 <HAL_GPIO_DeInit+0x174>)
 800485c:	4013      	ands	r3, r2
 800485e:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	2bff      	cmp	r3, #255	; 0xff
 8004864:	d801      	bhi.n	800486a <HAL_GPIO_DeInit+0xfa>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	e001      	b.n	800486e <HAL_GPIO_DeInit+0xfe>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3304      	adds	r3, #4
 800486e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	2bff      	cmp	r3, #255	; 0xff
 8004874:	d802      	bhi.n	800487c <HAL_GPIO_DeInit+0x10c>
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	e002      	b.n	8004882 <HAL_GPIO_DeInit+0x112>
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	3b08      	subs	r3, #8
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	210f      	movs	r1, #15
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	fa01 f303 	lsl.w	r3, r1, r3
 8004890:	43db      	mvns	r3, r3
 8004892:	401a      	ands	r2, r3
 8004894:	2104      	movs	r1, #4
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	fa01 f303 	lsl.w	r3, r1, r3
 800489c:	431a      	orrs	r2, r3
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	43db      	mvns	r3, r3
 80048aa:	401a      	ands	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	60da      	str	r2, [r3, #12]
    }

    position++;
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	3301      	adds	r3, #1
 80048b4:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	fa22 f303 	lsr.w	r3, r2, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f47f af5e 	bne.w	8004780 <HAL_GPIO_DeInit+0x10>
  }
}
 80048c4:	bf00      	nop
 80048c6:	bf00      	nop
 80048c8:	3724      	adds	r7, #36	; 0x24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bc80      	pop	{r7}
 80048ce:	4770      	bx	lr
 80048d0:	40010000 	.word	0x40010000
 80048d4:	40010800 	.word	0x40010800
 80048d8:	40010c00 	.word	0x40010c00
 80048dc:	40011000 	.word	0x40011000
 80048e0:	40011400 	.word	0x40011400
 80048e4:	40010400 	.word	0x40010400

080048e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	460b      	mov	r3, r1
 80048f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	887b      	ldrh	r3, [r7, #2]
 80048fa:	4013      	ands	r3, r2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d002      	beq.n	8004906 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004900:	2301      	movs	r3, #1
 8004902:	73fb      	strb	r3, [r7, #15]
 8004904:	e001      	b.n	800490a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004906:	2300      	movs	r3, #0
 8004908:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800490a:	7bfb      	ldrb	r3, [r7, #15]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	bc80      	pop	{r7}
 8004914:	4770      	bx	lr

08004916 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	460b      	mov	r3, r1
 8004920:	807b      	strh	r3, [r7, #2]
 8004922:	4613      	mov	r3, r2
 8004924:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004926:	787b      	ldrb	r3, [r7, #1]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800492c:	887a      	ldrh	r2, [r7, #2]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004932:	e003      	b.n	800493c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004934:	887b      	ldrh	r3, [r7, #2]
 8004936:	041a      	lsls	r2, r3, #16
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	611a      	str	r2, [r3, #16]
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	bc80      	pop	{r7}
 8004944:	4770      	bx	lr
	...

08004948 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e12b      	b.n	8004bb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d106      	bne.n	8004974 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7fe ff18 	bl	80037a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2224      	movs	r2, #36	; 0x24
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0201 	bic.w	r2, r2, #1
 800498a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800499a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049ac:	f001 fb90 	bl	80060d0 <HAL_RCC_GetPCLK1Freq>
 80049b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	4a81      	ldr	r2, [pc, #516]	; (8004bbc <HAL_I2C_Init+0x274>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d807      	bhi.n	80049cc <HAL_I2C_Init+0x84>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4a80      	ldr	r2, [pc, #512]	; (8004bc0 <HAL_I2C_Init+0x278>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	bf94      	ite	ls
 80049c4:	2301      	movls	r3, #1
 80049c6:	2300      	movhi	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	e006      	b.n	80049da <HAL_I2C_Init+0x92>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4a7d      	ldr	r2, [pc, #500]	; (8004bc4 <HAL_I2C_Init+0x27c>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	bf94      	ite	ls
 80049d4:	2301      	movls	r3, #1
 80049d6:	2300      	movhi	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e0e7      	b.n	8004bb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4a78      	ldr	r2, [pc, #480]	; (8004bc8 <HAL_I2C_Init+0x280>)
 80049e6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ea:	0c9b      	lsrs	r3, r3, #18
 80049ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	4a6a      	ldr	r2, [pc, #424]	; (8004bbc <HAL_I2C_Init+0x274>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d802      	bhi.n	8004a1c <HAL_I2C_Init+0xd4>
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	e009      	b.n	8004a30 <HAL_I2C_Init+0xe8>
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a22:	fb02 f303 	mul.w	r3, r2, r3
 8004a26:	4a69      	ldr	r2, [pc, #420]	; (8004bcc <HAL_I2C_Init+0x284>)
 8004a28:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2c:	099b      	lsrs	r3, r3, #6
 8004a2e:	3301      	adds	r3, #1
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6812      	ldr	r2, [r2, #0]
 8004a34:	430b      	orrs	r3, r1
 8004a36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	495c      	ldr	r1, [pc, #368]	; (8004bbc <HAL_I2C_Init+0x274>)
 8004a4c:	428b      	cmp	r3, r1
 8004a4e:	d819      	bhi.n	8004a84 <HAL_I2C_Init+0x13c>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	1e59      	subs	r1, r3, #1
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a5e:	1c59      	adds	r1, r3, #1
 8004a60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a64:	400b      	ands	r3, r1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <HAL_I2C_Init+0x138>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	1e59      	subs	r1, r3, #1
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a78:	3301      	adds	r3, #1
 8004a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a7e:	e051      	b.n	8004b24 <HAL_I2C_Init+0x1dc>
 8004a80:	2304      	movs	r3, #4
 8004a82:	e04f      	b.n	8004b24 <HAL_I2C_Init+0x1dc>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d111      	bne.n	8004ab0 <HAL_I2C_Init+0x168>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	1e58      	subs	r0, r3, #1
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6859      	ldr	r1, [r3, #4]
 8004a94:	460b      	mov	r3, r1
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	440b      	add	r3, r1
 8004a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	bf0c      	ite	eq
 8004aa8:	2301      	moveq	r3, #1
 8004aaa:	2300      	movne	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	e012      	b.n	8004ad6 <HAL_I2C_Init+0x18e>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	1e58      	subs	r0, r3, #1
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6859      	ldr	r1, [r3, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	440b      	add	r3, r1
 8004abe:	0099      	lsls	r1, r3, #2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	bf0c      	ite	eq
 8004ad0:	2301      	moveq	r3, #1
 8004ad2:	2300      	movne	r3, #0
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <HAL_I2C_Init+0x196>
 8004ada:	2301      	movs	r3, #1
 8004adc:	e022      	b.n	8004b24 <HAL_I2C_Init+0x1dc>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10e      	bne.n	8004b04 <HAL_I2C_Init+0x1bc>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	1e58      	subs	r0, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6859      	ldr	r1, [r3, #4]
 8004aee:	460b      	mov	r3, r1
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	440b      	add	r3, r1
 8004af4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004af8:	3301      	adds	r3, #1
 8004afa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b02:	e00f      	b.n	8004b24 <HAL_I2C_Init+0x1dc>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	1e58      	subs	r0, r3, #1
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6859      	ldr	r1, [r3, #4]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	440b      	add	r3, r1
 8004b12:	0099      	lsls	r1, r3, #2
 8004b14:	440b      	add	r3, r1
 8004b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b24:	6879      	ldr	r1, [r7, #4]
 8004b26:	6809      	ldr	r1, [r1, #0]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69da      	ldr	r2, [r3, #28]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	6911      	ldr	r1, [r2, #16]
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	68d2      	ldr	r2, [r2, #12]
 8004b5e:	4311      	orrs	r1, r2
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6812      	ldr	r2, [r2, #0]
 8004b64:	430b      	orrs	r3, r1
 8004b66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	695a      	ldr	r2, [r3, #20]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0201 	orr.w	r2, r2, #1
 8004b92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	000186a0 	.word	0x000186a0
 8004bc0:	001e847f 	.word	0x001e847f
 8004bc4:	003d08ff 	.word	0x003d08ff
 8004bc8:	431bde83 	.word	0x431bde83
 8004bcc:	10624dd3 	.word	0x10624dd3

08004bd0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b088      	sub	sp, #32
 8004bd4:	af02      	add	r7, sp, #8
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	607a      	str	r2, [r7, #4]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	460b      	mov	r3, r1
 8004bde:	817b      	strh	r3, [r7, #10]
 8004be0:	4613      	mov	r3, r2
 8004be2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004be4:	f7ff f866 	bl	8003cb4 <HAL_GetTick>
 8004be8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b20      	cmp	r3, #32
 8004bf4:	f040 80e0 	bne.w	8004db8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	2319      	movs	r3, #25
 8004bfe:	2201      	movs	r2, #1
 8004c00:	4970      	ldr	r1, [pc, #448]	; (8004dc4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 fcb4 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004c0e:	2302      	movs	r3, #2
 8004c10:	e0d3      	b.n	8004dba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d101      	bne.n	8004c20 <HAL_I2C_Master_Transmit+0x50>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e0cc      	b.n	8004dba <HAL_I2C_Master_Transmit+0x1ea>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d007      	beq.n	8004c46 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f042 0201 	orr.w	r2, r2, #1
 8004c44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2221      	movs	r2, #33	; 0x21
 8004c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2210      	movs	r2, #16
 8004c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	893a      	ldrh	r2, [r7, #8]
 8004c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4a50      	ldr	r2, [pc, #320]	; (8004dc8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004c86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c88:	8979      	ldrh	r1, [r7, #10]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	6a3a      	ldr	r2, [r7, #32]
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 fb04 	bl	800529c <I2C_MasterRequestWrite>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e08d      	b.n	8004dba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	613b      	str	r3, [r7, #16]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	613b      	str	r3, [r7, #16]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004cb4:	e066      	b.n	8004d84 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	6a39      	ldr	r1, [r7, #32]
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 fd2e 	bl	800571c <I2C_WaitOnTXEFlagUntilTimeout>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00d      	beq.n	8004ce2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d107      	bne.n	8004cde <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cdc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e06b      	b.n	8004dba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	781a      	ldrb	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	d11b      	bne.n	8004d58 <HAL_I2C_Master_Transmit+0x188>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d017      	beq.n	8004d58 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	781a      	ldrb	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	3b01      	subs	r3, #1
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d50:	3b01      	subs	r3, #1
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	6a39      	ldr	r1, [r7, #32]
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 fd1e 	bl	800579e <I2C_WaitOnBTFFlagUntilTimeout>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00d      	beq.n	8004d84 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	d107      	bne.n	8004d80 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d7e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e01a      	b.n	8004dba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d194      	bne.n	8004cb6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	e000      	b.n	8004dba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004db8:	2302      	movs	r3, #2
  }
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	00100002 	.word	0x00100002
 8004dc8:	ffff0000 	.word	0xffff0000

08004dcc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08c      	sub	sp, #48	; 0x30
 8004dd0:	af02      	add	r7, sp, #8
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	4608      	mov	r0, r1
 8004dd6:	4611      	mov	r1, r2
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4603      	mov	r3, r0
 8004ddc:	817b      	strh	r3, [r7, #10]
 8004dde:	460b      	mov	r3, r1
 8004de0:	813b      	strh	r3, [r7, #8]
 8004de2:	4613      	mov	r3, r2
 8004de4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004dea:	f7fe ff63 	bl	8003cb4 <HAL_GetTick>
 8004dee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	f040 8244 	bne.w	8005286 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	2319      	movs	r3, #25
 8004e04:	2201      	movs	r2, #1
 8004e06:	4982      	ldr	r1, [pc, #520]	; (8005010 <HAL_I2C_Mem_Read+0x244>)
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 fbb1 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004e14:	2302      	movs	r3, #2
 8004e16:	e237      	b.n	8005288 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d101      	bne.n	8004e26 <HAL_I2C_Mem_Read+0x5a>
 8004e22:	2302      	movs	r3, #2
 8004e24:	e230      	b.n	8005288 <HAL_I2C_Mem_Read+0x4bc>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d007      	beq.n	8004e4c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0201 	orr.w	r2, r2, #1
 8004e4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2222      	movs	r2, #34	; 0x22
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2240      	movs	r2, #64	; 0x40
 8004e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4a62      	ldr	r2, [pc, #392]	; (8005014 <HAL_I2C_Mem_Read+0x248>)
 8004e8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e8e:	88f8      	ldrh	r0, [r7, #6]
 8004e90:	893a      	ldrh	r2, [r7, #8]
 8004e92:	8979      	ldrh	r1, [r7, #10]
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	9301      	str	r3, [sp, #4]
 8004e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 fa7e 	bl	80053a0 <I2C_RequestMemoryRead>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e1ec      	b.n	8005288 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d113      	bne.n	8004ede <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	61fb      	str	r3, [r7, #28]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	61fb      	str	r3, [r7, #28]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	61fb      	str	r3, [r7, #28]
 8004eca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	e1c0      	b.n	8005260 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d11e      	bne.n	8004f24 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ef4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ef6:	b672      	cpsid	i
}
 8004ef8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004efa:	2300      	movs	r3, #0
 8004efc:	61bb      	str	r3, [r7, #24]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	61bb      	str	r3, [r7, #24]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	61bb      	str	r3, [r7, #24]
 8004f0e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004f20:	b662      	cpsie	i
}
 8004f22:	e035      	b.n	8004f90 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d11e      	bne.n	8004f6a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f3a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f3c:	b672      	cpsid	i
}
 8004f3e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f40:	2300      	movs	r3, #0
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f64:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004f66:	b662      	cpsie	i
}
 8004f68:	e012      	b.n	8004f90 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f78:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	613b      	str	r3, [r7, #16]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	613b      	str	r3, [r7, #16]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004f90:	e166      	b.n	8005260 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f96:	2b03      	cmp	r3, #3
 8004f98:	f200 811f 	bhi.w	80051da <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d123      	bne.n	8004fec <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f000 fc39 	bl	8005820 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e167      	b.n	8005288 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	691a      	ldr	r2, [r3, #16]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fea:	e139      	b.n	8005260 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d152      	bne.n	800509a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	4906      	ldr	r1, [pc, #24]	; (8005018 <HAL_I2C_Mem_Read+0x24c>)
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 fab6 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d008      	beq.n	800501c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e13c      	b.n	8005288 <HAL_I2C_Mem_Read+0x4bc>
 800500e:	bf00      	nop
 8005010:	00100002 	.word	0x00100002
 8005014:	ffff0000 	.word	0xffff0000
 8005018:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800501c:	b672      	cpsid	i
}
 800501e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800502e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	691a      	ldr	r2, [r3, #16]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	b2d2      	uxtb	r2, r2
 800503c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	1c5a      	adds	r2, r3, #1
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504c:	3b01      	subs	r3, #1
 800504e:	b29a      	uxth	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005058:	b29b      	uxth	r3, r3
 800505a:	3b01      	subs	r3, #1
 800505c:	b29a      	uxth	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005062:	b662      	cpsie	i
}
 8005064:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	b2d2      	uxtb	r2, r2
 8005072:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005082:	3b01      	subs	r3, #1
 8005084:	b29a      	uxth	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005098:	e0e2      	b.n	8005260 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a0:	2200      	movs	r2, #0
 80050a2:	497b      	ldr	r1, [pc, #492]	; (8005290 <HAL_I2C_Mem_Read+0x4c4>)
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f000 fa63 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d001      	beq.n	80050b4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e0e9      	b.n	8005288 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80050c4:	b672      	cpsid	i
}
 80050c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	691a      	ldr	r2, [r3, #16]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	1c5a      	adds	r2, r3, #1
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	3b01      	subs	r3, #1
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80050fa:	4b66      	ldr	r3, [pc, #408]	; (8005294 <HAL_I2C_Mem_Read+0x4c8>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	08db      	lsrs	r3, r3, #3
 8005100:	4a65      	ldr	r2, [pc, #404]	; (8005298 <HAL_I2C_Mem_Read+0x4cc>)
 8005102:	fba2 2303 	umull	r2, r3, r2, r3
 8005106:	0a1a      	lsrs	r2, r3, #8
 8005108:	4613      	mov	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	00da      	lsls	r2, r3, #3
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	3b01      	subs	r3, #1
 8005118:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d118      	bne.n	8005152 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2220      	movs	r2, #32
 800512a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	f043 0220 	orr.w	r2, r3, #32
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005142:	b662      	cpsie	i
}
 8005144:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e09a      	b.n	8005288 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b04      	cmp	r3, #4
 800515e:	d1d9      	bne.n	8005114 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800516e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	691a      	ldr	r2, [r3, #16]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	1c5a      	adds	r2, r3, #1
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800518c:	3b01      	subs	r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005198:	b29b      	uxth	r3, r3
 800519a:	3b01      	subs	r3, #1
 800519c:	b29a      	uxth	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80051a2:	b662      	cpsie	i
}
 80051a4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	691a      	ldr	r2, [r3, #16]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	b2d2      	uxtb	r2, r2
 80051b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	3b01      	subs	r3, #1
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051d8:	e042      	b.n	8005260 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 fb1e 	bl	8005820 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e04c      	b.n	8005288 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	691a      	ldr	r2, [r3, #16]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520a:	3b01      	subs	r3, #1
 800520c:	b29a      	uxth	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005216:	b29b      	uxth	r3, r3
 8005218:	3b01      	subs	r3, #1
 800521a:	b29a      	uxth	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	2b04      	cmp	r3, #4
 800522c:	d118      	bne.n	8005260 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	b2d2      	uxtb	r2, r2
 800523a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800524a:	3b01      	subs	r3, #1
 800524c:	b29a      	uxth	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005256:	b29b      	uxth	r3, r3
 8005258:	3b01      	subs	r3, #1
 800525a:	b29a      	uxth	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005264:	2b00      	cmp	r3, #0
 8005266:	f47f ae94 	bne.w	8004f92 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2220      	movs	r2, #32
 800526e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005282:	2300      	movs	r3, #0
 8005284:	e000      	b.n	8005288 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8005286:	2302      	movs	r3, #2
  }
}
 8005288:	4618      	mov	r0, r3
 800528a:	3728      	adds	r7, #40	; 0x28
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	00010004 	.word	0x00010004
 8005294:	2000006c 	.word	0x2000006c
 8005298:	14f8b589 	.word	0x14f8b589

0800529c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b088      	sub	sp, #32
 80052a0:	af02      	add	r7, sp, #8
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	607a      	str	r2, [r7, #4]
 80052a6:	603b      	str	r3, [r7, #0]
 80052a8:	460b      	mov	r3, r1
 80052aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	d006      	beq.n	80052c6 <I2C_MasterRequestWrite+0x2a>
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d003      	beq.n	80052c6 <I2C_MasterRequestWrite+0x2a>
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052c4:	d108      	bne.n	80052d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	e00b      	b.n	80052f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052dc:	2b12      	cmp	r3, #18
 80052de:	d107      	bne.n	80052f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f000 f937 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00d      	beq.n	8005324 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005316:	d103      	bne.n	8005320 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800531e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e035      	b.n	8005390 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800532c:	d108      	bne.n	8005340 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800532e:	897b      	ldrh	r3, [r7, #10]
 8005330:	b2db      	uxtb	r3, r3
 8005332:	461a      	mov	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800533c:	611a      	str	r2, [r3, #16]
 800533e:	e01b      	b.n	8005378 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005340:	897b      	ldrh	r3, [r7, #10]
 8005342:	11db      	asrs	r3, r3, #7
 8005344:	b2db      	uxtb	r3, r3
 8005346:	f003 0306 	and.w	r3, r3, #6
 800534a:	b2db      	uxtb	r3, r3
 800534c:	f063 030f 	orn	r3, r3, #15
 8005350:	b2da      	uxtb	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	490e      	ldr	r1, [pc, #56]	; (8005398 <I2C_MasterRequestWrite+0xfc>)
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f000 f95d 	bl	800561e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e010      	b.n	8005390 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800536e:	897b      	ldrh	r3, [r7, #10]
 8005370:	b2da      	uxtb	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	4907      	ldr	r1, [pc, #28]	; (800539c <I2C_MasterRequestWrite+0x100>)
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 f94d 	bl	800561e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e000      	b.n	8005390 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3718      	adds	r7, #24
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	00010008 	.word	0x00010008
 800539c:	00010002 	.word	0x00010002

080053a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af02      	add	r7, sp, #8
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	4608      	mov	r0, r1
 80053aa:	4611      	mov	r1, r2
 80053ac:	461a      	mov	r2, r3
 80053ae:	4603      	mov	r3, r0
 80053b0:	817b      	strh	r3, [r7, #10]
 80053b2:	460b      	mov	r3, r1
 80053b4:	813b      	strh	r3, [r7, #8]
 80053b6:	4613      	mov	r3, r2
 80053b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f000 f8c2 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00d      	beq.n	800540e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005400:	d103      	bne.n	800540a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005408:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e0aa      	b.n	8005564 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800540e:	897b      	ldrh	r3, [r7, #10]
 8005410:	b2db      	uxtb	r3, r3
 8005412:	461a      	mov	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800541c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800541e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005420:	6a3a      	ldr	r2, [r7, #32]
 8005422:	4952      	ldr	r1, [pc, #328]	; (800556c <I2C_RequestMemoryRead+0x1cc>)
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f000 f8fa 	bl	800561e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e097      	b.n	8005564 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005434:	2300      	movs	r3, #0
 8005436:	617b      	str	r3, [r7, #20]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	617b      	str	r3, [r7, #20]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800544a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800544c:	6a39      	ldr	r1, [r7, #32]
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 f964 	bl	800571c <I2C_WaitOnTXEFlagUntilTimeout>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00d      	beq.n	8005476 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	2b04      	cmp	r3, #4
 8005460:	d107      	bne.n	8005472 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005470:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e076      	b.n	8005564 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005476:	88fb      	ldrh	r3, [r7, #6]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d105      	bne.n	8005488 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800547c:	893b      	ldrh	r3, [r7, #8]
 800547e:	b2da      	uxtb	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	611a      	str	r2, [r3, #16]
 8005486:	e021      	b.n	80054cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005488:	893b      	ldrh	r3, [r7, #8]
 800548a:	0a1b      	lsrs	r3, r3, #8
 800548c:	b29b      	uxth	r3, r3
 800548e:	b2da      	uxtb	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005498:	6a39      	ldr	r1, [r7, #32]
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 f93e 	bl	800571c <I2C_WaitOnTXEFlagUntilTimeout>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00d      	beq.n	80054c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	d107      	bne.n	80054be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e050      	b.n	8005564 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054c2:	893b      	ldrh	r3, [r7, #8]
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ce:	6a39      	ldr	r1, [r7, #32]
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 f923 	bl	800571c <I2C_WaitOnTXEFlagUntilTimeout>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00d      	beq.n	80054f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d107      	bne.n	80054f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e035      	b.n	8005564 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005506:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	2200      	movs	r2, #0
 8005510:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 f82b 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00d      	beq.n	800553c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800552e:	d103      	bne.n	8005538 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005536:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e013      	b.n	8005564 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800553c:	897b      	ldrh	r3, [r7, #10]
 800553e:	b2db      	uxtb	r3, r3
 8005540:	f043 0301 	orr.w	r3, r3, #1
 8005544:	b2da      	uxtb	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	6a3a      	ldr	r2, [r7, #32]
 8005550:	4906      	ldr	r1, [pc, #24]	; (800556c <I2C_RequestMemoryRead+0x1cc>)
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f000 f863 	bl	800561e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e000      	b.n	8005564 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3718      	adds	r7, #24
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	00010002 	.word	0x00010002

08005570 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	603b      	str	r3, [r7, #0]
 800557c:	4613      	mov	r3, r2
 800557e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005580:	e025      	b.n	80055ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005588:	d021      	beq.n	80055ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800558a:	f7fe fb93 	bl	8003cb4 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d302      	bcc.n	80055a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d116      	bne.n	80055ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ba:	f043 0220 	orr.w	r2, r3, #32
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e023      	b.n	8005616 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	0c1b      	lsrs	r3, r3, #16
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d10d      	bne.n	80055f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	43da      	mvns	r2, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	4013      	ands	r3, r2
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	bf0c      	ite	eq
 80055ea:	2301      	moveq	r3, #1
 80055ec:	2300      	movne	r3, #0
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	461a      	mov	r2, r3
 80055f2:	e00c      	b.n	800560e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	43da      	mvns	r2, r3
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4013      	ands	r3, r2
 8005600:	b29b      	uxth	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	bf0c      	ite	eq
 8005606:	2301      	moveq	r3, #1
 8005608:	2300      	movne	r3, #0
 800560a:	b2db      	uxtb	r3, r3
 800560c:	461a      	mov	r2, r3
 800560e:	79fb      	ldrb	r3, [r7, #7]
 8005610:	429a      	cmp	r2, r3
 8005612:	d0b6      	beq.n	8005582 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b084      	sub	sp, #16
 8005622:	af00      	add	r7, sp, #0
 8005624:	60f8      	str	r0, [r7, #12]
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	607a      	str	r2, [r7, #4]
 800562a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800562c:	e051      	b.n	80056d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800563c:	d123      	bne.n	8005686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800564c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005656:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2220      	movs	r2, #32
 8005662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	f043 0204 	orr.w	r2, r3, #4
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e046      	b.n	8005714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568c:	d021      	beq.n	80056d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800568e:	f7fe fb11 	bl	8003cb4 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	429a      	cmp	r2, r3
 800569c:	d302      	bcc.n	80056a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d116      	bne.n	80056d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2220      	movs	r2, #32
 80056ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	f043 0220 	orr.w	r2, r3, #32
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e020      	b.n	8005714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	0c1b      	lsrs	r3, r3, #16
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d10c      	bne.n	80056f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	43da      	mvns	r2, r3
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	4013      	ands	r3, r2
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	bf14      	ite	ne
 80056ee:	2301      	movne	r3, #1
 80056f0:	2300      	moveq	r3, #0
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	e00b      	b.n	800570e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	43da      	mvns	r2, r3
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	4013      	ands	r3, r2
 8005702:	b29b      	uxth	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	bf14      	ite	ne
 8005708:	2301      	movne	r3, #1
 800570a:	2300      	moveq	r3, #0
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d18d      	bne.n	800562e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005728:	e02d      	b.n	8005786 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 f8ce 	bl	80058cc <I2C_IsAcknowledgeFailed>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e02d      	b.n	8005796 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005740:	d021      	beq.n	8005786 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005742:	f7fe fab7 	bl	8003cb4 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	429a      	cmp	r2, r3
 8005750:	d302      	bcc.n	8005758 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d116      	bne.n	8005786 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2220      	movs	r2, #32
 8005762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	f043 0220 	orr.w	r2, r3, #32
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e007      	b.n	8005796 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005790:	2b80      	cmp	r3, #128	; 0x80
 8005792:	d1ca      	bne.n	800572a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b084      	sub	sp, #16
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	60f8      	str	r0, [r7, #12]
 80057a6:	60b9      	str	r1, [r7, #8]
 80057a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057aa:	e02d      	b.n	8005808 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 f88d 	bl	80058cc <I2C_IsAcknowledgeFailed>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e02d      	b.n	8005818 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c2:	d021      	beq.n	8005808 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c4:	f7fe fa76 	bl	8003cb4 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d302      	bcc.n	80057da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d116      	bne.n	8005808 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2220      	movs	r2, #32
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f4:	f043 0220 	orr.w	r2, r3, #32
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e007      	b.n	8005818 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	f003 0304 	and.w	r3, r3, #4
 8005812:	2b04      	cmp	r3, #4
 8005814:	d1ca      	bne.n	80057ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800582c:	e042      	b.n	80058b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	f003 0310 	and.w	r3, r3, #16
 8005838:	2b10      	cmp	r3, #16
 800583a:	d119      	bne.n	8005870 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f06f 0210 	mvn.w	r2, #16
 8005844:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2220      	movs	r2, #32
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e029      	b.n	80058c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005870:	f7fe fa20 	bl	8003cb4 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	429a      	cmp	r2, r3
 800587e:	d302      	bcc.n	8005886 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d116      	bne.n	80058b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2220      	movs	r2, #32
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a0:	f043 0220 	orr.w	r2, r3, #32
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e007      	b.n	80058c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058be:	2b40      	cmp	r3, #64	; 0x40
 80058c0:	d1b5      	bne.n	800582e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058e2:	d11b      	bne.n	800591c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2220      	movs	r2, #32
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005908:	f043 0204 	orr.w	r2, r3, #4
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e000      	b.n	800591e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	bc80      	pop	{r7}
 8005926:	4770      	bx	lr

08005928 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e26c      	b.n	8005e14 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	f000 8087 	beq.w	8005a56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005948:	4b92      	ldr	r3, [pc, #584]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f003 030c 	and.w	r3, r3, #12
 8005950:	2b04      	cmp	r3, #4
 8005952:	d00c      	beq.n	800596e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005954:	4b8f      	ldr	r3, [pc, #572]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f003 030c 	and.w	r3, r3, #12
 800595c:	2b08      	cmp	r3, #8
 800595e:	d112      	bne.n	8005986 <HAL_RCC_OscConfig+0x5e>
 8005960:	4b8c      	ldr	r3, [pc, #560]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800596c:	d10b      	bne.n	8005986 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800596e:	4b89      	ldr	r3, [pc, #548]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d06c      	beq.n	8005a54 <HAL_RCC_OscConfig+0x12c>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d168      	bne.n	8005a54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e246      	b.n	8005e14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800598e:	d106      	bne.n	800599e <HAL_RCC_OscConfig+0x76>
 8005990:	4b80      	ldr	r3, [pc, #512]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a7f      	ldr	r2, [pc, #508]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 8005996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800599a:	6013      	str	r3, [r2, #0]
 800599c:	e02e      	b.n	80059fc <HAL_RCC_OscConfig+0xd4>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10c      	bne.n	80059c0 <HAL_RCC_OscConfig+0x98>
 80059a6:	4b7b      	ldr	r3, [pc, #492]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a7a      	ldr	r2, [pc, #488]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 80059ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059b0:	6013      	str	r3, [r2, #0]
 80059b2:	4b78      	ldr	r3, [pc, #480]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a77      	ldr	r2, [pc, #476]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 80059b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059bc:	6013      	str	r3, [r2, #0]
 80059be:	e01d      	b.n	80059fc <HAL_RCC_OscConfig+0xd4>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059c8:	d10c      	bne.n	80059e4 <HAL_RCC_OscConfig+0xbc>
 80059ca:	4b72      	ldr	r3, [pc, #456]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a71      	ldr	r2, [pc, #452]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 80059d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059d4:	6013      	str	r3, [r2, #0]
 80059d6:	4b6f      	ldr	r3, [pc, #444]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a6e      	ldr	r2, [pc, #440]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 80059dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059e0:	6013      	str	r3, [r2, #0]
 80059e2:	e00b      	b.n	80059fc <HAL_RCC_OscConfig+0xd4>
 80059e4:	4b6b      	ldr	r3, [pc, #428]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a6a      	ldr	r2, [pc, #424]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 80059ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ee:	6013      	str	r3, [r2, #0]
 80059f0:	4b68      	ldr	r3, [pc, #416]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a67      	ldr	r2, [pc, #412]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 80059f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d013      	beq.n	8005a2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a04:	f7fe f956 	bl	8003cb4 <HAL_GetTick>
 8005a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a0a:	e008      	b.n	8005a1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a0c:	f7fe f952 	bl	8003cb4 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	2b64      	cmp	r3, #100	; 0x64
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e1fa      	b.n	8005e14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a1e:	4b5d      	ldr	r3, [pc, #372]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d0f0      	beq.n	8005a0c <HAL_RCC_OscConfig+0xe4>
 8005a2a:	e014      	b.n	8005a56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a2c:	f7fe f942 	bl	8003cb4 <HAL_GetTick>
 8005a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a32:	e008      	b.n	8005a46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a34:	f7fe f93e 	bl	8003cb4 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b64      	cmp	r3, #100	; 0x64
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e1e6      	b.n	8005e14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a46:	4b53      	ldr	r3, [pc, #332]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1f0      	bne.n	8005a34 <HAL_RCC_OscConfig+0x10c>
 8005a52:	e000      	b.n	8005a56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d063      	beq.n	8005b2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a62:	4b4c      	ldr	r3, [pc, #304]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f003 030c 	and.w	r3, r3, #12
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00b      	beq.n	8005a86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005a6e:	4b49      	ldr	r3, [pc, #292]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f003 030c 	and.w	r3, r3, #12
 8005a76:	2b08      	cmp	r3, #8
 8005a78:	d11c      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x18c>
 8005a7a:	4b46      	ldr	r3, [pc, #280]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d116      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a86:	4b43      	ldr	r3, [pc, #268]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d005      	beq.n	8005a9e <HAL_RCC_OscConfig+0x176>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d001      	beq.n	8005a9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e1ba      	b.n	8005e14 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a9e:	4b3d      	ldr	r3, [pc, #244]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	4939      	ldr	r1, [pc, #228]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ab2:	e03a      	b.n	8005b2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d020      	beq.n	8005afe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005abc:	4b36      	ldr	r3, [pc, #216]	; (8005b98 <HAL_RCC_OscConfig+0x270>)
 8005abe:	2201      	movs	r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac2:	f7fe f8f7 	bl	8003cb4 <HAL_GetTick>
 8005ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ac8:	e008      	b.n	8005adc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aca:	f7fe f8f3 	bl	8003cb4 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d901      	bls.n	8005adc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e19b      	b.n	8005e14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005adc:	4b2d      	ldr	r3, [pc, #180]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0f0      	beq.n	8005aca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ae8:	4b2a      	ldr	r3, [pc, #168]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	4927      	ldr	r1, [pc, #156]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	600b      	str	r3, [r1, #0]
 8005afc:	e015      	b.n	8005b2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005afe:	4b26      	ldr	r3, [pc, #152]	; (8005b98 <HAL_RCC_OscConfig+0x270>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b04:	f7fe f8d6 	bl	8003cb4 <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b0a:	e008      	b.n	8005b1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b0c:	f7fe f8d2 	bl	8003cb4 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e17a      	b.n	8005e14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b1e:	4b1d      	ldr	r3, [pc, #116]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1f0      	bne.n	8005b0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0308 	and.w	r3, r3, #8
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d03a      	beq.n	8005bac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d019      	beq.n	8005b72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b3e:	4b17      	ldr	r3, [pc, #92]	; (8005b9c <HAL_RCC_OscConfig+0x274>)
 8005b40:	2201      	movs	r2, #1
 8005b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b44:	f7fe f8b6 	bl	8003cb4 <HAL_GetTick>
 8005b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b4a:	e008      	b.n	8005b5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b4c:	f7fe f8b2 	bl	8003cb4 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d901      	bls.n	8005b5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e15a      	b.n	8005e14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b5e:	4b0d      	ldr	r3, [pc, #52]	; (8005b94 <HAL_RCC_OscConfig+0x26c>)
 8005b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0f0      	beq.n	8005b4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005b6a:	2001      	movs	r0, #1
 8005b6c:	f000 fad8 	bl	8006120 <RCC_Delay>
 8005b70:	e01c      	b.n	8005bac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b72:	4b0a      	ldr	r3, [pc, #40]	; (8005b9c <HAL_RCC_OscConfig+0x274>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b78:	f7fe f89c 	bl	8003cb4 <HAL_GetTick>
 8005b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b7e:	e00f      	b.n	8005ba0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b80:	f7fe f898 	bl	8003cb4 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d908      	bls.n	8005ba0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e140      	b.n	8005e14 <HAL_RCC_OscConfig+0x4ec>
 8005b92:	bf00      	nop
 8005b94:	40021000 	.word	0x40021000
 8005b98:	42420000 	.word	0x42420000
 8005b9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ba0:	4b9e      	ldr	r3, [pc, #632]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1e9      	bne.n	8005b80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0304 	and.w	r3, r3, #4
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 80a6 	beq.w	8005d06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bbe:	4b97      	ldr	r3, [pc, #604]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10d      	bne.n	8005be6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bca:	4b94      	ldr	r3, [pc, #592]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	4a93      	ldr	r2, [pc, #588]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bd4:	61d3      	str	r3, [r2, #28]
 8005bd6:	4b91      	ldr	r3, [pc, #580]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bde:	60bb      	str	r3, [r7, #8]
 8005be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005be2:	2301      	movs	r3, #1
 8005be4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005be6:	4b8e      	ldr	r3, [pc, #568]	; (8005e20 <HAL_RCC_OscConfig+0x4f8>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d118      	bne.n	8005c24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bf2:	4b8b      	ldr	r3, [pc, #556]	; (8005e20 <HAL_RCC_OscConfig+0x4f8>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a8a      	ldr	r2, [pc, #552]	; (8005e20 <HAL_RCC_OscConfig+0x4f8>)
 8005bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bfe:	f7fe f859 	bl	8003cb4 <HAL_GetTick>
 8005c02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c04:	e008      	b.n	8005c18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c06:	f7fe f855 	bl	8003cb4 <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	2b64      	cmp	r3, #100	; 0x64
 8005c12:	d901      	bls.n	8005c18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e0fd      	b.n	8005e14 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c18:	4b81      	ldr	r3, [pc, #516]	; (8005e20 <HAL_RCC_OscConfig+0x4f8>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d0f0      	beq.n	8005c06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d106      	bne.n	8005c3a <HAL_RCC_OscConfig+0x312>
 8005c2c:	4b7b      	ldr	r3, [pc, #492]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	4a7a      	ldr	r2, [pc, #488]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005c32:	f043 0301 	orr.w	r3, r3, #1
 8005c36:	6213      	str	r3, [r2, #32]
 8005c38:	e02d      	b.n	8005c96 <HAL_RCC_OscConfig+0x36e>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10c      	bne.n	8005c5c <HAL_RCC_OscConfig+0x334>
 8005c42:	4b76      	ldr	r3, [pc, #472]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	4a75      	ldr	r2, [pc, #468]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005c48:	f023 0301 	bic.w	r3, r3, #1
 8005c4c:	6213      	str	r3, [r2, #32]
 8005c4e:	4b73      	ldr	r3, [pc, #460]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	4a72      	ldr	r2, [pc, #456]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005c54:	f023 0304 	bic.w	r3, r3, #4
 8005c58:	6213      	str	r3, [r2, #32]
 8005c5a:	e01c      	b.n	8005c96 <HAL_RCC_OscConfig+0x36e>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	2b05      	cmp	r3, #5
 8005c62:	d10c      	bne.n	8005c7e <HAL_RCC_OscConfig+0x356>
 8005c64:	4b6d      	ldr	r3, [pc, #436]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	4a6c      	ldr	r2, [pc, #432]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005c6a:	f043 0304 	orr.w	r3, r3, #4
 8005c6e:	6213      	str	r3, [r2, #32]
 8005c70:	4b6a      	ldr	r3, [pc, #424]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	4a69      	ldr	r2, [pc, #420]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005c76:	f043 0301 	orr.w	r3, r3, #1
 8005c7a:	6213      	str	r3, [r2, #32]
 8005c7c:	e00b      	b.n	8005c96 <HAL_RCC_OscConfig+0x36e>
 8005c7e:	4b67      	ldr	r3, [pc, #412]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	4a66      	ldr	r2, [pc, #408]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005c84:	f023 0301 	bic.w	r3, r3, #1
 8005c88:	6213      	str	r3, [r2, #32]
 8005c8a:	4b64      	ldr	r3, [pc, #400]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	4a63      	ldr	r2, [pc, #396]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005c90:	f023 0304 	bic.w	r3, r3, #4
 8005c94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d015      	beq.n	8005cca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c9e:	f7fe f809 	bl	8003cb4 <HAL_GetTick>
 8005ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ca4:	e00a      	b.n	8005cbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ca6:	f7fe f805 	bl	8003cb4 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d901      	bls.n	8005cbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e0ab      	b.n	8005e14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cbc:	4b57      	ldr	r3, [pc, #348]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005cbe:	6a1b      	ldr	r3, [r3, #32]
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d0ee      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x37e>
 8005cc8:	e014      	b.n	8005cf4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cca:	f7fd fff3 	bl	8003cb4 <HAL_GetTick>
 8005cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cd0:	e00a      	b.n	8005ce8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cd2:	f7fd ffef 	bl	8003cb4 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d901      	bls.n	8005ce8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e095      	b.n	8005e14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ce8:	4b4c      	ldr	r3, [pc, #304]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1ee      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005cf4:	7dfb      	ldrb	r3, [r7, #23]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d105      	bne.n	8005d06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cfa:	4b48      	ldr	r3, [pc, #288]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	4a47      	ldr	r2, [pc, #284]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 8081 	beq.w	8005e12 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d10:	4b42      	ldr	r3, [pc, #264]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f003 030c 	and.w	r3, r3, #12
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	d061      	beq.n	8005de0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	69db      	ldr	r3, [r3, #28]
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d146      	bne.n	8005db2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d24:	4b3f      	ldr	r3, [pc, #252]	; (8005e24 <HAL_RCC_OscConfig+0x4fc>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d2a:	f7fd ffc3 	bl	8003cb4 <HAL_GetTick>
 8005d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d30:	e008      	b.n	8005d44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d32:	f7fd ffbf 	bl	8003cb4 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d901      	bls.n	8005d44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e067      	b.n	8005e14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d44:	4b35      	ldr	r3, [pc, #212]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1f0      	bne.n	8005d32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d58:	d108      	bne.n	8005d6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005d5a:	4b30      	ldr	r3, [pc, #192]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	492d      	ldr	r1, [pc, #180]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d6c:	4b2b      	ldr	r3, [pc, #172]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a19      	ldr	r1, [r3, #32]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	430b      	orrs	r3, r1
 8005d7e:	4927      	ldr	r1, [pc, #156]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005d80:	4313      	orrs	r3, r2
 8005d82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d84:	4b27      	ldr	r3, [pc, #156]	; (8005e24 <HAL_RCC_OscConfig+0x4fc>)
 8005d86:	2201      	movs	r2, #1
 8005d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d8a:	f7fd ff93 	bl	8003cb4 <HAL_GetTick>
 8005d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d90:	e008      	b.n	8005da4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d92:	f7fd ff8f 	bl	8003cb4 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d901      	bls.n	8005da4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e037      	b.n	8005e14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005da4:	4b1d      	ldr	r3, [pc, #116]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d0f0      	beq.n	8005d92 <HAL_RCC_OscConfig+0x46a>
 8005db0:	e02f      	b.n	8005e12 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005db2:	4b1c      	ldr	r3, [pc, #112]	; (8005e24 <HAL_RCC_OscConfig+0x4fc>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005db8:	f7fd ff7c 	bl	8003cb4 <HAL_GetTick>
 8005dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005dbe:	e008      	b.n	8005dd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dc0:	f7fd ff78 	bl	8003cb4 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d901      	bls.n	8005dd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e020      	b.n	8005e14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005dd2:	4b12      	ldr	r3, [pc, #72]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1f0      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x498>
 8005dde:	e018      	b.n	8005e12 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d101      	bne.n	8005dec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e013      	b.n	8005e14 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005dec:	4b0b      	ldr	r3, [pc, #44]	; (8005e1c <HAL_RCC_OscConfig+0x4f4>)
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d106      	bne.n	8005e0e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d001      	beq.n	8005e12 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e000      	b.n	8005e14 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3718      	adds	r7, #24
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	40021000 	.word	0x40021000
 8005e20:	40007000 	.word	0x40007000
 8005e24:	42420060 	.word	0x42420060

08005e28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d101      	bne.n	8005e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e0d0      	b.n	8005fde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e3c:	4b6a      	ldr	r3, [pc, #424]	; (8005fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0307 	and.w	r3, r3, #7
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d910      	bls.n	8005e6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e4a:	4b67      	ldr	r3, [pc, #412]	; (8005fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f023 0207 	bic.w	r2, r3, #7
 8005e52:	4965      	ldr	r1, [pc, #404]	; (8005fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e5a:	4b63      	ldr	r3, [pc, #396]	; (8005fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0307 	and.w	r3, r3, #7
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d001      	beq.n	8005e6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e0b8      	b.n	8005fde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0302 	and.w	r3, r3, #2
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d020      	beq.n	8005eba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d005      	beq.n	8005e90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e84:	4b59      	ldr	r3, [pc, #356]	; (8005fec <HAL_RCC_ClockConfig+0x1c4>)
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	4a58      	ldr	r2, [pc, #352]	; (8005fec <HAL_RCC_ClockConfig+0x1c4>)
 8005e8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005e8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0308 	and.w	r3, r3, #8
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d005      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e9c:	4b53      	ldr	r3, [pc, #332]	; (8005fec <HAL_RCC_ClockConfig+0x1c4>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	4a52      	ldr	r2, [pc, #328]	; (8005fec <HAL_RCC_ClockConfig+0x1c4>)
 8005ea2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005ea6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ea8:	4b50      	ldr	r3, [pc, #320]	; (8005fec <HAL_RCC_ClockConfig+0x1c4>)
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	494d      	ldr	r1, [pc, #308]	; (8005fec <HAL_RCC_ClockConfig+0x1c4>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d040      	beq.n	8005f48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d107      	bne.n	8005ede <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ece:	4b47      	ldr	r3, [pc, #284]	; (8005fec <HAL_RCC_ClockConfig+0x1c4>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d115      	bne.n	8005f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e07f      	b.n	8005fde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d107      	bne.n	8005ef6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ee6:	4b41      	ldr	r3, [pc, #260]	; (8005fec <HAL_RCC_ClockConfig+0x1c4>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d109      	bne.n	8005f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e073      	b.n	8005fde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ef6:	4b3d      	ldr	r3, [pc, #244]	; (8005fec <HAL_RCC_ClockConfig+0x1c4>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0302 	and.w	r3, r3, #2
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e06b      	b.n	8005fde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f06:	4b39      	ldr	r3, [pc, #228]	; (8005fec <HAL_RCC_ClockConfig+0x1c4>)
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f023 0203 	bic.w	r2, r3, #3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	4936      	ldr	r1, [pc, #216]	; (8005fec <HAL_RCC_ClockConfig+0x1c4>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f18:	f7fd fecc 	bl	8003cb4 <HAL_GetTick>
 8005f1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f1e:	e00a      	b.n	8005f36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f20:	f7fd fec8 	bl	8003cb4 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d901      	bls.n	8005f36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e053      	b.n	8005fde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f36:	4b2d      	ldr	r3, [pc, #180]	; (8005fec <HAL_RCC_ClockConfig+0x1c4>)
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f003 020c 	and.w	r2, r3, #12
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d1eb      	bne.n	8005f20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f48:	4b27      	ldr	r3, [pc, #156]	; (8005fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d210      	bcs.n	8005f78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f56:	4b24      	ldr	r3, [pc, #144]	; (8005fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f023 0207 	bic.w	r2, r3, #7
 8005f5e:	4922      	ldr	r1, [pc, #136]	; (8005fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f66:	4b20      	ldr	r3, [pc, #128]	; (8005fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0307 	and.w	r3, r3, #7
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d001      	beq.n	8005f78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e032      	b.n	8005fde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d008      	beq.n	8005f96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f84:	4b19      	ldr	r3, [pc, #100]	; (8005fec <HAL_RCC_ClockConfig+0x1c4>)
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	4916      	ldr	r1, [pc, #88]	; (8005fec <HAL_RCC_ClockConfig+0x1c4>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0308 	and.w	r3, r3, #8
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d009      	beq.n	8005fb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005fa2:	4b12      	ldr	r3, [pc, #72]	; (8005fec <HAL_RCC_ClockConfig+0x1c4>)
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	490e      	ldr	r1, [pc, #56]	; (8005fec <HAL_RCC_ClockConfig+0x1c4>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005fb6:	f000 f821 	bl	8005ffc <HAL_RCC_GetSysClockFreq>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	4b0b      	ldr	r3, [pc, #44]	; (8005fec <HAL_RCC_ClockConfig+0x1c4>)
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	091b      	lsrs	r3, r3, #4
 8005fc2:	f003 030f 	and.w	r3, r3, #15
 8005fc6:	490a      	ldr	r1, [pc, #40]	; (8005ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8005fc8:	5ccb      	ldrb	r3, [r1, r3]
 8005fca:	fa22 f303 	lsr.w	r3, r2, r3
 8005fce:	4a09      	ldr	r2, [pc, #36]	; (8005ff4 <HAL_RCC_ClockConfig+0x1cc>)
 8005fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005fd2:	4b09      	ldr	r3, [pc, #36]	; (8005ff8 <HAL_RCC_ClockConfig+0x1d0>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fd fe2a 	bl	8003c30 <HAL_InitTick>

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	40022000 	.word	0x40022000
 8005fec:	40021000 	.word	0x40021000
 8005ff0:	0800cdfc 	.word	0x0800cdfc
 8005ff4:	2000006c 	.word	0x2000006c
 8005ff8:	20000070 	.word	0x20000070

08005ffc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ffc:	b490      	push	{r4, r7}
 8005ffe:	b08a      	sub	sp, #40	; 0x28
 8006000:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006002:	4b2a      	ldr	r3, [pc, #168]	; (80060ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8006004:	1d3c      	adds	r4, r7, #4
 8006006:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006008:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800600c:	f240 2301 	movw	r3, #513	; 0x201
 8006010:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006012:	2300      	movs	r3, #0
 8006014:	61fb      	str	r3, [r7, #28]
 8006016:	2300      	movs	r3, #0
 8006018:	61bb      	str	r3, [r7, #24]
 800601a:	2300      	movs	r3, #0
 800601c:	627b      	str	r3, [r7, #36]	; 0x24
 800601e:	2300      	movs	r3, #0
 8006020:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006022:	2300      	movs	r3, #0
 8006024:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006026:	4b22      	ldr	r3, [pc, #136]	; (80060b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	f003 030c 	and.w	r3, r3, #12
 8006032:	2b04      	cmp	r3, #4
 8006034:	d002      	beq.n	800603c <HAL_RCC_GetSysClockFreq+0x40>
 8006036:	2b08      	cmp	r3, #8
 8006038:	d003      	beq.n	8006042 <HAL_RCC_GetSysClockFreq+0x46>
 800603a:	e02d      	b.n	8006098 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800603c:	4b1d      	ldr	r3, [pc, #116]	; (80060b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800603e:	623b      	str	r3, [r7, #32]
      break;
 8006040:	e02d      	b.n	800609e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	0c9b      	lsrs	r3, r3, #18
 8006046:	f003 030f 	and.w	r3, r3, #15
 800604a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800604e:	4413      	add	r3, r2
 8006050:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006054:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d013      	beq.n	8006088 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006060:	4b13      	ldr	r3, [pc, #76]	; (80060b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	0c5b      	lsrs	r3, r3, #17
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800606e:	4413      	add	r3, r2
 8006070:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006074:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	4a0e      	ldr	r2, [pc, #56]	; (80060b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800607a:	fb02 f203 	mul.w	r2, r2, r3
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	fbb2 f3f3 	udiv	r3, r2, r3
 8006084:	627b      	str	r3, [r7, #36]	; 0x24
 8006086:	e004      	b.n	8006092 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	4a0b      	ldr	r2, [pc, #44]	; (80060b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800608c:	fb02 f303 	mul.w	r3, r2, r3
 8006090:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	623b      	str	r3, [r7, #32]
      break;
 8006096:	e002      	b.n	800609e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006098:	4b06      	ldr	r3, [pc, #24]	; (80060b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800609a:	623b      	str	r3, [r7, #32]
      break;
 800609c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800609e:	6a3b      	ldr	r3, [r7, #32]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3728      	adds	r7, #40	; 0x28
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bc90      	pop	{r4, r7}
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	0800cda4 	.word	0x0800cda4
 80060b0:	40021000 	.word	0x40021000
 80060b4:	007a1200 	.word	0x007a1200
 80060b8:	003d0900 	.word	0x003d0900

080060bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060bc:	b480      	push	{r7}
 80060be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060c0:	4b02      	ldr	r3, [pc, #8]	; (80060cc <HAL_RCC_GetHCLKFreq+0x10>)
 80060c2:	681b      	ldr	r3, [r3, #0]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bc80      	pop	{r7}
 80060ca:	4770      	bx	lr
 80060cc:	2000006c 	.word	0x2000006c

080060d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80060d4:	f7ff fff2 	bl	80060bc <HAL_RCC_GetHCLKFreq>
 80060d8:	4602      	mov	r2, r0
 80060da:	4b05      	ldr	r3, [pc, #20]	; (80060f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	0a1b      	lsrs	r3, r3, #8
 80060e0:	f003 0307 	and.w	r3, r3, #7
 80060e4:	4903      	ldr	r1, [pc, #12]	; (80060f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060e6:	5ccb      	ldrb	r3, [r1, r3]
 80060e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	40021000 	.word	0x40021000
 80060f4:	0800ce0c 	.word	0x0800ce0c

080060f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80060fc:	f7ff ffde 	bl	80060bc <HAL_RCC_GetHCLKFreq>
 8006100:	4602      	mov	r2, r0
 8006102:	4b05      	ldr	r3, [pc, #20]	; (8006118 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	0adb      	lsrs	r3, r3, #11
 8006108:	f003 0307 	and.w	r3, r3, #7
 800610c:	4903      	ldr	r1, [pc, #12]	; (800611c <HAL_RCC_GetPCLK2Freq+0x24>)
 800610e:	5ccb      	ldrb	r3, [r1, r3]
 8006110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006114:	4618      	mov	r0, r3
 8006116:	bd80      	pop	{r7, pc}
 8006118:	40021000 	.word	0x40021000
 800611c:	0800ce0c 	.word	0x0800ce0c

08006120 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006128:	4b0a      	ldr	r3, [pc, #40]	; (8006154 <RCC_Delay+0x34>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a0a      	ldr	r2, [pc, #40]	; (8006158 <RCC_Delay+0x38>)
 800612e:	fba2 2303 	umull	r2, r3, r2, r3
 8006132:	0a5b      	lsrs	r3, r3, #9
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	fb02 f303 	mul.w	r3, r2, r3
 800613a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800613c:	bf00      	nop
  }
  while (Delay --);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	1e5a      	subs	r2, r3, #1
 8006142:	60fa      	str	r2, [r7, #12]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1f9      	bne.n	800613c <RCC_Delay+0x1c>
}
 8006148:	bf00      	nop
 800614a:	bf00      	nop
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	bc80      	pop	{r7}
 8006152:	4770      	bx	lr
 8006154:	2000006c 	.word	0x2000006c
 8006158:	10624dd3 	.word	0x10624dd3

0800615c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e076      	b.n	800625c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	2b00      	cmp	r3, #0
 8006174:	d108      	bne.n	8006188 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800617e:	d009      	beq.n	8006194 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	61da      	str	r2, [r3, #28]
 8006186:	e005      	b.n	8006194 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d106      	bne.n	80061b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7fd fb36 	bl	8003820 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80061dc:	431a      	orrs	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061e6:	431a      	orrs	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	f003 0302 	and.w	r3, r3, #2
 80061f0:	431a      	orrs	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	431a      	orrs	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006204:	431a      	orrs	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800620e:	431a      	orrs	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006218:	ea42 0103 	orr.w	r1, r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006220:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	0c1a      	lsrs	r2, r3, #16
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f002 0204 	and.w	r2, r2, #4
 800623a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	69da      	ldr	r2, [r3, #28]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800624a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3708      	adds	r7, #8
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	603b      	str	r3, [r7, #0]
 8006270:	4613      	mov	r3, r2
 8006272:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006274:	2300      	movs	r3, #0
 8006276:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800627e:	2b01      	cmp	r3, #1
 8006280:	d101      	bne.n	8006286 <HAL_SPI_Transmit+0x22>
 8006282:	2302      	movs	r3, #2
 8006284:	e126      	b.n	80064d4 <HAL_SPI_Transmit+0x270>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800628e:	f7fd fd11 	bl	8003cb4 <HAL_GetTick>
 8006292:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006294:	88fb      	ldrh	r3, [r7, #6]
 8006296:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d002      	beq.n	80062aa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80062a4:	2302      	movs	r3, #2
 80062a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80062a8:	e10b      	b.n	80064c2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d002      	beq.n	80062b6 <HAL_SPI_Transmit+0x52>
 80062b0:	88fb      	ldrh	r3, [r7, #6]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d102      	bne.n	80062bc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80062ba:	e102      	b.n	80064c2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2203      	movs	r2, #3
 80062c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	88fa      	ldrh	r2, [r7, #6]
 80062d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	88fa      	ldrh	r2, [r7, #6]
 80062da:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006302:	d10f      	bne.n	8006324 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006312:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006322:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632e:	2b40      	cmp	r3, #64	; 0x40
 8006330:	d007      	beq.n	8006342 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006340:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800634a:	d14b      	bne.n	80063e4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d002      	beq.n	800635a <HAL_SPI_Transmit+0xf6>
 8006354:	8afb      	ldrh	r3, [r7, #22]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d13e      	bne.n	80063d8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635e:	881a      	ldrh	r2, [r3, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636a:	1c9a      	adds	r2, r3, #2
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006374:	b29b      	uxth	r3, r3
 8006376:	3b01      	subs	r3, #1
 8006378:	b29a      	uxth	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800637e:	e02b      	b.n	80063d8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b02      	cmp	r3, #2
 800638c:	d112      	bne.n	80063b4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006392:	881a      	ldrh	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639e:	1c9a      	adds	r2, r3, #2
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	3b01      	subs	r3, #1
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80063b2:	e011      	b.n	80063d8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063b4:	f7fd fc7e 	bl	8003cb4 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d803      	bhi.n	80063cc <HAL_SPI_Transmit+0x168>
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ca:	d102      	bne.n	80063d2 <HAL_SPI_Transmit+0x16e>
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d102      	bne.n	80063d8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80063d6:	e074      	b.n	80064c2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063dc:	b29b      	uxth	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1ce      	bne.n	8006380 <HAL_SPI_Transmit+0x11c>
 80063e2:	e04c      	b.n	800647e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <HAL_SPI_Transmit+0x18e>
 80063ec:	8afb      	ldrh	r3, [r7, #22]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d140      	bne.n	8006474 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	330c      	adds	r3, #12
 80063fc:	7812      	ldrb	r2, [r2, #0]
 80063fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006404:	1c5a      	adds	r2, r3, #1
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800640e:	b29b      	uxth	r3, r3
 8006410:	3b01      	subs	r3, #1
 8006412:	b29a      	uxth	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006418:	e02c      	b.n	8006474 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b02      	cmp	r3, #2
 8006426:	d113      	bne.n	8006450 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	330c      	adds	r3, #12
 8006432:	7812      	ldrb	r2, [r2, #0]
 8006434:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643a:	1c5a      	adds	r2, r3, #1
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006444:	b29b      	uxth	r3, r3
 8006446:	3b01      	subs	r3, #1
 8006448:	b29a      	uxth	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	86da      	strh	r2, [r3, #54]	; 0x36
 800644e:	e011      	b.n	8006474 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006450:	f7fd fc30 	bl	8003cb4 <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	429a      	cmp	r2, r3
 800645e:	d803      	bhi.n	8006468 <HAL_SPI_Transmit+0x204>
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006466:	d102      	bne.n	800646e <HAL_SPI_Transmit+0x20a>
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d102      	bne.n	8006474 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006472:	e026      	b.n	80064c2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006478:	b29b      	uxth	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1cd      	bne.n	800641a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	6839      	ldr	r1, [r7, #0]
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f000 fa54 	bl	8006930 <SPI_EndRxTxTransaction>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2220      	movs	r2, #32
 8006492:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10a      	bne.n	80064b2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800649c:	2300      	movs	r3, #0
 800649e:	613b      	str	r3, [r7, #16]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	613b      	str	r3, [r7, #16]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	613b      	str	r3, [r7, #16]
 80064b0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	77fb      	strb	r3, [r7, #31]
 80064be:	e000      	b.n	80064c2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80064c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3720      	adds	r7, #32
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b08c      	sub	sp, #48	; 0x30
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
 80064e8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80064ea:	2301      	movs	r3, #1
 80064ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80064ee:	2300      	movs	r3, #0
 80064f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d101      	bne.n	8006502 <HAL_SPI_TransmitReceive+0x26>
 80064fe:	2302      	movs	r3, #2
 8006500:	e18a      	b.n	8006818 <HAL_SPI_TransmitReceive+0x33c>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800650a:	f7fd fbd3 	bl	8003cb4 <HAL_GetTick>
 800650e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006520:	887b      	ldrh	r3, [r7, #2]
 8006522:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006524:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006528:	2b01      	cmp	r3, #1
 800652a:	d00f      	beq.n	800654c <HAL_SPI_TransmitReceive+0x70>
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006532:	d107      	bne.n	8006544 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d103      	bne.n	8006544 <HAL_SPI_TransmitReceive+0x68>
 800653c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006540:	2b04      	cmp	r3, #4
 8006542:	d003      	beq.n	800654c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006544:	2302      	movs	r3, #2
 8006546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800654a:	e15b      	b.n	8006804 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d005      	beq.n	800655e <HAL_SPI_TransmitReceive+0x82>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d002      	beq.n	800655e <HAL_SPI_TransmitReceive+0x82>
 8006558:	887b      	ldrh	r3, [r7, #2]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d103      	bne.n	8006566 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006564:	e14e      	b.n	8006804 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b04      	cmp	r3, #4
 8006570:	d003      	beq.n	800657a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2205      	movs	r2, #5
 8006576:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	887a      	ldrh	r2, [r7, #2]
 800658a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	887a      	ldrh	r2, [r7, #2]
 8006590:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	887a      	ldrh	r2, [r7, #2]
 800659c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	887a      	ldrh	r2, [r7, #2]
 80065a2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ba:	2b40      	cmp	r3, #64	; 0x40
 80065bc:	d007      	beq.n	80065ce <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065d6:	d178      	bne.n	80066ca <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d002      	beq.n	80065e6 <HAL_SPI_TransmitReceive+0x10a>
 80065e0:	8b7b      	ldrh	r3, [r7, #26]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d166      	bne.n	80066b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ea:	881a      	ldrh	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f6:	1c9a      	adds	r2, r3, #2
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006600:	b29b      	uxth	r3, r3
 8006602:	3b01      	subs	r3, #1
 8006604:	b29a      	uxth	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800660a:	e053      	b.n	80066b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b02      	cmp	r3, #2
 8006618:	d11b      	bne.n	8006652 <HAL_SPI_TransmitReceive+0x176>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800661e:	b29b      	uxth	r3, r3
 8006620:	2b00      	cmp	r3, #0
 8006622:	d016      	beq.n	8006652 <HAL_SPI_TransmitReceive+0x176>
 8006624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006626:	2b01      	cmp	r3, #1
 8006628:	d113      	bne.n	8006652 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662e:	881a      	ldrh	r2, [r3, #0]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663a:	1c9a      	adds	r2, r3, #2
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006644:	b29b      	uxth	r3, r3
 8006646:	3b01      	subs	r3, #1
 8006648:	b29a      	uxth	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800664e:	2300      	movs	r3, #0
 8006650:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	2b01      	cmp	r3, #1
 800665e:	d119      	bne.n	8006694 <HAL_SPI_TransmitReceive+0x1b8>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006664:	b29b      	uxth	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d014      	beq.n	8006694 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68da      	ldr	r2, [r3, #12]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006674:	b292      	uxth	r2, r2
 8006676:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667c:	1c9a      	adds	r2, r3, #2
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006686:	b29b      	uxth	r3, r3
 8006688:	3b01      	subs	r3, #1
 800668a:	b29a      	uxth	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006690:	2301      	movs	r3, #1
 8006692:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006694:	f7fd fb0e 	bl	8003cb4 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d807      	bhi.n	80066b4 <HAL_SPI_TransmitReceive+0x1d8>
 80066a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066aa:	d003      	beq.n	80066b4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80066b2:	e0a7      	b.n	8006804 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1a6      	bne.n	800660c <HAL_SPI_TransmitReceive+0x130>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1a1      	bne.n	800660c <HAL_SPI_TransmitReceive+0x130>
 80066c8:	e07c      	b.n	80067c4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <HAL_SPI_TransmitReceive+0x1fc>
 80066d2:	8b7b      	ldrh	r3, [r7, #26]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d16b      	bne.n	80067b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	330c      	adds	r3, #12
 80066e2:	7812      	ldrb	r2, [r2, #0]
 80066e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ea:	1c5a      	adds	r2, r3, #1
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	3b01      	subs	r3, #1
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066fe:	e057      	b.n	80067b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f003 0302 	and.w	r3, r3, #2
 800670a:	2b02      	cmp	r3, #2
 800670c:	d11c      	bne.n	8006748 <HAL_SPI_TransmitReceive+0x26c>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006712:	b29b      	uxth	r3, r3
 8006714:	2b00      	cmp	r3, #0
 8006716:	d017      	beq.n	8006748 <HAL_SPI_TransmitReceive+0x26c>
 8006718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671a:	2b01      	cmp	r3, #1
 800671c:	d114      	bne.n	8006748 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	330c      	adds	r3, #12
 8006728:	7812      	ldrb	r2, [r2, #0]
 800672a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006730:	1c5a      	adds	r2, r3, #1
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800673a:	b29b      	uxth	r3, r3
 800673c:	3b01      	subs	r3, #1
 800673e:	b29a      	uxth	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006744:	2300      	movs	r3, #0
 8006746:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b01      	cmp	r3, #1
 8006754:	d119      	bne.n	800678a <HAL_SPI_TransmitReceive+0x2ae>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800675a:	b29b      	uxth	r3, r3
 800675c:	2b00      	cmp	r3, #0
 800675e:	d014      	beq.n	800678a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676a:	b2d2      	uxtb	r2, r2
 800676c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006772:	1c5a      	adds	r2, r3, #1
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800677c:	b29b      	uxth	r3, r3
 800677e:	3b01      	subs	r3, #1
 8006780:	b29a      	uxth	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006786:	2301      	movs	r3, #1
 8006788:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800678a:	f7fd fa93 	bl	8003cb4 <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006796:	429a      	cmp	r2, r3
 8006798:	d803      	bhi.n	80067a2 <HAL_SPI_TransmitReceive+0x2c6>
 800679a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a0:	d102      	bne.n	80067a8 <HAL_SPI_TransmitReceive+0x2cc>
 80067a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d103      	bne.n	80067b0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80067ae:	e029      	b.n	8006804 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1a2      	bne.n	8006700 <HAL_SPI_TransmitReceive+0x224>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067be:	b29b      	uxth	r3, r3
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d19d      	bne.n	8006700 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 f8b1 	bl	8006930 <SPI_EndRxTxTransaction>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d006      	beq.n	80067e2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2220      	movs	r2, #32
 80067de:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80067e0:	e010      	b.n	8006804 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10b      	bne.n	8006802 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067ea:	2300      	movs	r3, #0
 80067ec:	617b      	str	r3, [r7, #20]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	617b      	str	r3, [r7, #20]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	617b      	str	r3, [r7, #20]
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	e000      	b.n	8006804 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006802:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006814:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006818:	4618      	mov	r0, r3
 800681a:	3730      	adds	r7, #48	; 0x30
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b088      	sub	sp, #32
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	603b      	str	r3, [r7, #0]
 800682c:	4613      	mov	r3, r2
 800682e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006830:	f7fd fa40 	bl	8003cb4 <HAL_GetTick>
 8006834:	4602      	mov	r2, r0
 8006836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006838:	1a9b      	subs	r3, r3, r2
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	4413      	add	r3, r2
 800683e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006840:	f7fd fa38 	bl	8003cb4 <HAL_GetTick>
 8006844:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006846:	4b39      	ldr	r3, [pc, #228]	; (800692c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	015b      	lsls	r3, r3, #5
 800684c:	0d1b      	lsrs	r3, r3, #20
 800684e:	69fa      	ldr	r2, [r7, #28]
 8006850:	fb02 f303 	mul.w	r3, r2, r3
 8006854:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006856:	e054      	b.n	8006902 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685e:	d050      	beq.n	8006902 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006860:	f7fd fa28 	bl	8003cb4 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	69fa      	ldr	r2, [r7, #28]
 800686c:	429a      	cmp	r2, r3
 800686e:	d902      	bls.n	8006876 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d13d      	bne.n	80068f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006884:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800688e:	d111      	bne.n	80068b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006898:	d004      	beq.n	80068a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068a2:	d107      	bne.n	80068b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068bc:	d10f      	bne.n	80068de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068cc:	601a      	str	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e017      	b.n	8006922 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d101      	bne.n	80068fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80068f8:	2300      	movs	r3, #0
 80068fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	3b01      	subs	r3, #1
 8006900:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	689a      	ldr	r2, [r3, #8]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	4013      	ands	r3, r2
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	429a      	cmp	r2, r3
 8006910:	bf0c      	ite	eq
 8006912:	2301      	moveq	r3, #1
 8006914:	2300      	movne	r3, #0
 8006916:	b2db      	uxtb	r3, r3
 8006918:	461a      	mov	r2, r3
 800691a:	79fb      	ldrb	r3, [r7, #7]
 800691c:	429a      	cmp	r2, r3
 800691e:	d19b      	bne.n	8006858 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3720      	adds	r7, #32
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	2000006c 	.word	0x2000006c

08006930 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af02      	add	r7, sp, #8
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	2200      	movs	r2, #0
 8006944:	2180      	movs	r1, #128	; 0x80
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f7ff ff6a 	bl	8006820 <SPI_WaitFlagStateUntilTimeout>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d007      	beq.n	8006962 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006956:	f043 0220 	orr.w	r2, r3, #32
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e000      	b.n	8006964 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e041      	b.n	8006a02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d106      	bne.n	8006998 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7fc ff8e 	bl	80038b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2202      	movs	r2, #2
 800699c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	3304      	adds	r3, #4
 80069a8:	4619      	mov	r1, r3
 80069aa:	4610      	mov	r0, r2
 80069ac:	f000 f8f2 	bl	8006b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b084      	sub	sp, #16
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
 8006a12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d101      	bne.n	8006a22 <HAL_TIM_ConfigClockSource+0x18>
 8006a1e:	2302      	movs	r3, #2
 8006a20:	e0b3      	b.n	8006b8a <HAL_TIM_ConfigClockSource+0x180>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a40:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a48:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a5a:	d03e      	beq.n	8006ada <HAL_TIM_ConfigClockSource+0xd0>
 8006a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a60:	f200 8087 	bhi.w	8006b72 <HAL_TIM_ConfigClockSource+0x168>
 8006a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a68:	f000 8085 	beq.w	8006b76 <HAL_TIM_ConfigClockSource+0x16c>
 8006a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a70:	d87f      	bhi.n	8006b72 <HAL_TIM_ConfigClockSource+0x168>
 8006a72:	2b70      	cmp	r3, #112	; 0x70
 8006a74:	d01a      	beq.n	8006aac <HAL_TIM_ConfigClockSource+0xa2>
 8006a76:	2b70      	cmp	r3, #112	; 0x70
 8006a78:	d87b      	bhi.n	8006b72 <HAL_TIM_ConfigClockSource+0x168>
 8006a7a:	2b60      	cmp	r3, #96	; 0x60
 8006a7c:	d050      	beq.n	8006b20 <HAL_TIM_ConfigClockSource+0x116>
 8006a7e:	2b60      	cmp	r3, #96	; 0x60
 8006a80:	d877      	bhi.n	8006b72 <HAL_TIM_ConfigClockSource+0x168>
 8006a82:	2b50      	cmp	r3, #80	; 0x50
 8006a84:	d03c      	beq.n	8006b00 <HAL_TIM_ConfigClockSource+0xf6>
 8006a86:	2b50      	cmp	r3, #80	; 0x50
 8006a88:	d873      	bhi.n	8006b72 <HAL_TIM_ConfigClockSource+0x168>
 8006a8a:	2b40      	cmp	r3, #64	; 0x40
 8006a8c:	d058      	beq.n	8006b40 <HAL_TIM_ConfigClockSource+0x136>
 8006a8e:	2b40      	cmp	r3, #64	; 0x40
 8006a90:	d86f      	bhi.n	8006b72 <HAL_TIM_ConfigClockSource+0x168>
 8006a92:	2b30      	cmp	r3, #48	; 0x30
 8006a94:	d064      	beq.n	8006b60 <HAL_TIM_ConfigClockSource+0x156>
 8006a96:	2b30      	cmp	r3, #48	; 0x30
 8006a98:	d86b      	bhi.n	8006b72 <HAL_TIM_ConfigClockSource+0x168>
 8006a9a:	2b20      	cmp	r3, #32
 8006a9c:	d060      	beq.n	8006b60 <HAL_TIM_ConfigClockSource+0x156>
 8006a9e:	2b20      	cmp	r3, #32
 8006aa0:	d867      	bhi.n	8006b72 <HAL_TIM_ConfigClockSource+0x168>
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d05c      	beq.n	8006b60 <HAL_TIM_ConfigClockSource+0x156>
 8006aa6:	2b10      	cmp	r3, #16
 8006aa8:	d05a      	beq.n	8006b60 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006aaa:	e062      	b.n	8006b72 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6818      	ldr	r0, [r3, #0]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	6899      	ldr	r1, [r3, #8]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685a      	ldr	r2, [r3, #4]
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	f000 f943 	bl	8006d46 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ace:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	609a      	str	r2, [r3, #8]
      break;
 8006ad8:	e04e      	b.n	8006b78 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6818      	ldr	r0, [r3, #0]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	6899      	ldr	r1, [r3, #8]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	685a      	ldr	r2, [r3, #4]
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	f000 f92c 	bl	8006d46 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689a      	ldr	r2, [r3, #8]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006afc:	609a      	str	r2, [r3, #8]
      break;
 8006afe:	e03b      	b.n	8006b78 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6818      	ldr	r0, [r3, #0]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	6859      	ldr	r1, [r3, #4]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	f000 f8a3 	bl	8006c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2150      	movs	r1, #80	; 0x50
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f000 f8fa 	bl	8006d12 <TIM_ITRx_SetConfig>
      break;
 8006b1e:	e02b      	b.n	8006b78 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6818      	ldr	r0, [r3, #0]
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	6859      	ldr	r1, [r3, #4]
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	f000 f8c1 	bl	8006cb4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2160      	movs	r1, #96	; 0x60
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f000 f8ea 	bl	8006d12 <TIM_ITRx_SetConfig>
      break;
 8006b3e:	e01b      	b.n	8006b78 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6818      	ldr	r0, [r3, #0]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	6859      	ldr	r1, [r3, #4]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	f000 f883 	bl	8006c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2140      	movs	r1, #64	; 0x40
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f000 f8da 	bl	8006d12 <TIM_ITRx_SetConfig>
      break;
 8006b5e:	e00b      	b.n	8006b78 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4619      	mov	r1, r3
 8006b6a:	4610      	mov	r0, r2
 8006b6c:	f000 f8d1 	bl	8006d12 <TIM_ITRx_SetConfig>
        break;
 8006b70:	e002      	b.n	8006b78 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006b72:	bf00      	nop
 8006b74:	e000      	b.n	8006b78 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006b76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
	...

08006b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a29      	ldr	r2, [pc, #164]	; (8006c4c <TIM_Base_SetConfig+0xb8>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d00b      	beq.n	8006bc4 <TIM_Base_SetConfig+0x30>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bb2:	d007      	beq.n	8006bc4 <TIM_Base_SetConfig+0x30>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a26      	ldr	r2, [pc, #152]	; (8006c50 <TIM_Base_SetConfig+0xbc>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d003      	beq.n	8006bc4 <TIM_Base_SetConfig+0x30>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a25      	ldr	r2, [pc, #148]	; (8006c54 <TIM_Base_SetConfig+0xc0>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d108      	bne.n	8006bd6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a1c      	ldr	r2, [pc, #112]	; (8006c4c <TIM_Base_SetConfig+0xb8>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d00b      	beq.n	8006bf6 <TIM_Base_SetConfig+0x62>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006be4:	d007      	beq.n	8006bf6 <TIM_Base_SetConfig+0x62>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a19      	ldr	r2, [pc, #100]	; (8006c50 <TIM_Base_SetConfig+0xbc>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d003      	beq.n	8006bf6 <TIM_Base_SetConfig+0x62>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a18      	ldr	r2, [pc, #96]	; (8006c54 <TIM_Base_SetConfig+0xc0>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d108      	bne.n	8006c08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	689a      	ldr	r2, [r3, #8]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a07      	ldr	r2, [pc, #28]	; (8006c4c <TIM_Base_SetConfig+0xb8>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d103      	bne.n	8006c3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	691a      	ldr	r2, [r3, #16]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	615a      	str	r2, [r3, #20]
}
 8006c42:	bf00      	nop
 8006c44:	3714      	adds	r7, #20
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bc80      	pop	{r7}
 8006c4a:	4770      	bx	lr
 8006c4c:	40012c00 	.word	0x40012c00
 8006c50:	40000400 	.word	0x40000400
 8006c54:	40000800 	.word	0x40000800

08006c58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b087      	sub	sp, #28
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	f023 0201 	bic.w	r2, r3, #1
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	011b      	lsls	r3, r3, #4
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f023 030a 	bic.w	r3, r3, #10
 8006c94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	621a      	str	r2, [r3, #32]
}
 8006caa:	bf00      	nop
 8006cac:	371c      	adds	r7, #28
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bc80      	pop	{r7}
 8006cb2:	4770      	bx	lr

08006cb4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b087      	sub	sp, #28
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6a1b      	ldr	r3, [r3, #32]
 8006cc4:	f023 0210 	bic.w	r2, r3, #16
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cde:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	031b      	lsls	r3, r3, #12
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cf0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	011b      	lsls	r3, r3, #4
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	621a      	str	r2, [r3, #32]
}
 8006d08:	bf00      	nop
 8006d0a:	371c      	adds	r7, #28
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bc80      	pop	{r7}
 8006d10:	4770      	bx	lr

08006d12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d12:	b480      	push	{r7}
 8006d14:	b085      	sub	sp, #20
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	f043 0307 	orr.w	r3, r3, #7
 8006d34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	609a      	str	r2, [r3, #8]
}
 8006d3c:	bf00      	nop
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bc80      	pop	{r7}
 8006d44:	4770      	bx	lr

08006d46 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b087      	sub	sp, #28
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	60f8      	str	r0, [r7, #12]
 8006d4e:	60b9      	str	r1, [r7, #8]
 8006d50:	607a      	str	r2, [r7, #4]
 8006d52:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d60:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	021a      	lsls	r2, r3, #8
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	431a      	orrs	r2, r3
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	609a      	str	r2, [r3, #8]
}
 8006d7a:	bf00      	nop
 8006d7c:	371c      	adds	r7, #28
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bc80      	pop	{r7}
 8006d82:	4770      	bx	lr

08006d84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d101      	bne.n	8006d9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d98:	2302      	movs	r3, #2
 8006d9a:	e046      	b.n	8006e2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2202      	movs	r2, #2
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a16      	ldr	r2, [pc, #88]	; (8006e34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d00e      	beq.n	8006dfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006de8:	d009      	beq.n	8006dfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a12      	ldr	r2, [pc, #72]	; (8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d004      	beq.n	8006dfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a10      	ldr	r2, [pc, #64]	; (8006e3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d10c      	bne.n	8006e18 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bc80      	pop	{r7}
 8006e32:	4770      	bx	lr
 8006e34:	40012c00 	.word	0x40012c00
 8006e38:	40000400 	.word	0x40000400
 8006e3c:	40000800 	.word	0x40000800

08006e40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e03f      	b.n	8006ed2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d106      	bne.n	8006e6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f7fc fd42 	bl	80038f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2224      	movs	r2, #36	; 0x24
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68da      	ldr	r2, [r3, #12]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 fd47 	bl	8007918 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	691a      	ldr	r2, [r3, #16]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	695a      	ldr	r2, [r3, #20]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ea8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68da      	ldr	r2, [r3, #12]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006eb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2220      	movs	r2, #32
 8006ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
	...

08006edc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b20      	cmp	r3, #32
 8006ef4:	d153      	bne.n	8006f9e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <HAL_UART_Transmit_DMA+0x26>
 8006efc:	88fb      	ldrh	r3, [r7, #6]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e04c      	b.n	8006fa0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d101      	bne.n	8006f14 <HAL_UART_Transmit_DMA+0x38>
 8006f10:	2302      	movs	r3, #2
 8006f12:	e045      	b.n	8006fa0 <HAL_UART_Transmit_DMA+0xc4>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	88fa      	ldrh	r2, [r7, #6]
 8006f26:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	88fa      	ldrh	r2, [r7, #6]
 8006f2c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2221      	movs	r2, #33	; 0x21
 8006f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f40:	4a19      	ldr	r2, [pc, #100]	; (8006fa8 <HAL_UART_Transmit_DMA+0xcc>)
 8006f42:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f48:	4a18      	ldr	r2, [pc, #96]	; (8006fac <HAL_UART_Transmit_DMA+0xd0>)
 8006f4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f50:	4a17      	ldr	r2, [pc, #92]	; (8006fb0 <HAL_UART_Transmit_DMA+0xd4>)
 8006f52:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f58:	2200      	movs	r2, #0
 8006f5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8006f5c:	f107 0308 	add.w	r3, r7, #8
 8006f60:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	6819      	ldr	r1, [r3, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	3304      	adds	r3, #4
 8006f70:	461a      	mov	r2, r3
 8006f72:	88fb      	ldrh	r3, [r7, #6]
 8006f74:	f7fd f834 	bl	8003fe0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f80:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	695a      	ldr	r2, [r3, #20]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006f98:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	e000      	b.n	8006fa0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8006f9e:	2302      	movs	r3, #2
  }
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3718      	adds	r7, #24
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	080073b5 	.word	0x080073b5
 8006fac:	08007407 	.word	0x08007407
 8006fb0:	080074ef 	.word	0x080074ef

08006fb4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b20      	cmp	r3, #32
 8006fcc:	d11d      	bne.n	800700a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d002      	beq.n	8006fda <HAL_UART_Receive_DMA+0x26>
 8006fd4:	88fb      	ldrh	r3, [r7, #6]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e016      	b.n	800700c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d101      	bne.n	8006fec <HAL_UART_Receive_DMA+0x38>
 8006fe8:	2302      	movs	r3, #2
 8006fea:	e00f      	b.n	800700c <HAL_UART_Receive_DMA+0x58>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8006ffa:	88fb      	ldrh	r3, [r7, #6]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	68b9      	ldr	r1, [r7, #8]
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f000 fabf 	bl	8007584 <UART_Start_Receive_DMA>
 8007006:	4603      	mov	r3, r0
 8007008:	e000      	b.n	800700c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800700a:	2302      	movs	r3, #2
  }
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b08a      	sub	sp, #40	; 0x28
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007034:	2300      	movs	r3, #0
 8007036:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007038:	2300      	movs	r3, #0
 800703a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800703c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703e:	f003 030f 	and.w	r3, r3, #15
 8007042:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10d      	bne.n	8007066 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704c:	f003 0320 	and.w	r3, r3, #32
 8007050:	2b00      	cmp	r3, #0
 8007052:	d008      	beq.n	8007066 <HAL_UART_IRQHandler+0x52>
 8007054:	6a3b      	ldr	r3, [r7, #32]
 8007056:	f003 0320 	and.w	r3, r3, #32
 800705a:	2b00      	cmp	r3, #0
 800705c:	d003      	beq.n	8007066 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fbb0 	bl	80077c4 <UART_Receive_IT>
      return;
 8007064:	e17b      	b.n	800735e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	2b00      	cmp	r3, #0
 800706a:	f000 80b1 	beq.w	80071d0 <HAL_UART_IRQHandler+0x1bc>
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	2b00      	cmp	r3, #0
 8007076:	d105      	bne.n	8007084 <HAL_UART_IRQHandler+0x70>
 8007078:	6a3b      	ldr	r3, [r7, #32]
 800707a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800707e:	2b00      	cmp	r3, #0
 8007080:	f000 80a6 	beq.w	80071d0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00a      	beq.n	80070a4 <HAL_UART_IRQHandler+0x90>
 800708e:	6a3b      	ldr	r3, [r7, #32]
 8007090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007094:	2b00      	cmp	r3, #0
 8007096:	d005      	beq.n	80070a4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709c:	f043 0201 	orr.w	r2, r3, #1
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	f003 0304 	and.w	r3, r3, #4
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00a      	beq.n	80070c4 <HAL_UART_IRQHandler+0xb0>
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	f003 0301 	and.w	r3, r3, #1
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d005      	beq.n	80070c4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070bc:	f043 0202 	orr.w	r2, r3, #2
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c6:	f003 0302 	and.w	r3, r3, #2
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00a      	beq.n	80070e4 <HAL_UART_IRQHandler+0xd0>
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	f003 0301 	and.w	r3, r3, #1
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d005      	beq.n	80070e4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070dc:	f043 0204 	orr.w	r2, r3, #4
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	f003 0308 	and.w	r3, r3, #8
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00f      	beq.n	800710e <HAL_UART_IRQHandler+0xfa>
 80070ee:	6a3b      	ldr	r3, [r7, #32]
 80070f0:	f003 0320 	and.w	r3, r3, #32
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d104      	bne.n	8007102 <HAL_UART_IRQHandler+0xee>
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d005      	beq.n	800710e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007106:	f043 0208 	orr.w	r2, r3, #8
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007112:	2b00      	cmp	r3, #0
 8007114:	f000 811e 	beq.w	8007354 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711a:	f003 0320 	and.w	r3, r3, #32
 800711e:	2b00      	cmp	r3, #0
 8007120:	d007      	beq.n	8007132 <HAL_UART_IRQHandler+0x11e>
 8007122:	6a3b      	ldr	r3, [r7, #32]
 8007124:	f003 0320 	and.w	r3, r3, #32
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 fb49 	bl	80077c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713c:	2b00      	cmp	r3, #0
 800713e:	bf14      	ite	ne
 8007140:	2301      	movne	r3, #1
 8007142:	2300      	moveq	r3, #0
 8007144:	b2db      	uxtb	r3, r3
 8007146:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714c:	f003 0308 	and.w	r3, r3, #8
 8007150:	2b00      	cmp	r3, #0
 8007152:	d102      	bne.n	800715a <HAL_UART_IRQHandler+0x146>
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d031      	beq.n	80071be <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fa8b 	bl	8007676 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800716a:	2b00      	cmp	r3, #0
 800716c:	d023      	beq.n	80071b6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	695a      	ldr	r2, [r3, #20]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800717c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007182:	2b00      	cmp	r3, #0
 8007184:	d013      	beq.n	80071ae <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718a:	4a76      	ldr	r2, [pc, #472]	; (8007364 <HAL_UART_IRQHandler+0x350>)
 800718c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007192:	4618      	mov	r0, r3
 8007194:	f7fc ffbe 	bl	8004114 <HAL_DMA_Abort_IT>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d016      	beq.n	80071cc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80071a8:	4610      	mov	r0, r2
 80071aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ac:	e00e      	b.n	80071cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f8ec 	bl	800738c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071b4:	e00a      	b.n	80071cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f8e8 	bl	800738c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071bc:	e006      	b.n	80071cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f8e4 	bl	800738c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80071ca:	e0c3      	b.n	8007354 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071cc:	bf00      	nop
    return;
 80071ce:	e0c1      	b.n	8007354 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	f040 80a1 	bne.w	800731c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80071da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071dc:	f003 0310 	and.w	r3, r3, #16
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 809b 	beq.w	800731c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80071e6:	6a3b      	ldr	r3, [r7, #32]
 80071e8:	f003 0310 	and.w	r3, r3, #16
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f000 8095 	beq.w	800731c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071f2:	2300      	movs	r3, #0
 80071f4:	60fb      	str	r3, [r7, #12]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	60fb      	str	r3, [r7, #12]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	60fb      	str	r3, [r7, #12]
 8007206:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007212:	2b00      	cmp	r3, #0
 8007214:	d04e      	beq.n	80072b4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007220:	8a3b      	ldrh	r3, [r7, #16]
 8007222:	2b00      	cmp	r3, #0
 8007224:	f000 8098 	beq.w	8007358 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800722c:	8a3a      	ldrh	r2, [r7, #16]
 800722e:	429a      	cmp	r2, r3
 8007230:	f080 8092 	bcs.w	8007358 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	8a3a      	ldrh	r2, [r7, #16]
 8007238:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	2b20      	cmp	r3, #32
 8007242:	d02b      	beq.n	800729c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68da      	ldr	r2, [r3, #12]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007252:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	695a      	ldr	r2, [r3, #20]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f022 0201 	bic.w	r2, r2, #1
 8007262:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	695a      	ldr	r2, [r3, #20]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007272:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2220      	movs	r2, #32
 8007278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68da      	ldr	r2, [r3, #12]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f022 0210 	bic.w	r2, r2, #16
 8007290:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007296:	4618      	mov	r0, r3
 8007298:	f7fc ff01 	bl	800409e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	4619      	mov	r1, r3
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f876 	bl	800739e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80072b2:	e051      	b.n	8007358 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072bc:	b29b      	uxth	r3, r3
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d047      	beq.n	800735c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80072cc:	8a7b      	ldrh	r3, [r7, #18]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d044      	beq.n	800735c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68da      	ldr	r2, [r3, #12]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80072e0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	695a      	ldr	r2, [r3, #20]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 0201 	bic.w	r2, r2, #1
 80072f0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2220      	movs	r2, #32
 80072f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68da      	ldr	r2, [r3, #12]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f022 0210 	bic.w	r2, r2, #16
 800730e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007310:	8a7b      	ldrh	r3, [r7, #18]
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f842 	bl	800739e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800731a:	e01f      	b.n	800735c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007322:	2b00      	cmp	r3, #0
 8007324:	d008      	beq.n	8007338 <HAL_UART_IRQHandler+0x324>
 8007326:	6a3b      	ldr	r3, [r7, #32]
 8007328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800732c:	2b00      	cmp	r3, #0
 800732e:	d003      	beq.n	8007338 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 f9e0 	bl	80076f6 <UART_Transmit_IT>
    return;
 8007336:	e012      	b.n	800735e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00d      	beq.n	800735e <HAL_UART_IRQHandler+0x34a>
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007348:	2b00      	cmp	r3, #0
 800734a:	d008      	beq.n	800735e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 fa21 	bl	8007794 <UART_EndTransmit_IT>
    return;
 8007352:	e004      	b.n	800735e <HAL_UART_IRQHandler+0x34a>
    return;
 8007354:	bf00      	nop
 8007356:	e002      	b.n	800735e <HAL_UART_IRQHandler+0x34a>
      return;
 8007358:	bf00      	nop
 800735a:	e000      	b.n	800735e <HAL_UART_IRQHandler+0x34a>
      return;
 800735c:	bf00      	nop
  }
}
 800735e:	3728      	adds	r7, #40	; 0x28
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	080076cf 	.word	0x080076cf

08007368 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	bc80      	pop	{r7}
 8007378:	4770      	bx	lr

0800737a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800737a:	b480      	push	{r7}
 800737c:	b083      	sub	sp, #12
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007382:	bf00      	nop
 8007384:	370c      	adds	r7, #12
 8007386:	46bd      	mov	sp, r7
 8007388:	bc80      	pop	{r7}
 800738a:	4770      	bx	lr

0800738c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	bc80      	pop	{r7}
 800739c:	4770      	bx	lr

0800739e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800739e:	b480      	push	{r7}
 80073a0:	b083      	sub	sp, #12
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
 80073a6:	460b      	mov	r3, r1
 80073a8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073aa:	bf00      	nop
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bc80      	pop	{r7}
 80073b2:	4770      	bx	lr

080073b4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0320 	and.w	r3, r3, #32
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d113      	bne.n	80073f8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	695a      	ldr	r2, [r3, #20]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073e4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68da      	ldr	r2, [r3, #12]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073f4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80073f6:	e002      	b.n	80073fe <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f7fc f90b 	bl	8003614 <HAL_UART_TxCpltCallback>
}
 80073fe:	bf00      	nop
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b084      	sub	sp, #16
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007412:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f7ff ffa7 	bl	8007368 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800741a:	bf00      	nop
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b084      	sub	sp, #16
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0320 	and.w	r3, r3, #32
 800743a:	2b00      	cmp	r3, #0
 800743c:	d12a      	bne.n	8007494 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68da      	ldr	r2, [r3, #12]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007452:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	695a      	ldr	r2, [r3, #20]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f022 0201 	bic.w	r2, r2, #1
 8007462:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	695a      	ldr	r2, [r3, #20]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007472:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2220      	movs	r2, #32
 8007478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007480:	2b01      	cmp	r3, #1
 8007482:	d107      	bne.n	8007494 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68da      	ldr	r2, [r3, #12]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f022 0210 	bic.w	r2, r2, #16
 8007492:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007498:	2b01      	cmp	r3, #1
 800749a:	d106      	bne.n	80074aa <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80074a0:	4619      	mov	r1, r3
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f7ff ff7b 	bl	800739e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80074a8:	e002      	b.n	80074b0 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f7fc f8ea 	bl	8003684 <HAL_UART_RxCpltCallback>
}
 80074b0:	bf00      	nop
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d108      	bne.n	80074e0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80074d2:	085b      	lsrs	r3, r3, #1
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	4619      	mov	r1, r3
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f7ff ff60 	bl	800739e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80074de:	e002      	b.n	80074e6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	f7ff ff4a 	bl	800737a <HAL_UART_RxHalfCpltCallback>
}
 80074e6:	bf00      	nop
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b084      	sub	sp, #16
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80074f6:	2300      	movs	r3, #0
 80074f8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800750a:	2b00      	cmp	r3, #0
 800750c:	bf14      	ite	ne
 800750e:	2301      	movne	r3, #1
 8007510:	2300      	moveq	r3, #0
 8007512:	b2db      	uxtb	r3, r3
 8007514:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800751c:	b2db      	uxtb	r3, r3
 800751e:	2b21      	cmp	r3, #33	; 0x21
 8007520:	d108      	bne.n	8007534 <UART_DMAError+0x46>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d005      	beq.n	8007534 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	2200      	movs	r2, #0
 800752c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800752e:	68b8      	ldr	r0, [r7, #8]
 8007530:	f000 f88c 	bl	800764c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753e:	2b00      	cmp	r3, #0
 8007540:	bf14      	ite	ne
 8007542:	2301      	movne	r3, #1
 8007544:	2300      	moveq	r3, #0
 8007546:	b2db      	uxtb	r3, r3
 8007548:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007550:	b2db      	uxtb	r3, r3
 8007552:	2b22      	cmp	r3, #34	; 0x22
 8007554:	d108      	bne.n	8007568 <UART_DMAError+0x7a>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d005      	beq.n	8007568 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2200      	movs	r2, #0
 8007560:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007562:	68b8      	ldr	r0, [r7, #8]
 8007564:	f000 f887 	bl	8007676 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756c:	f043 0210 	orr.w	r2, r3, #16
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007574:	68b8      	ldr	r0, [r7, #8]
 8007576:	f7ff ff09 	bl	800738c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800757a:	bf00      	nop
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
	...

08007584 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b086      	sub	sp, #24
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	4613      	mov	r3, r2
 8007590:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	88fa      	ldrh	r2, [r7, #6]
 800759c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2222      	movs	r2, #34	; 0x22
 80075a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b0:	4a23      	ldr	r2, [pc, #140]	; (8007640 <UART_Start_Receive_DMA+0xbc>)
 80075b2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b8:	4a22      	ldr	r2, [pc, #136]	; (8007644 <UART_Start_Receive_DMA+0xc0>)
 80075ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c0:	4a21      	ldr	r2, [pc, #132]	; (8007648 <UART_Start_Receive_DMA+0xc4>)
 80075c2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c8:	2200      	movs	r2, #0
 80075ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80075cc:	f107 0308 	add.w	r3, r7, #8
 80075d0:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	3304      	adds	r3, #4
 80075dc:	4619      	mov	r1, r3
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	88fb      	ldrh	r3, [r7, #6]
 80075e4:	f7fc fcfc 	bl	8003fe0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80075e8:	2300      	movs	r3, #0
 80075ea:	613b      	str	r3, [r7, #16]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	613b      	str	r3, [r7, #16]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	613b      	str	r3, [r7, #16]
 80075fc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68da      	ldr	r2, [r3, #12]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007614:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	695a      	ldr	r2, [r3, #20]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f042 0201 	orr.w	r2, r2, #1
 8007624:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	695a      	ldr	r2, [r3, #20]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007634:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3718      	adds	r7, #24
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	08007423 	.word	0x08007423
 8007644:	080074b9 	.word	0x080074b9
 8007648:	080074ef 	.word	0x080074ef

0800764c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68da      	ldr	r2, [r3, #12]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007662:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2220      	movs	r2, #32
 8007668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800766c:	bf00      	nop
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	bc80      	pop	{r7}
 8007674:	4770      	bx	lr

08007676 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007676:	b480      	push	{r7}
 8007678:	b083      	sub	sp, #12
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68da      	ldr	r2, [r3, #12]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800768c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	695a      	ldr	r2, [r3, #20]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f022 0201 	bic.w	r2, r2, #1
 800769c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d107      	bne.n	80076b6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68da      	ldr	r2, [r3, #12]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f022 0210 	bic.w	r2, r2, #16
 80076b4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2220      	movs	r2, #32
 80076ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bc80      	pop	{r7}
 80076cc:	4770      	bx	lr

080076ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b084      	sub	sp, #16
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f7ff fe4f 	bl	800738c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076ee:	bf00      	nop
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80076f6:	b480      	push	{r7}
 80076f8:	b085      	sub	sp, #20
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b21      	cmp	r3, #33	; 0x21
 8007708:	d13e      	bne.n	8007788 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007712:	d114      	bne.n	800773e <UART_Transmit_IT+0x48>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d110      	bne.n	800773e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a1b      	ldr	r3, [r3, #32]
 8007720:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	881b      	ldrh	r3, [r3, #0]
 8007726:	461a      	mov	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007730:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	1c9a      	adds	r2, r3, #2
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	621a      	str	r2, [r3, #32]
 800773c:	e008      	b.n	8007750 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a1b      	ldr	r3, [r3, #32]
 8007742:	1c59      	adds	r1, r3, #1
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	6211      	str	r1, [r2, #32]
 8007748:	781a      	ldrb	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007754:	b29b      	uxth	r3, r3
 8007756:	3b01      	subs	r3, #1
 8007758:	b29b      	uxth	r3, r3
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	4619      	mov	r1, r3
 800775e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10f      	bne.n	8007784 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68da      	ldr	r2, [r3, #12]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007772:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68da      	ldr	r2, [r3, #12]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007782:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007784:	2300      	movs	r3, #0
 8007786:	e000      	b.n	800778a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007788:	2302      	movs	r3, #2
  }
}
 800778a:	4618      	mov	r0, r3
 800778c:	3714      	adds	r7, #20
 800778e:	46bd      	mov	sp, r7
 8007790:	bc80      	pop	{r7}
 8007792:	4770      	bx	lr

08007794 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68da      	ldr	r2, [r3, #12]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2220      	movs	r2, #32
 80077b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f7fb ff2d 	bl	8003614 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b086      	sub	sp, #24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	2b22      	cmp	r3, #34	; 0x22
 80077d6:	f040 8099 	bne.w	800790c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077e2:	d117      	bne.n	8007814 <UART_Receive_IT+0x50>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d113      	bne.n	8007814 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80077ec:	2300      	movs	r3, #0
 80077ee:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007802:	b29a      	uxth	r2, r3
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780c:	1c9a      	adds	r2, r3, #2
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	629a      	str	r2, [r3, #40]	; 0x28
 8007812:	e026      	b.n	8007862 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007818:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800781a:	2300      	movs	r3, #0
 800781c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007826:	d007      	beq.n	8007838 <UART_Receive_IT+0x74>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10a      	bne.n	8007846 <UART_Receive_IT+0x82>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d106      	bne.n	8007846 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	b2da      	uxtb	r2, r3
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	701a      	strb	r2, [r3, #0]
 8007844:	e008      	b.n	8007858 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	b2db      	uxtb	r3, r3
 800784e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007852:	b2da      	uxtb	r2, r3
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785c:	1c5a      	adds	r2, r3, #1
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007866:	b29b      	uxth	r3, r3
 8007868:	3b01      	subs	r3, #1
 800786a:	b29b      	uxth	r3, r3
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	4619      	mov	r1, r3
 8007870:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007872:	2b00      	cmp	r3, #0
 8007874:	d148      	bne.n	8007908 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68da      	ldr	r2, [r3, #12]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f022 0220 	bic.w	r2, r2, #32
 8007884:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68da      	ldr	r2, [r3, #12]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007894:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	695a      	ldr	r2, [r3, #20]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f022 0201 	bic.w	r2, r2, #1
 80078a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2220      	movs	r2, #32
 80078aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d123      	bne.n	80078fe <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68da      	ldr	r2, [r3, #12]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f022 0210 	bic.w	r2, r2, #16
 80078ca:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 0310 	and.w	r3, r3, #16
 80078d6:	2b10      	cmp	r3, #16
 80078d8:	d10a      	bne.n	80078f0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078da:	2300      	movs	r3, #0
 80078dc:	60fb      	str	r3, [r7, #12]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	60fb      	str	r3, [r7, #12]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	60fb      	str	r3, [r7, #12]
 80078ee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80078f4:	4619      	mov	r1, r3
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7ff fd51 	bl	800739e <HAL_UARTEx_RxEventCallback>
 80078fc:	e002      	b.n	8007904 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7fb fec0 	bl	8003684 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007904:	2300      	movs	r3, #0
 8007906:	e002      	b.n	800790e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	e000      	b.n	800790e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800790c:	2302      	movs	r3, #2
  }
}
 800790e:	4618      	mov	r0, r3
 8007910:	3718      	adds	r7, #24
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
	...

08007918 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	68da      	ldr	r2, [r3, #12]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	430a      	orrs	r2, r1
 8007934:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	689a      	ldr	r2, [r3, #8]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	431a      	orrs	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	695b      	ldr	r3, [r3, #20]
 8007944:	4313      	orrs	r3, r2
 8007946:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007952:	f023 030c 	bic.w	r3, r3, #12
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	6812      	ldr	r2, [r2, #0]
 800795a:	68b9      	ldr	r1, [r7, #8]
 800795c:	430b      	orrs	r3, r1
 800795e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	699a      	ldr	r2, [r3, #24]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	430a      	orrs	r2, r1
 8007974:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a2c      	ldr	r2, [pc, #176]	; (8007a2c <UART_SetConfig+0x114>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d103      	bne.n	8007988 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007980:	f7fe fbba 	bl	80060f8 <HAL_RCC_GetPCLK2Freq>
 8007984:	60f8      	str	r0, [r7, #12]
 8007986:	e002      	b.n	800798e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007988:	f7fe fba2 	bl	80060d0 <HAL_RCC_GetPCLK1Freq>
 800798c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	4613      	mov	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	009a      	lsls	r2, r3, #2
 8007998:	441a      	add	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a4:	4a22      	ldr	r2, [pc, #136]	; (8007a30 <UART_SetConfig+0x118>)
 80079a6:	fba2 2303 	umull	r2, r3, r2, r3
 80079aa:	095b      	lsrs	r3, r3, #5
 80079ac:	0119      	lsls	r1, r3, #4
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	4613      	mov	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4413      	add	r3, r2
 80079b6:	009a      	lsls	r2, r3, #2
 80079b8:	441a      	add	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80079c4:	4b1a      	ldr	r3, [pc, #104]	; (8007a30 <UART_SetConfig+0x118>)
 80079c6:	fba3 0302 	umull	r0, r3, r3, r2
 80079ca:	095b      	lsrs	r3, r3, #5
 80079cc:	2064      	movs	r0, #100	; 0x64
 80079ce:	fb00 f303 	mul.w	r3, r0, r3
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	011b      	lsls	r3, r3, #4
 80079d6:	3332      	adds	r3, #50	; 0x32
 80079d8:	4a15      	ldr	r2, [pc, #84]	; (8007a30 <UART_SetConfig+0x118>)
 80079da:	fba2 2303 	umull	r2, r3, r2, r3
 80079de:	095b      	lsrs	r3, r3, #5
 80079e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079e4:	4419      	add	r1, r3
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	4613      	mov	r3, r2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4413      	add	r3, r2
 80079ee:	009a      	lsls	r2, r3, #2
 80079f0:	441a      	add	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80079fc:	4b0c      	ldr	r3, [pc, #48]	; (8007a30 <UART_SetConfig+0x118>)
 80079fe:	fba3 0302 	umull	r0, r3, r3, r2
 8007a02:	095b      	lsrs	r3, r3, #5
 8007a04:	2064      	movs	r0, #100	; 0x64
 8007a06:	fb00 f303 	mul.w	r3, r0, r3
 8007a0a:	1ad3      	subs	r3, r2, r3
 8007a0c:	011b      	lsls	r3, r3, #4
 8007a0e:	3332      	adds	r3, #50	; 0x32
 8007a10:	4a07      	ldr	r2, [pc, #28]	; (8007a30 <UART_SetConfig+0x118>)
 8007a12:	fba2 2303 	umull	r2, r3, r2, r3
 8007a16:	095b      	lsrs	r3, r3, #5
 8007a18:	f003 020f 	and.w	r2, r3, #15
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	440a      	add	r2, r1
 8007a22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007a24:	bf00      	nop
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	40013800 	.word	0x40013800
 8007a30:	51eb851f 	.word	0x51eb851f

08007a34 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007a38:	4904      	ldr	r1, [pc, #16]	; (8007a4c <MX_FATFS_Init+0x18>)
 8007a3a:	4805      	ldr	r0, [pc, #20]	; (8007a50 <MX_FATFS_Init+0x1c>)
 8007a3c:	f003 fc24 	bl	800b288 <FATFS_LinkDriver>
 8007a40:	4603      	mov	r3, r0
 8007a42:	461a      	mov	r2, r3
 8007a44:	4b03      	ldr	r3, [pc, #12]	; (8007a54 <MX_FATFS_Init+0x20>)
 8007a46:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8007a48:	bf00      	nop
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	20000c98 	.word	0x20000c98
 8007a50:	20000078 	.word	0x20000078
 8007a54:	20000c9c 	.word	0x20000c9c

08007a58 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007a5c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bc80      	pop	{r7}
 8007a64:	4770      	bx	lr

08007a66 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b082      	sub	sp, #8
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 8007a70:	79fb      	ldrb	r3, [r7, #7]
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7f9 f9ac 	bl	8000dd0 <SD_disk_initialize>
 8007a78:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b082      	sub	sp, #8
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	4603      	mov	r3, r0
 8007a8a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8007a8c:	79fb      	ldrb	r3, [r7, #7]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7f9 fa8a 	bl	8000fa8 <SD_disk_status>
 8007a94:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b084      	sub	sp, #16
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]
 8007aa8:	603b      	str	r3, [r7, #0]
 8007aaa:	4603      	mov	r3, r0
 8007aac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8007aae:	7bf8      	ldrb	r0, [r7, #15]
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	68b9      	ldr	r1, [r7, #8]
 8007ab6:	f7f9 fa8b 	bl	8000fd0 <SD_disk_read>
 8007aba:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60b9      	str	r1, [r7, #8]
 8007acc:	607a      	str	r2, [r7, #4]
 8007ace:	603b      	str	r3, [r7, #0]
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8007ad4:	7bf8      	ldrb	r0, [r7, #15]
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	68b9      	ldr	r1, [r7, #8]
 8007adc:	f7f9 fae2 	bl	80010a4 <SD_disk_write>
 8007ae0:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b082      	sub	sp, #8
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	4603      	mov	r3, r0
 8007af2:	603a      	str	r2, [r7, #0]
 8007af4:	71fb      	strb	r3, [r7, #7]
 8007af6:	460b      	mov	r3, r1
 8007af8:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8007afa:	79b9      	ldrb	r1, [r7, #6]
 8007afc:	79fb      	ldrb	r3, [r7, #7]
 8007afe:	683a      	ldr	r2, [r7, #0]
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7f9 fb53 	bl	80011ac <SD_disk_ioctl>
 8007b06:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	4603      	mov	r3, r0
 8007b18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007b1a:	79fb      	ldrb	r3, [r7, #7]
 8007b1c:	4a08      	ldr	r2, [pc, #32]	; (8007b40 <disk_status+0x30>)
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	4413      	add	r3, r2
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	79fa      	ldrb	r2, [r7, #7]
 8007b28:	4905      	ldr	r1, [pc, #20]	; (8007b40 <disk_status+0x30>)
 8007b2a:	440a      	add	r2, r1
 8007b2c:	7a12      	ldrb	r2, [r2, #8]
 8007b2e:	4610      	mov	r0, r2
 8007b30:	4798      	blx	r3
 8007b32:	4603      	mov	r3, r0
 8007b34:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3710      	adds	r7, #16
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	2000014c 	.word	0x2000014c

08007b44 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8007b52:	79fb      	ldrb	r3, [r7, #7]
 8007b54:	4a0d      	ldr	r2, [pc, #52]	; (8007b8c <disk_initialize+0x48>)
 8007b56:	5cd3      	ldrb	r3, [r2, r3]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d111      	bne.n	8007b80 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8007b5c:	79fb      	ldrb	r3, [r7, #7]
 8007b5e:	4a0b      	ldr	r2, [pc, #44]	; (8007b8c <disk_initialize+0x48>)
 8007b60:	2101      	movs	r1, #1
 8007b62:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007b64:	79fb      	ldrb	r3, [r7, #7]
 8007b66:	4a09      	ldr	r2, [pc, #36]	; (8007b8c <disk_initialize+0x48>)
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	79fa      	ldrb	r2, [r7, #7]
 8007b72:	4906      	ldr	r1, [pc, #24]	; (8007b8c <disk_initialize+0x48>)
 8007b74:	440a      	add	r2, r1
 8007b76:	7a12      	ldrb	r2, [r2, #8]
 8007b78:	4610      	mov	r0, r2
 8007b7a:	4798      	blx	r3
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	2000014c 	.word	0x2000014c

08007b90 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007b90:	b590      	push	{r4, r7, lr}
 8007b92:	b087      	sub	sp, #28
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60b9      	str	r1, [r7, #8]
 8007b98:	607a      	str	r2, [r7, #4]
 8007b9a:	603b      	str	r3, [r7, #0]
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007ba0:	7bfb      	ldrb	r3, [r7, #15]
 8007ba2:	4a0a      	ldr	r2, [pc, #40]	; (8007bcc <disk_read+0x3c>)
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4413      	add	r3, r2
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	689c      	ldr	r4, [r3, #8]
 8007bac:	7bfb      	ldrb	r3, [r7, #15]
 8007bae:	4a07      	ldr	r2, [pc, #28]	; (8007bcc <disk_read+0x3c>)
 8007bb0:	4413      	add	r3, r2
 8007bb2:	7a18      	ldrb	r0, [r3, #8]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	68b9      	ldr	r1, [r7, #8]
 8007bba:	47a0      	blx	r4
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	75fb      	strb	r3, [r7, #23]
  return res;
 8007bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	371c      	adds	r7, #28
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd90      	pop	{r4, r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	2000014c 	.word	0x2000014c

08007bd0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007bd0:	b590      	push	{r4, r7, lr}
 8007bd2:	b087      	sub	sp, #28
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60b9      	str	r1, [r7, #8]
 8007bd8:	607a      	str	r2, [r7, #4]
 8007bda:	603b      	str	r3, [r7, #0]
 8007bdc:	4603      	mov	r3, r0
 8007bde:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
 8007be2:	4a0a      	ldr	r2, [pc, #40]	; (8007c0c <disk_write+0x3c>)
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	4413      	add	r3, r2
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	68dc      	ldr	r4, [r3, #12]
 8007bec:	7bfb      	ldrb	r3, [r7, #15]
 8007bee:	4a07      	ldr	r2, [pc, #28]	; (8007c0c <disk_write+0x3c>)
 8007bf0:	4413      	add	r3, r2
 8007bf2:	7a18      	ldrb	r0, [r3, #8]
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	68b9      	ldr	r1, [r7, #8]
 8007bfa:	47a0      	blx	r4
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	75fb      	strb	r3, [r7, #23]
  return res;
 8007c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	371c      	adds	r7, #28
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd90      	pop	{r4, r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	2000014c 	.word	0x2000014c

08007c10 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	4603      	mov	r3, r0
 8007c18:	603a      	str	r2, [r7, #0]
 8007c1a:	71fb      	strb	r3, [r7, #7]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007c20:	79fb      	ldrb	r3, [r7, #7]
 8007c22:	4a09      	ldr	r2, [pc, #36]	; (8007c48 <disk_ioctl+0x38>)
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	4413      	add	r3, r2
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	79fa      	ldrb	r2, [r7, #7]
 8007c2e:	4906      	ldr	r1, [pc, #24]	; (8007c48 <disk_ioctl+0x38>)
 8007c30:	440a      	add	r2, r1
 8007c32:	7a10      	ldrb	r0, [r2, #8]
 8007c34:	79b9      	ldrb	r1, [r7, #6]
 8007c36:	683a      	ldr	r2, [r7, #0]
 8007c38:	4798      	blx	r3
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	73fb      	strb	r3, [r7, #15]
  return res;
 8007c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3710      	adds	r7, #16
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	2000014c 	.word	0x2000014c

08007c4c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007c4c:	b480      	push	{r7}
 8007c4e:	b087      	sub	sp, #28
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8007c60:	e007      	b.n	8007c72 <mem_cpy+0x26>
		*d++ = *s++;
 8007c62:	693a      	ldr	r2, [r7, #16]
 8007c64:	1c53      	adds	r3, r2, #1
 8007c66:	613b      	str	r3, [r7, #16]
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	1c59      	adds	r1, r3, #1
 8007c6c:	6179      	str	r1, [r7, #20]
 8007c6e:	7812      	ldrb	r2, [r2, #0]
 8007c70:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	1e5a      	subs	r2, r3, #1
 8007c76:	607a      	str	r2, [r7, #4]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1f2      	bne.n	8007c62 <mem_cpy+0x16>
}
 8007c7c:	bf00      	nop
 8007c7e:	bf00      	nop
 8007c80:	371c      	adds	r7, #28
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bc80      	pop	{r7}
 8007c86:	4770      	bx	lr

08007c88 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007c88:	b480      	push	{r7}
 8007c8a:	b087      	sub	sp, #28
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8007c98:	e005      	b.n	8007ca6 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	1c5a      	adds	r2, r3, #1
 8007c9e:	617a      	str	r2, [r7, #20]
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	b2d2      	uxtb	r2, r2
 8007ca4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	1e5a      	subs	r2, r3, #1
 8007caa:	607a      	str	r2, [r7, #4]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d1f4      	bne.n	8007c9a <mem_set+0x12>
}
 8007cb0:	bf00      	nop
 8007cb2:	bf00      	nop
 8007cb4:	371c      	adds	r7, #28
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bc80      	pop	{r7}
 8007cba:	4770      	bx	lr

08007cbc <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8007cbc:	b480      	push	{r7}
 8007cbe:	b089      	sub	sp, #36	; 0x24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	61fb      	str	r3, [r7, #28]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8007cd4:	bf00      	nop
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	1e5a      	subs	r2, r3, #1
 8007cda:	607a      	str	r2, [r7, #4]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00d      	beq.n	8007cfc <mem_cmp+0x40>
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	1c5a      	adds	r2, r3, #1
 8007ce4:	61fa      	str	r2, [r7, #28]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	4619      	mov	r1, r3
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	1c5a      	adds	r2, r3, #1
 8007cee:	61ba      	str	r2, [r7, #24]
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	1acb      	subs	r3, r1, r3
 8007cf4:	617b      	str	r3, [r7, #20]
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d0ec      	beq.n	8007cd6 <mem_cmp+0x1a>
	return r;
 8007cfc:	697b      	ldr	r3, [r7, #20]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3724      	adds	r7, #36	; 0x24
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bc80      	pop	{r7}
 8007d06:	4770      	bx	lr

08007d08 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007d12:	e002      	b.n	8007d1a <chk_chr+0x12>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	3301      	adds	r3, #1
 8007d18:	607b      	str	r3, [r7, #4]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d005      	beq.n	8007d2e <chk_chr+0x26>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	461a      	mov	r2, r3
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d1f2      	bne.n	8007d14 <chk_chr+0xc>
	return *str;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	781b      	ldrb	r3, [r3, #0]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	370c      	adds	r7, #12
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bc80      	pop	{r7}
 8007d3a:	4770      	bx	lr

08007d3c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007d46:	2300      	movs	r3, #0
 8007d48:	60bb      	str	r3, [r7, #8]
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	60fb      	str	r3, [r7, #12]
 8007d4e:	e038      	b.n	8007dc2 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8007d50:	492f      	ldr	r1, [pc, #188]	; (8007e10 <chk_lock+0xd4>)
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	4613      	mov	r3, r2
 8007d56:	005b      	lsls	r3, r3, #1
 8007d58:	4413      	add	r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	440b      	add	r3, r1
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d029      	beq.n	8007db8 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8007d64:	492a      	ldr	r1, [pc, #168]	; (8007e10 <chk_lock+0xd4>)
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	005b      	lsls	r3, r3, #1
 8007d6c:	4413      	add	r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	440b      	add	r3, r1
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d11e      	bne.n	8007dbc <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8007d7e:	4924      	ldr	r1, [pc, #144]	; (8007e10 <chk_lock+0xd4>)
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	4613      	mov	r3, r2
 8007d84:	005b      	lsls	r3, r3, #1
 8007d86:	4413      	add	r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	440b      	add	r3, r1
 8007d8c:	3304      	adds	r3, #4
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d110      	bne.n	8007dbc <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8007d9a:	491d      	ldr	r1, [pc, #116]	; (8007e10 <chk_lock+0xd4>)
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	005b      	lsls	r3, r3, #1
 8007da2:	4413      	add	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	440b      	add	r3, r1
 8007da8:	3308      	adds	r3, #8
 8007daa:	881a      	ldrh	r2, [r3, #0]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
				Files[i].clu == dp->sclust &&
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d102      	bne.n	8007dbc <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8007db6:	e007      	b.n	8007dc8 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8007db8:	2301      	movs	r3, #1
 8007dba:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	60fb      	str	r3, [r7, #12]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d9c3      	bls.n	8007d50 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d109      	bne.n	8007de2 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d102      	bne.n	8007dda <chk_lock+0x9e>
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d101      	bne.n	8007dde <chk_lock+0xa2>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	e013      	b.n	8007e06 <chk_lock+0xca>
 8007dde:	2312      	movs	r3, #18
 8007de0:	e011      	b.n	8007e06 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10b      	bne.n	8007e00 <chk_lock+0xc4>
 8007de8:	4909      	ldr	r1, [pc, #36]	; (8007e10 <chk_lock+0xd4>)
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	4613      	mov	r3, r2
 8007dee:	005b      	lsls	r3, r3, #1
 8007df0:	4413      	add	r3, r2
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	440b      	add	r3, r1
 8007df6:	330a      	adds	r3, #10
 8007df8:	881b      	ldrh	r3, [r3, #0]
 8007dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dfe:	d101      	bne.n	8007e04 <chk_lock+0xc8>
 8007e00:	2310      	movs	r3, #16
 8007e02:	e000      	b.n	8007e06 <chk_lock+0xca>
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3714      	adds	r7, #20
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bc80      	pop	{r7}
 8007e0e:	4770      	bx	lr
 8007e10:	20000134 	.word	0x20000134

08007e14 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	607b      	str	r3, [r7, #4]
 8007e1e:	e002      	b.n	8007e26 <enq_lock+0x12>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	3301      	adds	r3, #1
 8007e24:	607b      	str	r3, [r7, #4]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d809      	bhi.n	8007e40 <enq_lock+0x2c>
 8007e2c:	490a      	ldr	r1, [pc, #40]	; (8007e58 <enq_lock+0x44>)
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	4613      	mov	r3, r2
 8007e32:	005b      	lsls	r3, r3, #1
 8007e34:	4413      	add	r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	440b      	add	r3, r1
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1ef      	bne.n	8007e20 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	bf14      	ite	ne
 8007e46:	2301      	movne	r3, #1
 8007e48:	2300      	moveq	r3, #0
 8007e4a:	b2db      	uxtb	r3, r3
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bc80      	pop	{r7}
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	20000134 	.word	0x20000134

08007e5c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007e66:	2300      	movs	r3, #0
 8007e68:	60fb      	str	r3, [r7, #12]
 8007e6a:	e02b      	b.n	8007ec4 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8007e6c:	4955      	ldr	r1, [pc, #340]	; (8007fc4 <inc_lock+0x168>)
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	4613      	mov	r3, r2
 8007e72:	005b      	lsls	r3, r3, #1
 8007e74:	4413      	add	r3, r2
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	440b      	add	r3, r1
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d11b      	bne.n	8007ebe <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8007e86:	494f      	ldr	r1, [pc, #316]	; (8007fc4 <inc_lock+0x168>)
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	005b      	lsls	r3, r3, #1
 8007e8e:	4413      	add	r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	440b      	add	r3, r1
 8007e94:	3304      	adds	r3, #4
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
		if (Files[i].fs == dp->fs &&
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d10d      	bne.n	8007ebe <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8007ea2:	4948      	ldr	r1, [pc, #288]	; (8007fc4 <inc_lock+0x168>)
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	005b      	lsls	r3, r3, #1
 8007eaa:	4413      	add	r3, r2
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	440b      	add	r3, r1
 8007eb0:	3308      	adds	r3, #8
 8007eb2:	881a      	ldrh	r2, [r3, #0]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
			Files[i].clu == dp->sclust &&
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d006      	beq.n	8007ecc <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	60fb      	str	r3, [r7, #12]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d9d0      	bls.n	8007e6c <inc_lock+0x10>
 8007eca:	e000      	b.n	8007ece <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8007ecc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d145      	bne.n	8007f60 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	60fb      	str	r3, [r7, #12]
 8007ed8:	e002      	b.n	8007ee0 <inc_lock+0x84>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	3301      	adds	r3, #1
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d809      	bhi.n	8007efa <inc_lock+0x9e>
 8007ee6:	4937      	ldr	r1, [pc, #220]	; (8007fc4 <inc_lock+0x168>)
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	4613      	mov	r3, r2
 8007eec:	005b      	lsls	r3, r3, #1
 8007eee:	4413      	add	r3, r2
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	440b      	add	r3, r1
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1ef      	bne.n	8007eda <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d101      	bne.n	8007f04 <inc_lock+0xa8>
 8007f00:	2300      	movs	r3, #0
 8007f02:	e05a      	b.n	8007fba <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8007f0a:	482e      	ldr	r0, [pc, #184]	; (8007fc4 <inc_lock+0x168>)
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	005b      	lsls	r3, r3, #1
 8007f12:	4413      	add	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4403      	add	r3, r0
 8007f18:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
 8007f20:	4828      	ldr	r0, [pc, #160]	; (8007fc4 <inc_lock+0x168>)
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	4613      	mov	r3, r2
 8007f26:	005b      	lsls	r3, r3, #1
 8007f28:	4413      	add	r3, r2
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	4403      	add	r3, r0
 8007f2e:	3304      	adds	r3, #4
 8007f30:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8b3 0406 	ldrh.w	r0, [r3, #1030]	; 0x406
 8007f38:	4922      	ldr	r1, [pc, #136]	; (8007fc4 <inc_lock+0x168>)
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	005b      	lsls	r3, r3, #1
 8007f40:	4413      	add	r3, r2
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	440b      	add	r3, r1
 8007f46:	3308      	adds	r3, #8
 8007f48:	4602      	mov	r2, r0
 8007f4a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8007f4c:	491d      	ldr	r1, [pc, #116]	; (8007fc4 <inc_lock+0x168>)
 8007f4e:	68fa      	ldr	r2, [r7, #12]
 8007f50:	4613      	mov	r3, r2
 8007f52:	005b      	lsls	r3, r3, #1
 8007f54:	4413      	add	r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	440b      	add	r3, r1
 8007f5a:	330a      	adds	r3, #10
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00c      	beq.n	8007f80 <inc_lock+0x124>
 8007f66:	4917      	ldr	r1, [pc, #92]	; (8007fc4 <inc_lock+0x168>)
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	005b      	lsls	r3, r3, #1
 8007f6e:	4413      	add	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	440b      	add	r3, r1
 8007f74:	330a      	adds	r3, #10
 8007f76:	881b      	ldrh	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d001      	beq.n	8007f80 <inc_lock+0x124>
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	e01c      	b.n	8007fba <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10b      	bne.n	8007f9e <inc_lock+0x142>
 8007f86:	490f      	ldr	r1, [pc, #60]	; (8007fc4 <inc_lock+0x168>)
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	005b      	lsls	r3, r3, #1
 8007f8e:	4413      	add	r3, r2
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	440b      	add	r3, r1
 8007f94:	330a      	adds	r3, #10
 8007f96:	881b      	ldrh	r3, [r3, #0]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	b299      	uxth	r1, r3
 8007f9c:	e001      	b.n	8007fa2 <inc_lock+0x146>
 8007f9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007fa2:	4808      	ldr	r0, [pc, #32]	; (8007fc4 <inc_lock+0x168>)
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	005b      	lsls	r3, r3, #1
 8007faa:	4413      	add	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4403      	add	r3, r0
 8007fb0:	330a      	adds	r3, #10
 8007fb2:	460a      	mov	r2, r1
 8007fb4:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	3301      	adds	r3, #1
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3714      	adds	r7, #20
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bc80      	pop	{r7}
 8007fc2:	4770      	bx	lr
 8007fc4:	20000134 	.word	0x20000134

08007fc8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	607b      	str	r3, [r7, #4]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d82e      	bhi.n	800803a <dec_lock+0x72>
		n = Files[i].ctr;
 8007fdc:	491b      	ldr	r1, [pc, #108]	; (800804c <dec_lock+0x84>)
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	005b      	lsls	r3, r3, #1
 8007fe4:	4413      	add	r3, r2
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	440b      	add	r3, r1
 8007fea:	330a      	adds	r3, #10
 8007fec:	881b      	ldrh	r3, [r3, #0]
 8007fee:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007ff0:	89fb      	ldrh	r3, [r7, #14]
 8007ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ff6:	d101      	bne.n	8007ffc <dec_lock+0x34>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8007ffc:	89fb      	ldrh	r3, [r7, #14]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d002      	beq.n	8008008 <dec_lock+0x40>
 8008002:	89fb      	ldrh	r3, [r7, #14]
 8008004:	3b01      	subs	r3, #1
 8008006:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008008:	4910      	ldr	r1, [pc, #64]	; (800804c <dec_lock+0x84>)
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	4613      	mov	r3, r2
 800800e:	005b      	lsls	r3, r3, #1
 8008010:	4413      	add	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	440b      	add	r3, r1
 8008016:	330a      	adds	r3, #10
 8008018:	89fa      	ldrh	r2, [r7, #14]
 800801a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800801c:	89fb      	ldrh	r3, [r7, #14]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d108      	bne.n	8008034 <dec_lock+0x6c>
 8008022:	490a      	ldr	r1, [pc, #40]	; (800804c <dec_lock+0x84>)
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	4613      	mov	r3, r2
 8008028:	005b      	lsls	r3, r3, #1
 800802a:	4413      	add	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	440b      	add	r3, r1
 8008030:	2200      	movs	r2, #0
 8008032:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	737b      	strb	r3, [r7, #13]
 8008038:	e001      	b.n	800803e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800803a:	2302      	movs	r3, #2
 800803c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800803e:	7b7b      	ldrb	r3, [r7, #13]
}
 8008040:	4618      	mov	r0, r3
 8008042:	3714      	adds	r7, #20
 8008044:	46bd      	mov	sp, r7
 8008046:	bc80      	pop	{r7}
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	20000134 	.word	0x20000134

08008050 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008058:	2300      	movs	r3, #0
 800805a:	60fb      	str	r3, [r7, #12]
 800805c:	e016      	b.n	800808c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800805e:	4910      	ldr	r1, [pc, #64]	; (80080a0 <clear_lock+0x50>)
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	4613      	mov	r3, r2
 8008064:	005b      	lsls	r3, r3, #1
 8008066:	4413      	add	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	440b      	add	r3, r1
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	429a      	cmp	r2, r3
 8008072:	d108      	bne.n	8008086 <clear_lock+0x36>
 8008074:	490a      	ldr	r1, [pc, #40]	; (80080a0 <clear_lock+0x50>)
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	4613      	mov	r3, r2
 800807a:	005b      	lsls	r3, r3, #1
 800807c:	4413      	add	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	440b      	add	r3, r1
 8008082:	2200      	movs	r2, #0
 8008084:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	3301      	adds	r3, #1
 800808a:	60fb      	str	r3, [r7, #12]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d9e5      	bls.n	800805e <clear_lock+0xe>
	}
}
 8008092:	bf00      	nop
 8008094:	bf00      	nop
 8008096:	3714      	adds	r7, #20
 8008098:	46bd      	mov	sp, r7
 800809a:	bc80      	pop	{r7}
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop
 80080a0:	20000134 	.word	0x20000134

080080a4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d038      	beq.n	800812c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 80080c0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 80080c8:	6879      	ldr	r1, [r7, #4]
 80080ca:	2301      	movs	r3, #1
 80080cc:	697a      	ldr	r2, [r7, #20]
 80080ce:	f7ff fd7f 	bl	8007bd0 <disk_write>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d002      	beq.n	80080de <sync_window+0x3a>
			res = FR_DISK_ERR;
 80080d8:	2301      	movs	r3, #1
 80080da:	73fb      	strb	r3, [r7, #15]
 80080dc:	e026      	b.n	800812c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80080ec:	697a      	ldr	r2, [r7, #20]
 80080ee:	1ad2      	subs	r2, r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d218      	bcs.n	800812c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 8008100:	613b      	str	r3, [r7, #16]
 8008102:	e010      	b.n	8008126 <sync_window+0x82>
					wsect += fs->fsize;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	4413      	add	r3, r2
 800810e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8008116:	6879      	ldr	r1, [r7, #4]
 8008118:	2301      	movs	r3, #1
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	f7ff fd58 	bl	8007bd0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	3b01      	subs	r3, #1
 8008124:	613b      	str	r3, [r7, #16]
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d8eb      	bhi.n	8008104 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800812c:	7bfb      	ldrb	r3, [r7, #15]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3718      	adds	r7, #24
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b084      	sub	sp, #16
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
 800813e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008140:	2300      	movs	r3, #0
 8008142:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 800814a:	683a      	ldr	r2, [r7, #0]
 800814c:	429a      	cmp	r2, r3
 800814e:	d01b      	beq.n	8008188 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7ff ffa7 	bl	80080a4 <sync_window>
 8008156:	4603      	mov	r3, r0
 8008158:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800815a:	7bfb      	ldrb	r3, [r7, #15]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d113      	bne.n	8008188 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8008166:	6879      	ldr	r1, [r7, #4]
 8008168:	2301      	movs	r3, #1
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	f7ff fd10 	bl	8007b90 <disk_read>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d004      	beq.n	8008180 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008176:	f04f 33ff 	mov.w	r3, #4294967295
 800817a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800817c:	2301      	movs	r3, #1
 800817e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
		}
	}
	return res;
 8008188:	7bfb      	ldrb	r3, [r7, #15]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b084      	sub	sp, #16
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f7ff ff82 	bl	80080a4 <sync_window>
 80081a0:	4603      	mov	r3, r0
 80081a2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f040 809c 	bne.w	80082e4 <sync_fs+0x152>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80081b2:	2b03      	cmp	r3, #3
 80081b4:	f040 8089 	bne.w	80082ca <sync_fs+0x138>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 80081be:	2b01      	cmp	r3, #1
 80081c0:	f040 8083 	bne.w	80082ca <sync_fs+0x138>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80081cc:	461a      	mov	r2, r3
 80081ce:	2100      	movs	r1, #0
 80081d0:	f7ff fd5a 	bl	8007c88 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2255      	movs	r2, #85	; 0x55
 80081d8:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	22aa      	movs	r2, #170	; 0xaa
 80081e0:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2252      	movs	r2, #82	; 0x52
 80081e8:	701a      	strb	r2, [r3, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2252      	movs	r2, #82	; 0x52
 80081ee:	705a      	strb	r2, [r3, #1]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2261      	movs	r2, #97	; 0x61
 80081f4:	709a      	strb	r2, [r3, #2]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2241      	movs	r2, #65	; 0x41
 80081fa:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2272      	movs	r2, #114	; 0x72
 8008200:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2272      	movs	r2, #114	; 0x72
 8008208:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2241      	movs	r2, #65	; 0x41
 8008210:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2261      	movs	r2, #97	; 0x61
 8008218:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008222:	b2da      	uxtb	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008230:	b29b      	uxth	r3, r3
 8008232:	0a1b      	lsrs	r3, r3, #8
 8008234:	b29b      	uxth	r3, r3
 8008236:	b2da      	uxtb	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008244:	0c1b      	lsrs	r3, r3, #16
 8008246:	b2da      	uxtb	r2, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008254:	0e1b      	lsrs	r3, r3, #24
 8008256:	b2da      	uxtb	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008264:	b2da      	uxtb	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008272:	b29b      	uxth	r3, r3
 8008274:	0a1b      	lsrs	r3, r3, #8
 8008276:	b29b      	uxth	r3, r3
 8008278:	b2da      	uxtb	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008286:	0c1b      	lsrs	r3, r3, #16
 8008288:	b2da      	uxtb	r2, r3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008296:	0e1b      	lsrs	r3, r3, #24
 8008298:	b2da      	uxtb	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80082a6:	1c5a      	adds	r2, r3, #1
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 80082b4:	6879      	ldr	r1, [r7, #4]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 80082bc:	2301      	movs	r3, #1
 80082be:	f7ff fc87 	bl	8007bd0 <disk_write>
			fs->fsi_flag = 0;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80082d0:	2200      	movs	r2, #0
 80082d2:	2100      	movs	r1, #0
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7ff fc9b 	bl	8007c10 <disk_ioctl>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d001      	beq.n	80082e4 <sync_fs+0x152>
			res = FR_DISK_ERR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80082e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80082ee:	b480      	push	{r7}
 80082f0:	b083      	sub	sp, #12
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	3b02      	subs	r3, #2
 80082fc:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008304:	3b02      	subs	r3, #2
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	429a      	cmp	r2, r3
 800830a:	d301      	bcc.n	8008310 <clust2sect+0x22>
 800830c:	2300      	movs	r3, #0
 800830e:	e00a      	b.n	8008326 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8008316:	461a      	mov	r2, r3
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	fb03 f202 	mul.w	r2, r3, r2
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8008324:	4413      	add	r3, r2
}
 8008326:	4618      	mov	r0, r3
 8008328:	370c      	adds	r7, #12
 800832a:	46bd      	mov	sp, r7
 800832c:	bc80      	pop	{r7}
 800832e:	4770      	bx	lr

08008330 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d905      	bls.n	800834c <get_fat+0x1c>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008346:	683a      	ldr	r2, [r7, #0]
 8008348:	429a      	cmp	r2, r3
 800834a:	d302      	bcc.n	8008352 <get_fat+0x22>
		val = 1;	/* Internal error */
 800834c:	2301      	movs	r3, #1
 800834e:	617b      	str	r3, [r7, #20]
 8008350:	e0d7      	b.n	8008502 <get_fat+0x1d2>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008352:	f04f 33ff 	mov.w	r3, #4294967295
 8008356:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800835e:	2b03      	cmp	r3, #3
 8008360:	f000 808f 	beq.w	8008482 <get_fat+0x152>
 8008364:	2b03      	cmp	r3, #3
 8008366:	f300 80c2 	bgt.w	80084ee <get_fat+0x1be>
 800836a:	2b01      	cmp	r3, #1
 800836c:	d002      	beq.n	8008374 <get_fat+0x44>
 800836e:	2b02      	cmp	r3, #2
 8008370:	d059      	beq.n	8008426 <get_fat+0xf6>
 8008372:	e0bc      	b.n	80084ee <get_fat+0x1be>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	60fb      	str	r3, [r7, #12]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	085b      	lsrs	r3, r3, #1
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	4413      	add	r3, r2
 8008380:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800838e:	4619      	mov	r1, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	fbb3 f3f1 	udiv	r3, r3, r1
 8008396:	4413      	add	r3, r2
 8008398:	4619      	mov	r1, r3
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f7ff fecb 	bl	8008136 <move_window>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f040 80a6 	bne.w	80084f4 <get_fat+0x1c4>
			wc = fs->win.d8[bc++ % SS(fs)];
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	1c5a      	adds	r2, r3, #1
 80083ac:	60fa      	str	r2, [r7, #12]
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80083b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80083b8:	fb02 f201 	mul.w	r2, r2, r1
 80083bc:	1a9b      	subs	r3, r3, r2
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	5cd3      	ldrb	r3, [r2, r3]
 80083c2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80083d0:	4619      	mov	r1, r3
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80083d8:	4413      	add	r3, r2
 80083da:	4619      	mov	r1, r3
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f7ff feaa 	bl	8008136 <move_window>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f040 8087 	bne.w	80084f8 <get_fat+0x1c8>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80083f0:	461a      	mov	r2, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80083f8:	fb02 f201 	mul.w	r2, r2, r1
 80083fc:	1a9b      	subs	r3, r3, r2
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	5cd3      	ldrb	r3, [r2, r3]
 8008402:	021b      	lsls	r3, r3, #8
 8008404:	461a      	mov	r2, r3
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	4313      	orrs	r3, r2
 800840a:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	f003 0301 	and.w	r3, r3, #1
 8008412:	2b00      	cmp	r3, #0
 8008414:	d002      	beq.n	800841c <get_fat+0xec>
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	091b      	lsrs	r3, r3, #4
 800841a:	e002      	b.n	8008422 <get_fat+0xf2>
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008422:	617b      	str	r3, [r7, #20]
			break;
 8008424:	e06d      	b.n	8008502 <get_fat+0x1d2>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008432:	085b      	lsrs	r3, r3, #1
 8008434:	b29b      	uxth	r3, r3
 8008436:	4619      	mov	r1, r3
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	fbb3 f3f1 	udiv	r3, r3, r1
 800843e:	4413      	add	r3, r2
 8008440:	4619      	mov	r1, r3
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7ff fe77 	bl	8008136 <move_window>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d156      	bne.n	80084fc <get_fat+0x1cc>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	005b      	lsls	r3, r3, #1
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8008458:	fbb3 f1f2 	udiv	r1, r3, r2
 800845c:	fb02 f201 	mul.w	r2, r2, r1
 8008460:	1a9b      	subs	r3, r3, r2
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	4413      	add	r3, r2
 8008466:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	3301      	adds	r3, #1
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	021b      	lsls	r3, r3, #8
 8008470:	b21a      	sxth	r2, r3
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	b21b      	sxth	r3, r3
 8008478:	4313      	orrs	r3, r2
 800847a:	b21b      	sxth	r3, r3
 800847c:	b29b      	uxth	r3, r3
 800847e:	617b      	str	r3, [r7, #20]
			break;
 8008480:	e03f      	b.n	8008502 <get_fat+0x1d2>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800848e:	089b      	lsrs	r3, r3, #2
 8008490:	b29b      	uxth	r3, r3
 8008492:	4619      	mov	r1, r3
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	fbb3 f3f1 	udiv	r3, r3, r1
 800849a:	4413      	add	r3, r2
 800849c:	4619      	mov	r1, r3
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f7ff fe49 	bl	8008136 <move_window>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d12a      	bne.n	8008500 <get_fat+0x1d0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80084b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80084b8:	fb02 f201 	mul.w	r2, r2, r1
 80084bc:	1a9b      	subs	r3, r3, r2
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	4413      	add	r3, r2
 80084c2:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	3303      	adds	r3, #3
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	061a      	lsls	r2, r3, #24
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	3302      	adds	r3, #2
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	041b      	lsls	r3, r3, #16
 80084d4:	4313      	orrs	r3, r2
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	3201      	adds	r2, #1
 80084da:	7812      	ldrb	r2, [r2, #0]
 80084dc:	0212      	lsls	r2, r2, #8
 80084de:	4313      	orrs	r3, r2
 80084e0:	693a      	ldr	r2, [r7, #16]
 80084e2:	7812      	ldrb	r2, [r2, #0]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80084ea:	617b      	str	r3, [r7, #20]
			break;
 80084ec:	e009      	b.n	8008502 <get_fat+0x1d2>

		default:
			val = 1;	/* Internal error */
 80084ee:	2301      	movs	r3, #1
 80084f0:	617b      	str	r3, [r7, #20]
 80084f2:	e006      	b.n	8008502 <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80084f4:	bf00      	nop
 80084f6:	e004      	b.n	8008502 <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80084f8:	bf00      	nop
 80084fa:	e002      	b.n	8008502 <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80084fc:	bf00      	nop
 80084fe:	e000      	b.n	8008502 <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008500:	bf00      	nop
		}
	}

	return val;
 8008502:	697b      	ldr	r3, [r7, #20]
}
 8008504:	4618      	mov	r0, r3
 8008506:	3718      	adds	r7, #24
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b088      	sub	sp, #32
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	2b01      	cmp	r3, #1
 800851c:	d905      	bls.n	800852a <put_fat+0x1e>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008524:	68ba      	ldr	r2, [r7, #8]
 8008526:	429a      	cmp	r2, r3
 8008528:	d302      	bcc.n	8008530 <put_fat+0x24>
		res = FR_INT_ERR;
 800852a:	2302      	movs	r3, #2
 800852c:	77fb      	strb	r3, [r7, #31]
 800852e:	e128      	b.n	8008782 <put_fat+0x276>

	} else {
		switch (fs->fs_type) {
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8008536:	2b03      	cmp	r3, #3
 8008538:	f000 80c3 	beq.w	80086c2 <put_fat+0x1b6>
 800853c:	2b03      	cmp	r3, #3
 800853e:	f300 8116 	bgt.w	800876e <put_fat+0x262>
 8008542:	2b01      	cmp	r3, #1
 8008544:	d003      	beq.n	800854e <put_fat+0x42>
 8008546:	2b02      	cmp	r3, #2
 8008548:	f000 8087 	beq.w	800865a <put_fat+0x14e>
 800854c:	e10f      	b.n	800876e <put_fat+0x262>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	617b      	str	r3, [r7, #20]
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	085b      	lsrs	r3, r3, #1
 8008556:	697a      	ldr	r2, [r7, #20]
 8008558:	4413      	add	r3, r2
 800855a:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008568:	4619      	mov	r1, r3
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008570:	4413      	add	r3, r2
 8008572:	4619      	mov	r1, r3
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f7ff fdde 	bl	8008136 <move_window>
 800857a:	4603      	mov	r3, r0
 800857c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800857e:	7ffb      	ldrb	r3, [r7, #31]
 8008580:	2b00      	cmp	r3, #0
 8008582:	f040 80f7 	bne.w	8008774 <put_fat+0x268>
			p = &fs->win.d8[bc++ % SS(fs)];
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	1c5a      	adds	r2, r3, #1
 800858a:	617a      	str	r2, [r7, #20]
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8008592:	fbb3 f1f2 	udiv	r1, r3, r2
 8008596:	fb02 f201 	mul.w	r2, r2, r1
 800859a:	1a9b      	subs	r3, r3, r2
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	4413      	add	r3, r2
 80085a0:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	f003 0301 	and.w	r3, r3, #1
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00d      	beq.n	80085c8 <put_fat+0xbc>
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	b25b      	sxtb	r3, r3
 80085b2:	f003 030f 	and.w	r3, r3, #15
 80085b6:	b25a      	sxtb	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	011b      	lsls	r3, r3, #4
 80085be:	b25b      	sxtb	r3, r3
 80085c0:	4313      	orrs	r3, r2
 80085c2:	b25b      	sxtb	r3, r3
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	e001      	b.n	80085cc <put_fat+0xc0>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	69ba      	ldr	r2, [r7, #24]
 80085ce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80085e4:	4619      	mov	r1, r3
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80085ec:	4413      	add	r3, r2
 80085ee:	4619      	mov	r1, r3
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f7ff fda0 	bl	8008136 <move_window>
 80085f6:	4603      	mov	r3, r0
 80085f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80085fa:	7ffb      	ldrb	r3, [r7, #31]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f040 80bb 	bne.w	8008778 <put_fat+0x26c>
			p = &fs->win.d8[bc % SS(fs)];
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008608:	461a      	mov	r2, r3
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008610:	fb02 f201 	mul.w	r2, r2, r1
 8008614:	1a9b      	subs	r3, r3, r2
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	4413      	add	r3, r2
 800861a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	f003 0301 	and.w	r3, r3, #1
 8008622:	2b00      	cmp	r3, #0
 8008624:	d003      	beq.n	800862e <put_fat+0x122>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	091b      	lsrs	r3, r3, #4
 800862a:	b2db      	uxtb	r3, r3
 800862c:	e00e      	b.n	800864c <put_fat+0x140>
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	b25b      	sxtb	r3, r3
 8008634:	f023 030f 	bic.w	r3, r3, #15
 8008638:	b25a      	sxtb	r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	0a1b      	lsrs	r3, r3, #8
 800863e:	b25b      	sxtb	r3, r3
 8008640:	f003 030f 	and.w	r3, r3, #15
 8008644:	b25b      	sxtb	r3, r3
 8008646:	4313      	orrs	r3, r2
 8008648:	b25b      	sxtb	r3, r3
 800864a:	b2db      	uxtb	r3, r3
 800864c:	69ba      	ldr	r2, [r7, #24]
 800864e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 8008658:	e093      	b.n	8008782 <put_fat+0x276>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008666:	085b      	lsrs	r3, r3, #1
 8008668:	b29b      	uxth	r3, r3
 800866a:	4619      	mov	r1, r3
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008672:	4413      	add	r3, r2
 8008674:	4619      	mov	r1, r3
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f7ff fd5d 	bl	8008136 <move_window>
 800867c:	4603      	mov	r3, r0
 800867e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008680:	7ffb      	ldrb	r3, [r7, #31]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d17a      	bne.n	800877c <put_fat+0x270>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	005b      	lsls	r3, r3, #1
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8008690:	fbb3 f1f2 	udiv	r1, r3, r2
 8008694:	fb02 f201 	mul.w	r2, r2, r1
 8008698:	1a9b      	subs	r3, r3, r2
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	4413      	add	r3, r2
 800869e:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	b2da      	uxtb	r2, r3
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	701a      	strb	r2, [r3, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	0a1b      	lsrs	r3, r3, #8
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	3301      	adds	r3, #1
 80086b4:	b2d2      	uxtb	r2, r2
 80086b6:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 80086c0:	e05f      	b.n	8008782 <put_fat+0x276>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80086ce:	089b      	lsrs	r3, r3, #2
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	4619      	mov	r1, r3
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80086da:	4413      	add	r3, r2
 80086dc:	4619      	mov	r1, r3
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	f7ff fd29 	bl	8008136 <move_window>
 80086e4:	4603      	mov	r3, r0
 80086e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80086e8:	7ffb      	ldrb	r3, [r7, #31]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d148      	bne.n	8008780 <put_fat+0x274>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80086f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80086fc:	fb02 f201 	mul.w	r2, r2, r1
 8008700:	1a9b      	subs	r3, r3, r2
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	4413      	add	r3, r2
 8008706:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	3303      	adds	r3, #3
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	061a      	lsls	r2, r3, #24
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	3302      	adds	r3, #2
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	041b      	lsls	r3, r3, #16
 8008718:	4313      	orrs	r3, r2
 800871a:	69ba      	ldr	r2, [r7, #24]
 800871c:	3201      	adds	r2, #1
 800871e:	7812      	ldrb	r2, [r2, #0]
 8008720:	0212      	lsls	r2, r2, #8
 8008722:	4313      	orrs	r3, r2
 8008724:	69ba      	ldr	r2, [r7, #24]
 8008726:	7812      	ldrb	r2, [r2, #0]
 8008728:	4313      	orrs	r3, r2
 800872a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	4313      	orrs	r3, r2
 8008732:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	b2da      	uxtb	r2, r3
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	701a      	strb	r2, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	b29b      	uxth	r3, r3
 8008740:	0a1b      	lsrs	r3, r3, #8
 8008742:	b29a      	uxth	r2, r3
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	3301      	adds	r3, #1
 8008748:	b2d2      	uxtb	r2, r2
 800874a:	701a      	strb	r2, [r3, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	0c1a      	lsrs	r2, r3, #16
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	3302      	adds	r3, #2
 8008754:	b2d2      	uxtb	r2, r2
 8008756:	701a      	strb	r2, [r3, #0]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	0e1a      	lsrs	r2, r3, #24
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	3303      	adds	r3, #3
 8008760:	b2d2      	uxtb	r2, r2
 8008762:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 800876c:	e009      	b.n	8008782 <put_fat+0x276>

		default :
			res = FR_INT_ERR;
 800876e:	2302      	movs	r3, #2
 8008770:	77fb      	strb	r3, [r7, #31]
 8008772:	e006      	b.n	8008782 <put_fat+0x276>
			if (res != FR_OK) break;
 8008774:	bf00      	nop
 8008776:	e004      	b.n	8008782 <put_fat+0x276>
			if (res != FR_OK) break;
 8008778:	bf00      	nop
 800877a:	e002      	b.n	8008782 <put_fat+0x276>
			if (res != FR_OK) break;
 800877c:	bf00      	nop
 800877e:	e000      	b.n	8008782 <put_fat+0x276>
			if (res != FR_OK) break;
 8008780:	bf00      	nop
		}
	}

	return res;
 8008782:	7ffb      	ldrb	r3, [r7, #31]
}
 8008784:	4618      	mov	r0, r3
 8008786:	3720      	adds	r7, #32
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d905      	bls.n	80087a8 <remove_chain+0x1c>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80087a2:	683a      	ldr	r2, [r7, #0]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d302      	bcc.n	80087ae <remove_chain+0x22>
		res = FR_INT_ERR;
 80087a8:	2302      	movs	r3, #2
 80087aa:	73fb      	strb	r3, [r7, #15]
 80087ac:	e043      	b.n	8008836 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 80087ae:	2300      	movs	r3, #0
 80087b0:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80087b2:	e036      	b.n	8008822 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f7ff fdba 	bl	8008330 <get_fat>
 80087bc:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d035      	beq.n	8008830 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d102      	bne.n	80087d0 <remove_chain+0x44>
 80087ca:	2302      	movs	r3, #2
 80087cc:	73fb      	strb	r3, [r7, #15]
 80087ce:	e032      	b.n	8008836 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d6:	d102      	bne.n	80087de <remove_chain+0x52>
 80087d8:	2301      	movs	r3, #1
 80087da:	73fb      	strb	r3, [r7, #15]
 80087dc:	e02b      	b.n	8008836 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80087de:	2200      	movs	r2, #0
 80087e0:	6839      	ldr	r1, [r7, #0]
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f7ff fe92 	bl	800850c <put_fat>
 80087e8:	4603      	mov	r3, r0
 80087ea:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80087ec:	7bfb      	ldrb	r3, [r7, #15]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d120      	bne.n	8008834 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80087f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087fc:	d00f      	beq.n	800881e <remove_chain+0x92>
				fs->free_clust++;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008804:	1c5a      	adds	r2, r3, #1
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
				fs->fsi_flag |= 1;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 8008812:	f043 0301 	orr.w	r3, r3, #1
 8008816:	b2da      	uxtb	r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008828:	683a      	ldr	r2, [r7, #0]
 800882a:	429a      	cmp	r2, r3
 800882c:	d3c2      	bcc.n	80087b4 <remove_chain+0x28>
 800882e:	e002      	b.n	8008836 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8008830:	bf00      	nop
 8008832:	e000      	b.n	8008836 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8008834:	bf00      	nop
		}
	}

	return res;
 8008836:	7bfb      	ldrb	r3, [r7, #15]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b086      	sub	sp, #24
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10f      	bne.n	8008870 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008856:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d005      	beq.n	800886a <create_chain+0x2a>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008864:	693a      	ldr	r2, [r7, #16]
 8008866:	429a      	cmp	r2, r3
 8008868:	d31c      	bcc.n	80088a4 <create_chain+0x64>
 800886a:	2301      	movs	r3, #1
 800886c:	613b      	str	r3, [r7, #16]
 800886e:	e019      	b.n	80088a4 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8008870:	6839      	ldr	r1, [r7, #0]
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f7ff fd5c 	bl	8008330 <get_fat>
 8008878:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d801      	bhi.n	8008884 <create_chain+0x44>
 8008880:	2301      	movs	r3, #1
 8008882:	e076      	b.n	8008972 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800888a:	d101      	bne.n	8008890 <create_chain+0x50>
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	e070      	b.n	8008972 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	429a      	cmp	r2, r3
 800889a:	d201      	bcs.n	80088a0 <create_chain+0x60>
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	e068      	b.n	8008972 <create_chain+0x132>
		scl = clst;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	3301      	adds	r3, #1
 80088ac:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80088b4:	697a      	ldr	r2, [r7, #20]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d307      	bcc.n	80088ca <create_chain+0x8a>
			ncl = 2;
 80088ba:	2302      	movs	r3, #2
 80088bc:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80088be:	697a      	ldr	r2, [r7, #20]
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d901      	bls.n	80088ca <create_chain+0x8a>
 80088c6:	2300      	movs	r3, #0
 80088c8:	e053      	b.n	8008972 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80088ca:	6979      	ldr	r1, [r7, #20]
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f7ff fd2f 	bl	8008330 <get_fat>
 80088d2:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00e      	beq.n	80088f8 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e0:	d002      	beq.n	80088e8 <create_chain+0xa8>
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d101      	bne.n	80088ec <create_chain+0xac>
			return cs;
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	e042      	b.n	8008972 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 80088ec:	697a      	ldr	r2, [r7, #20]
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d1d9      	bne.n	80088a8 <create_chain+0x68>
 80088f4:	2300      	movs	r3, #0
 80088f6:	e03c      	b.n	8008972 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 80088f8:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80088fa:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80088fe:	6979      	ldr	r1, [r7, #20]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f7ff fe03 	bl	800850c <put_fat>
 8008906:	4603      	mov	r3, r0
 8008908:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800890a:	7bfb      	ldrb	r3, [r7, #15]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d109      	bne.n	8008924 <create_chain+0xe4>
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d006      	beq.n	8008924 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8008916:	697a      	ldr	r2, [r7, #20]
 8008918:	6839      	ldr	r1, [r7, #0]
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f7ff fdf6 	bl	800850c <put_fat>
 8008920:	4603      	mov	r3, r0
 8008922:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8008924:	7bfb      	ldrb	r3, [r7, #15]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d11a      	bne.n	8008960 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	697a      	ldr	r2, [r7, #20]
 800892e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
		if (fs->free_clust != 0xFFFFFFFF) {
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893c:	d018      	beq.n	8008970 <create_chain+0x130>
			fs->free_clust--;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008944:	1e5a      	subs	r2, r3, #1
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			fs->fsi_flag |= 1;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 8008952:	f043 0301 	orr.w	r3, r3, #1
 8008956:	b2da      	uxtb	r2, r3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
 800895e:	e007      	b.n	8008970 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8008960:	7bfb      	ldrb	r3, [r7, #15]
 8008962:	2b01      	cmp	r3, #1
 8008964:	d102      	bne.n	800896c <create_chain+0x12c>
 8008966:	f04f 33ff 	mov.w	r3, #4294967295
 800896a:	e000      	b.n	800896e <create_chain+0x12e>
 800896c:	2301      	movs	r3, #1
 800896e:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8008970:	697b      	ldr	r3, [r7, #20]
}
 8008972:	4618      	mov	r0, r3
 8008974:	3718      	adds	r7, #24
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}

0800897a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800897a:	b480      	push	{r7}
 800897c:	b087      	sub	sp, #28
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
 8008982:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800898a:	3304      	adds	r3, #4
 800898c:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008994:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008998:	461a      	mov	r2, r3
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	fbb3 f3f2 	udiv	r3, r3, r2
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 80089a6:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 80089aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80089ae:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	1d1a      	adds	r2, r3, #4
 80089b4:	613a      	str	r2, [r7, #16]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d101      	bne.n	80089c4 <clmt_clust+0x4a>
 80089c0:	2300      	movs	r3, #0
 80089c2:	e010      	b.n	80089e6 <clmt_clust+0x6c>
		if (cl < ncl) break;	/* In this fragment? */
 80089c4:	697a      	ldr	r2, [r7, #20]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d307      	bcc.n	80089dc <clmt_clust+0x62>
		cl -= ncl; tbl++;		/* Next fragment */
 80089cc:	697a      	ldr	r2, [r7, #20]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	617b      	str	r3, [r7, #20]
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	3304      	adds	r3, #4
 80089d8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80089da:	e7e9      	b.n	80089b0 <clmt_clust+0x36>
		if (cl < ncl) break;	/* In this fragment? */
 80089dc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	4413      	add	r3, r2
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	371c      	adds	r7, #28
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bc80      	pop	{r7}
 80089ee:	4770      	bx	lr

080089f0 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b086      	sub	sp, #24
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008a0a:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d007      	beq.n	8008a22 <dir_sdi+0x32>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008a18:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008a1c:	697a      	ldr	r2, [r7, #20]
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d301      	bcc.n	8008a26 <dir_sdi+0x36>
		return FR_INT_ERR;
 8008a22:	2302      	movs	r3, #2
 8008a24:	e091      	b.n	8008b4a <dir_sdi+0x15a>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d10c      	bne.n	8008a46 <dir_sdi+0x56>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008a32:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8008a36:	2b03      	cmp	r3, #3
 8008a38:	d105      	bne.n	8008a46 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008a40:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8008a44:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d111      	bne.n	8008a70 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008a52:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8008a56:	461a      	mov	r2, r3
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d301      	bcc.n	8008a62 <dir_sdi+0x72>
			return FR_INT_ERR;
 8008a5e:	2302      	movs	r3, #2
 8008a60:	e073      	b.n	8008b4a <dir_sdi+0x15a>
		sect = dp->fs->dirbase;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008a68:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8008a6c:	613b      	str	r3, [r7, #16]
 8008a6e:	e03b      	b.n	8008ae8 <dir_sdi+0xf8>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008a76:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008a7a:	095b      	lsrs	r3, r3, #5
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	461a      	mov	r2, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008a86:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8008a8a:	fb03 f302 	mul.w	r3, r3, r2
 8008a8e:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8008a90:	e01e      	b.n	8008ad0 <dir_sdi+0xe0>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008a98:	6979      	ldr	r1, [r7, #20]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7ff fc48 	bl	8008330 <get_fat>
 8008aa0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa8:	d101      	bne.n	8008aae <dir_sdi+0xbe>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e04d      	b.n	8008b4a <dir_sdi+0x15a>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d907      	bls.n	8008ac4 <dir_sdi+0xd4>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008aba:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008abe:	697a      	ldr	r2, [r7, #20]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d301      	bcc.n	8008ac8 <dir_sdi+0xd8>
				return FR_INT_ERR;
 8008ac4:	2302      	movs	r3, #2
 8008ac6:	e040      	b.n	8008b4a <dir_sdi+0x15a>
			idx -= ic;
 8008ac8:	683a      	ldr	r2, [r7, #0]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	1ad3      	subs	r3, r2, r3
 8008ace:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8008ad0:	683a      	ldr	r2, [r7, #0]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d2dc      	bcs.n	8008a92 <dir_sdi+0xa2>
		}
		sect = clust2sect(dp->fs, clst);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008ade:	6979      	ldr	r1, [r7, #20]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7ff fc04 	bl	80082ee <clust2sect>
 8008ae6:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	697a      	ldr	r2, [r7, #20]
 8008aec:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
	if (!sect) return FR_INT_ERR;
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d101      	bne.n	8008afa <dir_sdi+0x10a>
 8008af6:	2302      	movs	r3, #2
 8008af8:	e027      	b.n	8008b4a <dir_sdi+0x15a>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008b00:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008b04:	095b      	lsrs	r3, r3, #5
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	461a      	mov	r2, r3
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	441a      	add	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008b20:	4618      	mov	r0, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008b28:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008b2c:	095b      	lsrs	r3, r3, #5
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	461a      	mov	r2, r3
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b38:	fb02 f201 	mul.w	r2, r2, r1
 8008b3c:	1a9b      	subs	r3, r3, r2
 8008b3e:	015b      	lsls	r3, r3, #5
 8008b40:	18c2      	adds	r2, r0, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414

	return FR_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3718      	adds	r7, #24
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008b52:	b590      	push	{r4, r7, lr}
 8008b54:	b087      	sub	sp, #28
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
 8008b5a:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8008b62:	3301      	adds	r3, #1
 8008b64:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d004      	beq.n	8008b78 <dir_next+0x26>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d101      	bne.n	8008b7c <dir_next+0x2a>
		return FR_NO_FILE;
 8008b78:	2304      	movs	r3, #4
 8008b7a:	e100      	b.n	8008d7e <dir_next+0x22c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008b82:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008b86:	095b      	lsrs	r3, r3, #5
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b92:	fb02 f201 	mul.w	r2, r2, r1
 8008b96:	1a9b      	subs	r3, r3, r2
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f040 80d3 	bne.w	8008d44 <dir_next+0x1f2>
		dp->sect++;					/* Next sector */
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008ba4:	1c5a      	adds	r2, r3, #1
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410

		if (!dp->clust) {		/* Static table */
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d10b      	bne.n	8008bce <dir_next+0x7c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008bbc:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	f0c0 80bd 	bcc.w	8008d44 <dir_next+0x1f2>
				return FR_NO_FILE;
 8008bca:	2304      	movs	r3, #4
 8008bcc:	e0d7      	b.n	8008d7e <dir_next+0x22c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008bd4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008bd8:	095b      	lsrs	r3, r3, #5
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	461a      	mov	r2, r3
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8008bea:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 8008bee:	3a01      	subs	r2, #1
 8008bf0:	4013      	ands	r3, r2
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	f040 80a6 	bne.w	8008d44 <dir_next+0x1f2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008c04:	4619      	mov	r1, r3
 8008c06:	4610      	mov	r0, r2
 8008c08:	f7ff fb92 	bl	8008330 <get_fat>
 8008c0c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d801      	bhi.n	8008c18 <dir_next+0xc6>
 8008c14:	2302      	movs	r3, #2
 8008c16:	e0b2      	b.n	8008d7e <dir_next+0x22c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c1e:	d101      	bne.n	8008c24 <dir_next+0xd2>
 8008c20:	2301      	movs	r3, #1
 8008c22:	e0ac      	b.n	8008d7e <dir_next+0x22c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008c2a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008c2e:	697a      	ldr	r2, [r7, #20]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d378      	bcc.n	8008d26 <dir_next+0x1d4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d101      	bne.n	8008c3e <dir_next+0xec>
 8008c3a:	2304      	movs	r3, #4
 8008c3c:	e09f      	b.n	8008d7e <dir_next+0x22c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	4610      	mov	r0, r2
 8008c4e:	f7ff fdf7 	bl	8008840 <create_chain>
 8008c52:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d101      	bne.n	8008c5e <dir_next+0x10c>
 8008c5a:	2307      	movs	r3, #7
 8008c5c:	e08f      	b.n	8008d7e <dir_next+0x22c>
					if (clst == 1) return FR_INT_ERR;
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d101      	bne.n	8008c68 <dir_next+0x116>
 8008c64:	2302      	movs	r3, #2
 8008c66:	e08a      	b.n	8008d7e <dir_next+0x22c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c6e:	d101      	bne.n	8008c74 <dir_next+0x122>
 8008c70:	2301      	movs	r3, #1
 8008c72:	e084      	b.n	8008d7e <dir_next+0x22c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7ff fa12 	bl	80080a4 <sync_window>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d001      	beq.n	8008c8a <dir_next+0x138>
 8008c86:	2301      	movs	r3, #1
 8008c88:	e079      	b.n	8008d7e <dir_next+0x22c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008c90:	4618      	mov	r0, r3
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008c98:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	f7fe fff2 	bl	8007c88 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 8008cb0:	6979      	ldr	r1, [r7, #20]
 8008cb2:	4610      	mov	r0, r2
 8008cb4:	f7ff fb1b 	bl	80082ee <clust2sect>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	613b      	str	r3, [r7, #16]
 8008cc2:	e01b      	b.n	8008cfc <dir_next+0x1aa>
						dp->fs->wflag = 1;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7ff f9e4 	bl	80080a4 <sync_window>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d001      	beq.n	8008ce6 <dir_next+0x194>
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e04b      	b.n	8008d7e <dir_next+0x22c>
						dp->fs->winsect++;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008cec:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 8008cf0:	3201      	adds	r2, #1
 8008cf2:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	613b      	str	r3, [r7, #16]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008d02:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8008d06:	461a      	mov	r2, r3
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d3da      	bcc.n	8008cc4 <dir_next+0x172>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008d14:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008d1e:	693a      	ldr	r2, [r7, #16]
 8008d20:	1a8a      	subs	r2, r1, r2
 8008d22:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	697a      	ldr	r2, [r7, #20]
 8008d2a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
				dp->sect = clust2sect(dp->fs, clst);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008d34:	6979      	ldr	r1, [r7, #20]
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7ff fad9 	bl	80082ee <clust2sect>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	b29a      	uxth	r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008d54:	4618      	mov	r0, r3
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008d5c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008d60:	095b      	lsrs	r3, r3, #5
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	461a      	mov	r2, r3
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d6c:	fb02 f201 	mul.w	r2, r2, r1
 8008d70:	1a9b      	subs	r3, r3, r2
 8008d72:	015b      	lsls	r3, r3, #5
 8008d74:	18c2      	adds	r2, r0, r3
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414

	return FR_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	371c      	adds	r7, #28
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd90      	pop	{r4, r7, pc}

08008d86 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b084      	sub	sp, #16
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8008d90:	2100      	movs	r1, #0
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f7ff fe2c 	bl	80089f0 <dir_sdi>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008d9c:	7bfb      	ldrb	r3, [r7, #15]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d131      	bne.n	8008e06 <dir_alloc+0x80>
		n = 0;
 8008da2:	2300      	movs	r3, #0
 8008da4:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008db2:	4619      	mov	r1, r3
 8008db4:	4610      	mov	r0, r2
 8008db6:	f7ff f9be 	bl	8008136 <move_window>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8008dbe:	7bfb      	ldrb	r3, [r7, #15]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d11f      	bne.n	8008e04 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	2be5      	cmp	r3, #229	; 0xe5
 8008dce:	d005      	beq.n	8008ddc <dir_alloc+0x56>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d107      	bne.n	8008dec <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	3301      	adds	r3, #1
 8008de0:	60bb      	str	r3, [r7, #8]
 8008de2:	68ba      	ldr	r2, [r7, #8]
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d102      	bne.n	8008df0 <dir_alloc+0x6a>
 8008dea:	e00c      	b.n	8008e06 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008dec:	2300      	movs	r3, #0
 8008dee:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8008df0:	2101      	movs	r1, #1
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7ff fead 	bl	8008b52 <dir_next>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8008dfc:	7bfb      	ldrb	r3, [r7, #15]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d0d1      	beq.n	8008da6 <dir_alloc+0x20>
 8008e02:	e000      	b.n	8008e06 <dir_alloc+0x80>
			if (res != FR_OK) break;
 8008e04:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008e06:	7bfb      	ldrb	r3, [r7, #15]
 8008e08:	2b04      	cmp	r3, #4
 8008e0a:	d101      	bne.n	8008e10 <dir_alloc+0x8a>
 8008e0c:	2307      	movs	r3, #7
 8008e0e:	73fb      	strb	r3, [r7, #15]
	return res;
 8008e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8008e1a:	b480      	push	{r7}
 8008e1c:	b085      	sub	sp, #20
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
 8008e22:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	331b      	adds	r3, #27
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	021b      	lsls	r3, r3, #8
 8008e2c:	b21a      	sxth	r2, r3
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	331a      	adds	r3, #26
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	b21b      	sxth	r3, r3
 8008e36:	4313      	orrs	r3, r2
 8008e38:	b21b      	sxth	r3, r3
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8008e44:	2b03      	cmp	r3, #3
 8008e46:	d10f      	bne.n	8008e68 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	3315      	adds	r3, #21
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	021b      	lsls	r3, r3, #8
 8008e50:	b21a      	sxth	r2, r3
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	3314      	adds	r3, #20
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	b21b      	sxth	r3, r3
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	b21b      	sxth	r3, r3
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	041b      	lsls	r3, r3, #16
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	60fb      	str	r3, [r7, #12]

	return cl;
 8008e68:	68fb      	ldr	r3, [r7, #12]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3714      	adds	r7, #20
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bc80      	pop	{r7}
 8008e72:	4770      	bx	lr

08008e74 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	331a      	adds	r3, #26
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	b2d2      	uxtb	r2, r2
 8008e86:	701a      	strb	r2, [r3, #0]
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	0a1b      	lsrs	r3, r3, #8
 8008e8e:	b29a      	uxth	r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	331b      	adds	r3, #27
 8008e94:	b2d2      	uxtb	r2, r2
 8008e96:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	0c1a      	lsrs	r2, r3, #16
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	3314      	adds	r3, #20
 8008ea0:	b2d2      	uxtb	r2, r2
 8008ea2:	701a      	strb	r2, [r3, #0]
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	0c1b      	lsrs	r3, r3, #16
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	0a1b      	lsrs	r3, r3, #8
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	3315      	adds	r3, #21
 8008eb2:	b2d2      	uxtb	r2, r2
 8008eb4:	701a      	strb	r2, [r3, #0]
}
 8008eb6:	bf00      	nop
 8008eb8:	370c      	adds	r7, #12
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bc80      	pop	{r7}
 8008ebe:	4770      	bx	lr

08008ec0 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b086      	sub	sp, #24
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ed2:	1e5a      	subs	r2, r3, #1
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	005b      	lsls	r3, r3, #1
 8008ed8:	4413      	add	r3, r2
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	4413      	add	r3, r2
 8008ede:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	613b      	str	r3, [r7, #16]
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8008ee8:	4a2b      	ldr	r2, [pc, #172]	; (8008f98 <cmp_lfn+0xd8>)
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	4413      	add	r3, r2
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	683a      	ldr	r2, [r7, #0]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	021b      	lsls	r3, r3, #8
 8008efa:	b21a      	sxth	r2, r3
 8008efc:	4926      	ldr	r1, [pc, #152]	; (8008f98 <cmp_lfn+0xd8>)
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	440b      	add	r3, r1
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	4619      	mov	r1, r3
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	440b      	add	r3, r1
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	b21b      	sxth	r3, r3
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	b21b      	sxth	r3, r3
 8008f12:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8008f14:	89fb      	ldrh	r3, [r7, #14]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d019      	beq.n	8008f4e <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8008f1a:	89bb      	ldrh	r3, [r7, #12]
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f002 f9fd 	bl	800b31c <ff_wtoupper>
 8008f22:	4603      	mov	r3, r0
 8008f24:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	2bfe      	cmp	r3, #254	; 0xfe
 8008f2a:	d80e      	bhi.n	8008f4a <cmp_lfn+0x8a>
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	1c5a      	adds	r2, r3, #1
 8008f30:	617a      	str	r2, [r7, #20]
 8008f32:	005b      	lsls	r3, r3, #1
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	4413      	add	r3, r2
 8008f38:	881b      	ldrh	r3, [r3, #0]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f002 f9ee 	bl	800b31c <ff_wtoupper>
 8008f40:	4603      	mov	r3, r0
 8008f42:	461a      	mov	r2, r3
 8008f44:	89fb      	ldrh	r3, [r7, #14]
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d008      	beq.n	8008f5c <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	e01f      	b.n	8008f8e <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8008f4e:	89bb      	ldrh	r3, [r7, #12]
 8008f50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d001      	beq.n	8008f5c <cmp_lfn+0x9c>
 8008f58:	2300      	movs	r3, #0
 8008f5a:	e018      	b.n	8008f8e <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	613b      	str	r3, [r7, #16]
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	2b0c      	cmp	r3, #12
 8008f66:	d9bf      	bls.n	8008ee8 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00b      	beq.n	8008f8c <cmp_lfn+0xcc>
 8008f74:	89fb      	ldrh	r3, [r7, #14]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d008      	beq.n	8008f8c <cmp_lfn+0xcc>
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	005b      	lsls	r3, r3, #1
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	4413      	add	r3, r2
 8008f82:	881b      	ldrh	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d001      	beq.n	8008f8c <cmp_lfn+0xcc>
		return 0;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	e000      	b.n	8008f8e <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8008f8c:	2301      	movs	r3, #1
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3718      	adds	r7, #24
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	0800ce94 	.word	0x0800ce94

08008f9c <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b089      	sub	sp, #36	; 0x24
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	4611      	mov	r1, r2
 8008fa8:	461a      	mov	r2, r3
 8008faa:	460b      	mov	r3, r1
 8008fac:	71fb      	strb	r3, [r7, #7]
 8008fae:	4613      	mov	r3, r2
 8008fb0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	330d      	adds	r3, #13
 8008fb6:	79ba      	ldrb	r2, [r7, #6]
 8008fb8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	330b      	adds	r3, #11
 8008fbe:	220f      	movs	r2, #15
 8008fc0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	330c      	adds	r3, #12
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	331a      	adds	r3, #26
 8008fce:	2200      	movs	r2, #0
 8008fd0:	701a      	strb	r2, [r3, #0]
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	331b      	adds	r3, #27
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8008fda:	79fb      	ldrb	r3, [r7, #7]
 8008fdc:	1e5a      	subs	r2, r3, #1
 8008fde:	4613      	mov	r3, r2
 8008fe0:	005b      	lsls	r3, r3, #1
 8008fe2:	4413      	add	r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	4413      	add	r3, r2
 8008fe8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008fea:	2300      	movs	r3, #0
 8008fec:	82fb      	strh	r3, [r7, #22]
 8008fee:	2300      	movs	r3, #0
 8008ff0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8008ff2:	8afb      	ldrh	r3, [r7, #22]
 8008ff4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d007      	beq.n	800900c <fit_lfn+0x70>
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	1c5a      	adds	r2, r3, #1
 8009000:	61fa      	str	r2, [r7, #28]
 8009002:	005b      	lsls	r3, r3, #1
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	4413      	add	r3, r2
 8009008:	881b      	ldrh	r3, [r3, #0]
 800900a:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800900c:	4a1c      	ldr	r2, [pc, #112]	; (8009080 <fit_lfn+0xe4>)
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	4413      	add	r3, r2
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	461a      	mov	r2, r3
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	4413      	add	r3, r2
 800901a:	8afa      	ldrh	r2, [r7, #22]
 800901c:	b2d2      	uxtb	r2, r2
 800901e:	701a      	strb	r2, [r3, #0]
 8009020:	8afb      	ldrh	r3, [r7, #22]
 8009022:	0a1b      	lsrs	r3, r3, #8
 8009024:	b299      	uxth	r1, r3
 8009026:	4a16      	ldr	r2, [pc, #88]	; (8009080 <fit_lfn+0xe4>)
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	4413      	add	r3, r2
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	3301      	adds	r3, #1
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	4413      	add	r3, r2
 8009034:	b2ca      	uxtb	r2, r1
 8009036:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8009038:	8afb      	ldrh	r3, [r7, #22]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d102      	bne.n	8009044 <fit_lfn+0xa8>
 800903e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009042:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009044:	69bb      	ldr	r3, [r7, #24]
 8009046:	3301      	adds	r3, #1
 8009048:	61bb      	str	r3, [r7, #24]
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	2b0c      	cmp	r3, #12
 800904e:	d9d0      	bls.n	8008ff2 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8009050:	8afb      	ldrh	r3, [r7, #22]
 8009052:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009056:	4293      	cmp	r3, r2
 8009058:	d006      	beq.n	8009068 <fit_lfn+0xcc>
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	005b      	lsls	r3, r3, #1
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	4413      	add	r3, r2
 8009062:	881b      	ldrh	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d103      	bne.n	8009070 <fit_lfn+0xd4>
 8009068:	79fb      	ldrb	r3, [r7, #7]
 800906a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800906e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	79fa      	ldrb	r2, [r7, #7]
 8009074:	701a      	strb	r2, [r3, #0]
}
 8009076:	bf00      	nop
 8009078:	3724      	adds	r7, #36	; 0x24
 800907a:	46bd      	mov	sp, r7
 800907c:	bc80      	pop	{r7}
 800907e:	4770      	bx	lr
 8009080:	0800ce94 	.word	0x0800ce94

08009084 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b08c      	sub	sp, #48	; 0x30
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	607a      	str	r2, [r7, #4]
 8009090:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009092:	220b      	movs	r2, #11
 8009094:	68b9      	ldr	r1, [r7, #8]
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	f7fe fdd8 	bl	8007c4c <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	2b05      	cmp	r3, #5
 80090a0:	d92b      	bls.n	80090fa <gen_numname+0x76>
		sr = seq;
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80090a6:	e022      	b.n	80090ee <gen_numname+0x6a>
			wc = *lfn++;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	1c9a      	adds	r2, r3, #2
 80090ac:	607a      	str	r2, [r7, #4]
 80090ae:	881b      	ldrh	r3, [r3, #0]
 80090b0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80090b2:	2300      	movs	r3, #0
 80090b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80090b6:	e017      	b.n	80090e8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	005a      	lsls	r2, r3, #1
 80090bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80090be:	f003 0301 	and.w	r3, r3, #1
 80090c2:	4413      	add	r3, r2
 80090c4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80090c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80090c8:	085b      	lsrs	r3, r3, #1
 80090ca:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d005      	beq.n	80090e2 <gen_numname+0x5e>
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80090dc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80090e0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80090e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e4:	3301      	adds	r3, #1
 80090e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80090e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ea:	2b0f      	cmp	r3, #15
 80090ec:	d9e4      	bls.n	80090b8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	881b      	ldrh	r3, [r3, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1d8      	bne.n	80090a8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80090fa:	2307      	movs	r3, #7
 80090fc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	b2db      	uxtb	r3, r3
 8009102:	f003 030f 	and.w	r3, r3, #15
 8009106:	b2db      	uxtb	r3, r3
 8009108:	3330      	adds	r3, #48	; 0x30
 800910a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800910e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009112:	2b39      	cmp	r3, #57	; 0x39
 8009114:	d904      	bls.n	8009120 <gen_numname+0x9c>
 8009116:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800911a:	3307      	adds	r3, #7
 800911c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009122:	1e5a      	subs	r2, r3, #1
 8009124:	62ba      	str	r2, [r7, #40]	; 0x28
 8009126:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800912a:	4413      	add	r3, r2
 800912c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009130:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	091b      	lsrs	r3, r3, #4
 8009138:	603b      	str	r3, [r7, #0]
	} while (seq);
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1de      	bne.n	80090fe <gen_numname+0x7a>
	ns[i] = '~';
 8009140:	f107 0214 	add.w	r2, r7, #20
 8009144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009146:	4413      	add	r3, r2
 8009148:	227e      	movs	r2, #126	; 0x7e
 800914a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800914c:	2300      	movs	r3, #0
 800914e:	627b      	str	r3, [r7, #36]	; 0x24
 8009150:	e002      	b.n	8009158 <gen_numname+0xd4>
 8009152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009154:	3301      	adds	r3, #1
 8009156:	627b      	str	r3, [r7, #36]	; 0x24
 8009158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800915a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915c:	429a      	cmp	r2, r3
 800915e:	d205      	bcs.n	800916c <gen_numname+0xe8>
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009164:	4413      	add	r3, r2
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	2b20      	cmp	r3, #32
 800916a:	d1f2      	bne.n	8009152 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800916c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916e:	2b07      	cmp	r3, #7
 8009170:	d808      	bhi.n	8009184 <gen_numname+0x100>
 8009172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009174:	1c5a      	adds	r2, r3, #1
 8009176:	62ba      	str	r2, [r7, #40]	; 0x28
 8009178:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800917c:	4413      	add	r3, r2
 800917e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009182:	e000      	b.n	8009186 <gen_numname+0x102>
 8009184:	2120      	movs	r1, #32
 8009186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009188:	1c5a      	adds	r2, r3, #1
 800918a:	627a      	str	r2, [r7, #36]	; 0x24
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	4413      	add	r3, r2
 8009190:	460a      	mov	r2, r1
 8009192:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009196:	2b07      	cmp	r3, #7
 8009198:	d9e8      	bls.n	800916c <gen_numname+0xe8>
}
 800919a:	bf00      	nop
 800919c:	bf00      	nop
 800919e:	3730      	adds	r7, #48	; 0x30
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80091ac:	2300      	movs	r3, #0
 80091ae:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80091b0:	230b      	movs	r3, #11
 80091b2:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80091b4:	7bfb      	ldrb	r3, [r7, #15]
 80091b6:	b2da      	uxtb	r2, r3
 80091b8:	0852      	lsrs	r2, r2, #1
 80091ba:	01db      	lsls	r3, r3, #7
 80091bc:	4313      	orrs	r3, r2
 80091be:	b2da      	uxtb	r2, r3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	1c59      	adds	r1, r3, #1
 80091c4:	6079      	str	r1, [r7, #4]
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	4413      	add	r3, r2
 80091ca:	73fb      	strb	r3, [r7, #15]
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	3b01      	subs	r3, #1
 80091d0:	60bb      	str	r3, [r7, #8]
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d1ed      	bne.n	80091b4 <sum_sfn+0x10>
	return sum;
 80091d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3714      	adds	r7, #20
 80091de:	46bd      	mov	sp, r7
 80091e0:	bc80      	pop	{r7}
 80091e2:	4770      	bx	lr

080091e4 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b086      	sub	sp, #24
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80091ec:	2100      	movs	r1, #0
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f7ff fbfe 	bl	80089f0 <dir_sdi>
 80091f4:	4603      	mov	r3, r0
 80091f6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80091f8:	7dfb      	ldrb	r3, [r7, #23]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d001      	beq.n	8009202 <dir_find+0x1e>
 80091fe:	7dfb      	ldrb	r3, [r7, #23]
 8009200:	e0ac      	b.n	800935c <dir_find+0x178>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8009202:	23ff      	movs	r3, #255	; 0xff
 8009204:	753b      	strb	r3, [r7, #20]
 8009206:	7d3b      	ldrb	r3, [r7, #20]
 8009208:	757b      	strb	r3, [r7, #21]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009210:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8009220:	4619      	mov	r1, r3
 8009222:	4610      	mov	r0, r2
 8009224:	f7fe ff87 	bl	8008136 <move_window>
 8009228:	4603      	mov	r3, r0
 800922a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800922c:	7dfb      	ldrb	r3, [r7, #23]
 800922e:	2b00      	cmp	r3, #0
 8009230:	f040 808e 	bne.w	8009350 <dir_find+0x16c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800923a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009242:	7dbb      	ldrb	r3, [r7, #22]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d102      	bne.n	800924e <dir_find+0x6a>
 8009248:	2304      	movs	r3, #4
 800924a:	75fb      	strb	r3, [r7, #23]
 800924c:	e085      	b.n	800935a <dir_find+0x176>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	330b      	adds	r3, #11
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009258:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800925a:	7dbb      	ldrb	r3, [r7, #22]
 800925c:	2be5      	cmp	r3, #229	; 0xe5
 800925e:	d007      	beq.n	8009270 <dir_find+0x8c>
 8009260:	7bfb      	ldrb	r3, [r7, #15]
 8009262:	f003 0308 	and.w	r3, r3, #8
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00a      	beq.n	8009280 <dir_find+0x9c>
 800926a:	7bfb      	ldrb	r3, [r7, #15]
 800926c:	2b0f      	cmp	r3, #15
 800926e:	d007      	beq.n	8009280 <dir_find+0x9c>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8009270:	23ff      	movs	r3, #255	; 0xff
 8009272:	757b      	strb	r3, [r7, #21]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800927a:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
 800927e:	e05c      	b.n	800933a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009280:	7bfb      	ldrb	r3, [r7, #15]
 8009282:	2b0f      	cmp	r3, #15
 8009284:	d133      	bne.n	80092ee <dir_find+0x10a>
				if (dp->lfn) {
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800928c:	2b00      	cmp	r3, #0
 800928e:	d054      	beq.n	800933a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009290:	7dbb      	ldrb	r3, [r7, #22]
 8009292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00e      	beq.n	80092b8 <dir_find+0xd4>
						sum = dir[LDIR_Chksum];
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	7b5b      	ldrb	r3, [r3, #13]
 800929e:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80092a0:	7dbb      	ldrb	r3, [r7, #22]
 80092a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092a6:	75bb      	strb	r3, [r7, #22]
 80092a8:	7dbb      	ldrb	r3, [r7, #22]
 80092aa:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80092b8:	7dba      	ldrb	r2, [r7, #22]
 80092ba:	7d7b      	ldrb	r3, [r7, #21]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d113      	bne.n	80092e8 <dir_find+0x104>
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	330d      	adds	r3, #13
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	7d3a      	ldrb	r2, [r7, #20]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d10d      	bne.n	80092e8 <dir_find+0x104>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80092d2:	6939      	ldr	r1, [r7, #16]
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7ff fdf3 	bl	8008ec0 <cmp_lfn>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d003      	beq.n	80092e8 <dir_find+0x104>
 80092e0:	7d7b      	ldrb	r3, [r7, #21]
 80092e2:	3b01      	subs	r3, #1
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	e000      	b.n	80092ea <dir_find+0x106>
 80092e8:	23ff      	movs	r3, #255	; 0xff
 80092ea:	757b      	strb	r3, [r7, #21]
 80092ec:	e025      	b.n	800933a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80092ee:	7d7b      	ldrb	r3, [r7, #21]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d107      	bne.n	8009304 <dir_find+0x120>
 80092f4:	6938      	ldr	r0, [r7, #16]
 80092f6:	f7ff ff55 	bl	80091a4 <sum_sfn>
 80092fa:	4603      	mov	r3, r0
 80092fc:	461a      	mov	r2, r3
 80092fe:	7d3b      	ldrb	r3, [r7, #20]
 8009300:	4293      	cmp	r3, r2
 8009302:	d027      	beq.n	8009354 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800930a:	330b      	adds	r3, #11
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	f003 0301 	and.w	r3, r3, #1
 8009312:	2b00      	cmp	r3, #0
 8009314:	d10a      	bne.n	800932c <dir_find+0x148>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800931c:	220b      	movs	r2, #11
 800931e:	4619      	mov	r1, r3
 8009320:	6938      	ldr	r0, [r7, #16]
 8009322:	f7fe fccb 	bl	8007cbc <mem_cmp>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d015      	beq.n	8009358 <dir_find+0x174>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800932c:	23ff      	movs	r3, #255	; 0xff
 800932e:	757b      	strb	r3, [r7, #21]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009336:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800933a:	2100      	movs	r1, #0
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f7ff fc08 	bl	8008b52 <dir_next>
 8009342:	4603      	mov	r3, r0
 8009344:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009346:	7dfb      	ldrb	r3, [r7, #23]
 8009348:	2b00      	cmp	r3, #0
 800934a:	f43f af63 	beq.w	8009214 <dir_find+0x30>
 800934e:	e004      	b.n	800935a <dir_find+0x176>
		if (res != FR_OK) break;
 8009350:	bf00      	nop
 8009352:	e002      	b.n	800935a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8009354:	bf00      	nop
 8009356:	e000      	b.n	800935a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8009358:	bf00      	nop

	return res;
 800935a:	7dfb      	ldrb	r3, [r7, #23]
}
 800935c:	4618      	mov	r0, r3
 800935e:	3718      	adds	r7, #24
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b08c      	sub	sp, #48	; 0x30
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8009372:	623b      	str	r3, [r7, #32]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800937a:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800937c:	f107 030c 	add.w	r3, r7, #12
 8009380:	220c      	movs	r2, #12
 8009382:	6a39      	ldr	r1, [r7, #32]
 8009384:	4618      	mov	r0, r3
 8009386:	f7fe fc61 	bl	8007c4c <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800938a:	7dfb      	ldrb	r3, [r7, #23]
 800938c:	f003 0301 	and.w	r3, r3, #1
 8009390:	2b00      	cmp	r3, #0
 8009392:	d037      	beq.n	8009404 <dir_register+0xa0>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8009394:	6a3b      	ldr	r3, [r7, #32]
 8009396:	330b      	adds	r3, #11
 8009398:	2200      	movs	r2, #0
 800939a:	701a      	strb	r2, [r3, #0]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
		for (n = 1; n < 100; n++) {
 80093a4:	2301      	movs	r3, #1
 80093a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80093a8:	e013      	b.n	80093d2 <dir_register+0x6e>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 80093aa:	f107 010c 	add.w	r1, r7, #12
 80093ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b0:	69fa      	ldr	r2, [r7, #28]
 80093b2:	6a38      	ldr	r0, [r7, #32]
 80093b4:	f7ff fe66 	bl	8009084 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f7ff ff13 	bl	80091e4 <dir_find>
 80093be:	4603      	mov	r3, r0
 80093c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80093c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d106      	bne.n	80093da <dir_register+0x76>
		for (n = 1; n < 100; n++) {
 80093cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ce:	3301      	adds	r3, #1
 80093d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80093d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d4:	2b63      	cmp	r3, #99	; 0x63
 80093d6:	d9e8      	bls.n	80093aa <dir_register+0x46>
 80093d8:	e000      	b.n	80093dc <dir_register+0x78>
			if (res != FR_OK) break;
 80093da:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80093dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093de:	2b64      	cmp	r3, #100	; 0x64
 80093e0:	d101      	bne.n	80093e6 <dir_register+0x82>
 80093e2:	2307      	movs	r3, #7
 80093e4:	e0c5      	b.n	8009572 <dir_register+0x20e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80093e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80093ea:	2b04      	cmp	r3, #4
 80093ec:	d002      	beq.n	80093f4 <dir_register+0x90>
 80093ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80093f2:	e0be      	b.n	8009572 <dir_register+0x20e>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 80093f4:	6a3b      	ldr	r3, [r7, #32]
 80093f6:	330b      	adds	r3, #11
 80093f8:	7dfa      	ldrb	r2, [r7, #23]
 80093fa:	701a      	strb	r2, [r3, #0]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	69fa      	ldr	r2, [r7, #28]
 8009400:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8009404:	7dfb      	ldrb	r3, [r7, #23]
 8009406:	f003 0302 	and.w	r3, r3, #2
 800940a:	2b00      	cmp	r3, #0
 800940c:	d014      	beq.n	8009438 <dir_register+0xd4>
		for (n = 0; lfn[n]; n++) ;
 800940e:	2300      	movs	r3, #0
 8009410:	62bb      	str	r3, [r7, #40]	; 0x28
 8009412:	e002      	b.n	800941a <dir_register+0xb6>
 8009414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009416:	3301      	adds	r3, #1
 8009418:	62bb      	str	r3, [r7, #40]	; 0x28
 800941a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941c:	005b      	lsls	r3, r3, #1
 800941e:	69fa      	ldr	r2, [r7, #28]
 8009420:	4413      	add	r3, r2
 8009422:	881b      	ldrh	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d1f5      	bne.n	8009414 <dir_register+0xb0>
		nent = (n + 25) / 13;
 8009428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942a:	3319      	adds	r3, #25
 800942c:	4a53      	ldr	r2, [pc, #332]	; (800957c <dir_register+0x218>)
 800942e:	fba2 2303 	umull	r2, r3, r2, r3
 8009432:	089b      	lsrs	r3, r3, #2
 8009434:	627b      	str	r3, [r7, #36]	; 0x24
 8009436:	e001      	b.n	800943c <dir_register+0xd8>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8009438:	2301      	movs	r3, #1
 800943a:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800943c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f7ff fca1 	bl	8008d86 <dir_alloc>
 8009444:	4603      	mov	r3, r0
 8009446:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800944a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800944e:	2b00      	cmp	r3, #0
 8009450:	d153      	bne.n	80094fa <dir_register+0x196>
 8009452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009454:	3b01      	subs	r3, #1
 8009456:	627b      	str	r3, [r7, #36]	; 0x24
 8009458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945a:	2b00      	cmp	r3, #0
 800945c:	d04d      	beq.n	80094fa <dir_register+0x196>
		res = dir_sdi(dp, dp->index - nent);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8009464:	461a      	mov	r2, r3
 8009466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009468:	1ad3      	subs	r3, r2, r3
 800946a:	4619      	mov	r1, r3
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f7ff fabf 	bl	80089f0 <dir_sdi>
 8009472:	4603      	mov	r3, r0
 8009474:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009478:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800947c:	2b00      	cmp	r3, #0
 800947e:	d13c      	bne.n	80094fa <dir_register+0x196>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8009486:	4618      	mov	r0, r3
 8009488:	f7ff fe8c 	bl	80091a4 <sum_sfn>
 800948c:	4603      	mov	r3, r0
 800948e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800949c:	4619      	mov	r1, r3
 800949e:	4610      	mov	r0, r2
 80094a0:	f7fe fe49 	bl	8008136 <move_window>
 80094a4:	4603      	mov	r3, r0
 80094a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80094aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d122      	bne.n	80094f8 <dir_register+0x194>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
 80094be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c0:	b2da      	uxtb	r2, r3
 80094c2:	7efb      	ldrb	r3, [r7, #27]
 80094c4:	f7ff fd6a 	bl	8008f9c <fit_lfn>
				dp->fs->wflag = 1;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80094ce:	2201      	movs	r2, #1
 80094d0:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = dir_next(dp, 0);	/* Next entry */
 80094d4:	2100      	movs	r1, #0
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f7ff fb3b 	bl	8008b52 <dir_next>
 80094dc:	4603      	mov	r3, r0
 80094de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80094e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d107      	bne.n	80094fa <dir_register+0x196>
 80094ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ec:	3b01      	subs	r3, #1
 80094ee:	627b      	str	r3, [r7, #36]	; 0x24
 80094f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1cc      	bne.n	8009490 <dir_register+0x12c>
 80094f6:	e000      	b.n	80094fa <dir_register+0x196>
				if (res != FR_OK) break;
 80094f8:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80094fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d135      	bne.n	800956e <dir_register+0x20a>
		res = move_window(dp->fs, dp->sect);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800950e:	4619      	mov	r1, r3
 8009510:	4610      	mov	r0, r2
 8009512:	f7fe fe10 	bl	8008136 <move_window>
 8009516:	4603      	mov	r3, r0
 8009518:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800951c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009520:	2b00      	cmp	r3, #0
 8009522:	d124      	bne.n	800956e <dir_register+0x20a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800952a:	2220      	movs	r2, #32
 800952c:	2100      	movs	r1, #0
 800952e:	4618      	mov	r0, r3
 8009530:	f7fe fbaa 	bl	8007c88 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8009540:	220b      	movs	r2, #11
 8009542:	4619      	mov	r1, r3
 8009544:	f7fe fb82 	bl	8007c4c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800954e:	330b      	adds	r3, #11
 8009550:	781a      	ldrb	r2, [r3, #0]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8009558:	330c      	adds	r3, #12
 800955a:	f002 0218 	and.w	r2, r2, #24
 800955e:	b2d2      	uxtb	r2, r2
 8009560:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009568:	2201      	movs	r2, #1
 800956a:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
		}
	}

	return res;
 800956e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009572:	4618      	mov	r0, r3
 8009574:	3730      	adds	r7, #48	; 0x30
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	4ec4ec4f 	.word	0x4ec4ec4f

08009580 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b08a      	sub	sp, #40	; 0x28
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	613b      	str	r3, [r7, #16]
 8009590:	e002      	b.n	8009598 <create_name+0x18>
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	3301      	adds	r3, #1
 8009596:	613b      	str	r3, [r7, #16]
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	2b2f      	cmp	r3, #47	; 0x2f
 800959e:	d0f8      	beq.n	8009592 <create_name+0x12>
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	2b5c      	cmp	r3, #92	; 0x5c
 80095a6:	d0f4      	beq.n	8009592 <create_name+0x12>
	lfn = dp->lfn;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80095ae:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 80095b0:	2300      	movs	r3, #0
 80095b2:	617b      	str	r3, [r7, #20]
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80095b8:	69bb      	ldr	r3, [r7, #24]
 80095ba:	1c5a      	adds	r2, r3, #1
 80095bc:	61ba      	str	r2, [r7, #24]
 80095be:	693a      	ldr	r2, [r7, #16]
 80095c0:	4413      	add	r3, r2
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 80095c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095c8:	2b1f      	cmp	r3, #31
 80095ca:	d92f      	bls.n	800962c <create_name+0xac>
 80095cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095ce:	2b2f      	cmp	r3, #47	; 0x2f
 80095d0:	d02c      	beq.n	800962c <create_name+0xac>
 80095d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095d4:	2b5c      	cmp	r3, #92	; 0x5c
 80095d6:	d029      	beq.n	800962c <create_name+0xac>
		if (di >= _MAX_LFN)				/* Reject too long name */
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	2bfe      	cmp	r3, #254	; 0xfe
 80095dc:	d901      	bls.n	80095e2 <create_name+0x62>
			return FR_INVALID_NAME;
 80095de:	2306      	movs	r3, #6
 80095e0:	e17b      	b.n	80098da <create_name+0x35a>
#if !_LFN_UNICODE
		w &= 0xFF;
 80095e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80095e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095ea:	2101      	movs	r1, #1
 80095ec:	4618      	mov	r0, r3
 80095ee:	f001 fe5b 	bl	800b2a8 <ff_convert>
 80095f2:	4603      	mov	r3, r0
 80095f4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80095f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d101      	bne.n	8009600 <create_name+0x80>
 80095fc:	2306      	movs	r3, #6
 80095fe:	e16c      	b.n	80098da <create_name+0x35a>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8009600:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009602:	2b7f      	cmp	r3, #127	; 0x7f
 8009604:	d809      	bhi.n	800961a <create_name+0x9a>
 8009606:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009608:	4619      	mov	r1, r3
 800960a:	48b6      	ldr	r0, [pc, #728]	; (80098e4 <create_name+0x364>)
 800960c:	f7fe fb7c 	bl	8007d08 <chk_chr>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d001      	beq.n	800961a <create_name+0x9a>
			return FR_INVALID_NAME;
 8009616:	2306      	movs	r3, #6
 8009618:	e15f      	b.n	80098da <create_name+0x35a>
		lfn[di++] = w;					/* Store the Unicode character */
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	1c5a      	adds	r2, r3, #1
 800961e:	617a      	str	r2, [r7, #20]
 8009620:	005b      	lsls	r3, r3, #1
 8009622:	68fa      	ldr	r2, [r7, #12]
 8009624:	4413      	add	r3, r2
 8009626:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009628:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800962a:	e7c5      	b.n	80095b8 <create_name+0x38>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800962c:	693a      	ldr	r2, [r7, #16]
 800962e:	69bb      	ldr	r3, [r7, #24]
 8009630:	441a      	add	r2, r3
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8009636:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009638:	2b1f      	cmp	r3, #31
 800963a:	d801      	bhi.n	8009640 <create_name+0xc0>
 800963c:	2304      	movs	r3, #4
 800963e:	e000      	b.n	8009642 <create_name+0xc2>
 8009640:	2300      	movs	r3, #0
 8009642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8009646:	e011      	b.n	800966c <create_name+0xec>
		w = lfn[di - 1];
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800964e:	3b01      	subs	r3, #1
 8009650:	005b      	lsls	r3, r3, #1
 8009652:	68fa      	ldr	r2, [r7, #12]
 8009654:	4413      	add	r3, r2
 8009656:	881b      	ldrh	r3, [r3, #0]
 8009658:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800965a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800965c:	2b20      	cmp	r3, #32
 800965e:	d002      	beq.n	8009666 <create_name+0xe6>
 8009660:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009662:	2b2e      	cmp	r3, #46	; 0x2e
 8009664:	d106      	bne.n	8009674 <create_name+0xf4>
		di--;
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	3b01      	subs	r3, #1
 800966a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1ea      	bne.n	8009648 <create_name+0xc8>
 8009672:	e000      	b.n	8009676 <create_name+0xf6>
		if (w != ' ' && w != '.') break;
 8009674:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d101      	bne.n	8009680 <create_name+0x100>
 800967c:	2306      	movs	r3, #6
 800967e:	e12c      	b.n	80098da <create_name+0x35a>

	lfn[di] = 0;						/* LFN is created */
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	005b      	lsls	r3, r3, #1
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	4413      	add	r3, r2
 8009688:	2200      	movs	r2, #0
 800968a:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8009692:	220b      	movs	r2, #11
 8009694:	2120      	movs	r1, #32
 8009696:	4618      	mov	r0, r3
 8009698:	f7fe faf6 	bl	8007c88 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800969c:	2300      	movs	r3, #0
 800969e:	61bb      	str	r3, [r7, #24]
 80096a0:	e002      	b.n	80096a8 <create_name+0x128>
 80096a2:	69bb      	ldr	r3, [r7, #24]
 80096a4:	3301      	adds	r3, #1
 80096a6:	61bb      	str	r3, [r7, #24]
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	005b      	lsls	r3, r3, #1
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	4413      	add	r3, r2
 80096b0:	881b      	ldrh	r3, [r3, #0]
 80096b2:	2b20      	cmp	r3, #32
 80096b4:	d0f5      	beq.n	80096a2 <create_name+0x122>
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	005b      	lsls	r3, r3, #1
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	4413      	add	r3, r2
 80096be:	881b      	ldrh	r3, [r3, #0]
 80096c0:	2b2e      	cmp	r3, #46	; 0x2e
 80096c2:	d0ee      	beq.n	80096a2 <create_name+0x122>
	if (si) cf |= NS_LOSS | NS_LFN;
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d009      	beq.n	80096de <create_name+0x15e>
 80096ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096ce:	f043 0303 	orr.w	r3, r3, #3
 80096d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80096d6:	e002      	b.n	80096de <create_name+0x15e>
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	3b01      	subs	r3, #1
 80096dc:	617b      	str	r3, [r7, #20]
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d009      	beq.n	80096f8 <create_name+0x178>
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80096ea:	3b01      	subs	r3, #1
 80096ec:	005b      	lsls	r3, r3, #1
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	4413      	add	r3, r2
 80096f2:	881b      	ldrh	r3, [r3, #0]
 80096f4:	2b2e      	cmp	r3, #46	; 0x2e
 80096f6:	d1ef      	bne.n	80096d8 <create_name+0x158>

	b = i = 0; ni = 8;
 80096f8:	2300      	movs	r3, #0
 80096fa:	623b      	str	r3, [r7, #32]
 80096fc:	2300      	movs	r3, #0
 80096fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009702:	2308      	movs	r3, #8
 8009704:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	1c5a      	adds	r2, r3, #1
 800970a:	61ba      	str	r2, [r7, #24]
 800970c:	005b      	lsls	r3, r3, #1
 800970e:	68fa      	ldr	r2, [r7, #12]
 8009710:	4413      	add	r3, r2
 8009712:	881b      	ldrh	r3, [r3, #0]
 8009714:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009716:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009718:	2b00      	cmp	r3, #0
 800971a:	f000 8090 	beq.w	800983e <create_name+0x2be>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800971e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009720:	2b20      	cmp	r3, #32
 8009722:	d006      	beq.n	8009732 <create_name+0x1b2>
 8009724:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009726:	2b2e      	cmp	r3, #46	; 0x2e
 8009728:	d10a      	bne.n	8009740 <create_name+0x1c0>
 800972a:	69ba      	ldr	r2, [r7, #24]
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	429a      	cmp	r2, r3
 8009730:	d006      	beq.n	8009740 <create_name+0x1c0>
			cf |= NS_LOSS | NS_LFN; continue;
 8009732:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009736:	f043 0303 	orr.w	r3, r3, #3
 800973a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800973e:	e07d      	b.n	800983c <create_name+0x2bc>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009740:	6a3a      	ldr	r2, [r7, #32]
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	429a      	cmp	r2, r3
 8009746:	d203      	bcs.n	8009750 <create_name+0x1d0>
 8009748:	69ba      	ldr	r2, [r7, #24]
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	429a      	cmp	r2, r3
 800974e:	d123      	bne.n	8009798 <create_name+0x218>
			if (ni == 11) {				/* Long extension */
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	2b0b      	cmp	r3, #11
 8009754:	d106      	bne.n	8009764 <create_name+0x1e4>
				cf |= NS_LOSS | NS_LFN; break;
 8009756:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800975a:	f043 0303 	orr.w	r3, r3, #3
 800975e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009762:	e06f      	b.n	8009844 <create_name+0x2c4>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009764:	69ba      	ldr	r2, [r7, #24]
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	429a      	cmp	r2, r3
 800976a:	d005      	beq.n	8009778 <create_name+0x1f8>
 800976c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009770:	f043 0303 	orr.w	r3, r3, #3
 8009774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009778:	69ba      	ldr	r2, [r7, #24]
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	429a      	cmp	r2, r3
 800977e:	d860      	bhi.n	8009842 <create_name+0x2c2>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	61bb      	str	r3, [r7, #24]
 8009784:	2308      	movs	r3, #8
 8009786:	623b      	str	r3, [r7, #32]
 8009788:	230b      	movs	r3, #11
 800978a:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800978c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009796:	e051      	b.n	800983c <create_name+0x2bc>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009798:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800979a:	2b7f      	cmp	r3, #127	; 0x7f
 800979c:	d914      	bls.n	80097c8 <create_name+0x248>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800979e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097a0:	2100      	movs	r1, #0
 80097a2:	4618      	mov	r0, r3
 80097a4:	f001 fd80 	bl	800b2a8 <ff_convert>
 80097a8:	4603      	mov	r3, r0
 80097aa:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80097ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d004      	beq.n	80097bc <create_name+0x23c>
 80097b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097b4:	3b80      	subs	r3, #128	; 0x80
 80097b6:	4a4c      	ldr	r2, [pc, #304]	; (80098e8 <create_name+0x368>)
 80097b8:	5cd3      	ldrb	r3, [r2, r3]
 80097ba:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80097bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097c0:	f043 0302 	orr.w	r3, r3, #2
 80097c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80097c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d007      	beq.n	80097de <create_name+0x25e>
 80097ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097d0:	4619      	mov	r1, r3
 80097d2:	4846      	ldr	r0, [pc, #280]	; (80098ec <create_name+0x36c>)
 80097d4:	f7fe fa98 	bl	8007d08 <chk_chr>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d008      	beq.n	80097f0 <create_name+0x270>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80097de:	235f      	movs	r3, #95	; 0x5f
 80097e0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80097e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097e6:	f043 0303 	orr.w	r3, r3, #3
 80097ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80097ee:	e01b      	b.n	8009828 <create_name+0x2a8>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80097f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097f2:	2b40      	cmp	r3, #64	; 0x40
 80097f4:	d909      	bls.n	800980a <create_name+0x28a>
 80097f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097f8:	2b5a      	cmp	r3, #90	; 0x5a
 80097fa:	d806      	bhi.n	800980a <create_name+0x28a>
					b |= 2;
 80097fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009800:	f043 0302 	orr.w	r3, r3, #2
 8009804:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009808:	e00e      	b.n	8009828 <create_name+0x2a8>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800980a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800980c:	2b60      	cmp	r3, #96	; 0x60
 800980e:	d90b      	bls.n	8009828 <create_name+0x2a8>
 8009810:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009812:	2b7a      	cmp	r3, #122	; 0x7a
 8009814:	d808      	bhi.n	8009828 <create_name+0x2a8>
						b |= 1; w -= 0x20;
 8009816:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800981a:	f043 0301 	orr.w	r3, r3, #1
 800981e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009822:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009824:	3b20      	subs	r3, #32
 8009826:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800982e:	6a3b      	ldr	r3, [r7, #32]
 8009830:	1c59      	adds	r1, r3, #1
 8009832:	6239      	str	r1, [r7, #32]
 8009834:	4413      	add	r3, r2
 8009836:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009838:	b2d2      	uxtb	r2, r2
 800983a:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800983c:	e763      	b.n	8009706 <create_name+0x186>
		if (!w) break;					/* Break on end of the LFN */
 800983e:	bf00      	nop
 8009840:	e000      	b.n	8009844 <create_name+0x2c4>
			if (si > di) break;			/* No extension */
 8009842:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	2be5      	cmp	r3, #229	; 0xe5
 800984e:	d104      	bne.n	800985a <create_name+0x2da>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8009856:	2205      	movs	r2, #5
 8009858:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800985a:	69fb      	ldr	r3, [r7, #28]
 800985c:	2b08      	cmp	r3, #8
 800985e:	d104      	bne.n	800986a <create_name+0x2ea>
 8009860:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800986a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800986e:	f003 030c 	and.w	r3, r3, #12
 8009872:	2b0c      	cmp	r3, #12
 8009874:	d005      	beq.n	8009882 <create_name+0x302>
 8009876:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800987a:	f003 0303 	and.w	r3, r3, #3
 800987e:	2b03      	cmp	r3, #3
 8009880:	d105      	bne.n	800988e <create_name+0x30e>
		cf |= NS_LFN;
 8009882:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009886:	f043 0302 	orr.w	r3, r3, #2
 800988a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800988e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009892:	f003 0302 	and.w	r3, r3, #2
 8009896:	2b00      	cmp	r3, #0
 8009898:	d117      	bne.n	80098ca <create_name+0x34a>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800989a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800989e:	f003 0303 	and.w	r3, r3, #3
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d105      	bne.n	80098b2 <create_name+0x332>
 80098a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098aa:	f043 0310 	orr.w	r3, r3, #16
 80098ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80098b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80098b6:	f003 030c 	and.w	r3, r3, #12
 80098ba:	2b04      	cmp	r3, #4
 80098bc:	d105      	bne.n	80098ca <create_name+0x34a>
 80098be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098c2:	f043 0308 	orr.w	r3, r3, #8
 80098c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80098d0:	330b      	adds	r3, #11
 80098d2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80098d6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80098d8:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3728      	adds	r7, #40	; 0x28
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	0800cdb4 	.word	0x0800cdb4
 80098e8:	0800ce14 	.word	0x0800ce14
 80098ec:	0800cdc0 	.word	0x0800cdc0

080098f0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	2b2f      	cmp	r3, #47	; 0x2f
 8009900:	d003      	beq.n	800990a <follow_path+0x1a>
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	2b5c      	cmp	r3, #92	; 0x5c
 8009908:	d102      	bne.n	8009910 <follow_path+0x20>
		path++;
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	3301      	adds	r3, #1
 800990e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	2b1f      	cmp	r3, #31
 800991e:	d80a      	bhi.n	8009936 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8009920:	2100      	movs	r1, #0
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f7ff f864 	bl	80089f0 <dir_sdi>
 8009928:	4603      	mov	r3, r0
 800992a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8009934:	e045      	b.n	80099c2 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009936:	463b      	mov	r3, r7
 8009938:	4619      	mov	r1, r3
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f7ff fe20 	bl	8009580 <create_name>
 8009940:	4603      	mov	r3, r0
 8009942:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8009944:	7bfb      	ldrb	r3, [r7, #15]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d136      	bne.n	80099b8 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f7ff fc4a 	bl	80091e4 <dir_find>
 8009950:	4603      	mov	r3, r0
 8009952:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800995a:	7adb      	ldrb	r3, [r3, #11]
 800995c:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800995e:	7bfb      	ldrb	r3, [r7, #15]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d00a      	beq.n	800997a <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009964:	7bfb      	ldrb	r3, [r7, #15]
 8009966:	2b04      	cmp	r3, #4
 8009968:	d128      	bne.n	80099bc <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800996a:	7bbb      	ldrb	r3, [r7, #14]
 800996c:	f003 0304 	and.w	r3, r3, #4
 8009970:	2b00      	cmp	r3, #0
 8009972:	d123      	bne.n	80099bc <follow_path+0xcc>
 8009974:	2305      	movs	r3, #5
 8009976:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8009978:	e020      	b.n	80099bc <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800997a:	7bbb      	ldrb	r3, [r7, #14]
 800997c:	f003 0304 	and.w	r3, r3, #4
 8009980:	2b00      	cmp	r3, #0
 8009982:	d11d      	bne.n	80099c0 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800998a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	330b      	adds	r3, #11
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	f003 0310 	and.w	r3, r3, #16
 8009996:	2b00      	cmp	r3, #0
 8009998:	d102      	bne.n	80099a0 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800999a:	2305      	movs	r3, #5
 800999c:	73fb      	strb	r3, [r7, #15]
 800999e:	e010      	b.n	80099c2 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80099a6:	68b9      	ldr	r1, [r7, #8]
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7ff fa36 	bl	8008e1a <ld_clust>
 80099ae:	4602      	mov	r2, r0
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80099b6:	e7be      	b.n	8009936 <follow_path+0x46>
			if (res != FR_OK) break;
 80099b8:	bf00      	nop
 80099ba:	e002      	b.n	80099c2 <follow_path+0xd2>
				break;
 80099bc:	bf00      	nop
 80099be:	e000      	b.n	80099c2 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80099c0:	bf00      	nop
		}
	}

	return res;
 80099c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3710      	adds	r7, #16
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b087      	sub	sp, #28
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80099d4:	f04f 33ff 	mov.w	r3, #4294967295
 80099d8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d031      	beq.n	8009a46 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	617b      	str	r3, [r7, #20]
 80099e8:	e002      	b.n	80099f0 <get_ldnumber+0x24>
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	3301      	adds	r3, #1
 80099ee:	617b      	str	r3, [r7, #20]
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	2b1f      	cmp	r3, #31
 80099f6:	d903      	bls.n	8009a00 <get_ldnumber+0x34>
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	2b3a      	cmp	r3, #58	; 0x3a
 80099fe:	d1f4      	bne.n	80099ea <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	2b3a      	cmp	r3, #58	; 0x3a
 8009a06:	d11c      	bne.n	8009a42 <get_ldnumber+0x76>
			tp = *path;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	1c5a      	adds	r2, r3, #1
 8009a12:	60fa      	str	r2, [r7, #12]
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	3b30      	subs	r3, #48	; 0x30
 8009a18:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	2b09      	cmp	r3, #9
 8009a1e:	d80e      	bhi.n	8009a3e <get_ldnumber+0x72>
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d10a      	bne.n	8009a3e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d107      	bne.n	8009a3e <get_ldnumber+0x72>
					vol = (int)i;
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	3301      	adds	r3, #1
 8009a36:	617b      	str	r3, [r7, #20]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	697a      	ldr	r2, [r7, #20]
 8009a3c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	e002      	b.n	8009a48 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009a42:	2300      	movs	r3, #0
 8009a44:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009a46:	693b      	ldr	r3, [r7, #16]
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	371c      	adds	r7, #28
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bc80      	pop	{r7}
 8009a50:	4770      	bx	lr
	...

08009a54 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f04f 32ff 	mov.w	r2, #4294967295
 8009a6c:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8009a70:	6839      	ldr	r1, [r7, #0]
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f7fe fb5f 	bl	8008136 <move_window>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d001      	beq.n	8009a82 <check_fs+0x2e>
		return 3;
 8009a7e:	2303      	movs	r3, #3
 8009a80:	e04a      	b.n	8009b18 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009a88:	3301      	adds	r3, #1
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	021b      	lsls	r3, r3, #8
 8009a8e:	b21a      	sxth	r2, r3
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8009a96:	b21b      	sxth	r3, r3
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	b21b      	sxth	r3, r3
 8009a9c:	4a20      	ldr	r2, [pc, #128]	; (8009b20 <check_fs+0xcc>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d001      	beq.n	8009aa6 <check_fs+0x52>
		return 2;
 8009aa2:	2302      	movs	r3, #2
 8009aa4:	e038      	b.n	8009b18 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	3336      	adds	r3, #54	; 0x36
 8009aaa:	3303      	adds	r3, #3
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	061a      	lsls	r2, r3, #24
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	3336      	adds	r3, #54	; 0x36
 8009ab4:	3302      	adds	r3, #2
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	041b      	lsls	r3, r3, #16
 8009aba:	4313      	orrs	r3, r2
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	3236      	adds	r2, #54	; 0x36
 8009ac0:	3201      	adds	r2, #1
 8009ac2:	7812      	ldrb	r2, [r2, #0]
 8009ac4:	0212      	lsls	r2, r2, #8
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009ad4:	4a13      	ldr	r2, [pc, #76]	; (8009b24 <check_fs+0xd0>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d101      	bne.n	8009ade <check_fs+0x8a>
		return 0;
 8009ada:	2300      	movs	r3, #0
 8009adc:	e01c      	b.n	8009b18 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	3352      	adds	r3, #82	; 0x52
 8009ae2:	3303      	adds	r3, #3
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	061a      	lsls	r2, r3, #24
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	3352      	adds	r3, #82	; 0x52
 8009aec:	3302      	adds	r3, #2
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	041b      	lsls	r3, r3, #16
 8009af2:	4313      	orrs	r3, r2
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	3252      	adds	r2, #82	; 0x52
 8009af8:	3201      	adds	r2, #1
 8009afa:	7812      	ldrb	r2, [r2, #0]
 8009afc:	0212      	lsls	r2, r2, #8
 8009afe:	4313      	orrs	r3, r2
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8009b06:	4313      	orrs	r3, r2
 8009b08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009b0c:	4a05      	ldr	r2, [pc, #20]	; (8009b24 <check_fs+0xd0>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d101      	bne.n	8009b16 <check_fs+0xc2>
		return 0;
 8009b12:	2300      	movs	r3, #0
 8009b14:	e000      	b.n	8009b18 <check_fs+0xc4>

	return 1;
 8009b16:	2301      	movs	r3, #1
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3708      	adds	r7, #8
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	ffffaa55 	.word	0xffffaa55
 8009b24:	00544146 	.word	0x00544146

08009b28 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b096      	sub	sp, #88	; 0x58
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	4613      	mov	r3, r2
 8009b34:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009b3c:	68b8      	ldr	r0, [r7, #8]
 8009b3e:	f7ff ff45 	bl	80099cc <get_ldnumber>
 8009b42:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	da01      	bge.n	8009b4e <find_volume+0x26>
 8009b4a:	230b      	movs	r3, #11
 8009b4c:	e2de      	b.n	800a10c <find_volume+0x5e4>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009b4e:	4ab1      	ldr	r2, [pc, #708]	; (8009e14 <find_volume+0x2ec>)
 8009b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b56:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d101      	bne.n	8009b62 <find_volume+0x3a>
 8009b5e:	230c      	movs	r3, #12
 8009b60:	e2d4      	b.n	800a10c <find_volume+0x5e4>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b66:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8009b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b6a:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d01b      	beq.n	8009baa <find_volume+0x82>
		stat = disk_status(fs->drv);
 8009b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b74:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7fd ffc9 	bl	8007b10 <disk_status>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009b84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b88:	f003 0301 	and.w	r3, r3, #1
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d10c      	bne.n	8009baa <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8009b90:	79fb      	ldrb	r3, [r7, #7]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d007      	beq.n	8009ba6 <find_volume+0x7e>
 8009b96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b9a:	f003 0304 	and.w	r3, r3, #4
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d001      	beq.n	8009ba6 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8009ba2:	230a      	movs	r3, #10
 8009ba4:	e2b2      	b.n	800a10c <find_volume+0x5e4>
			return FR_OK;				/* The file system object is valid */
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	e2b0      	b.n	800a10c <find_volume+0x5e4>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bac:	2200      	movs	r2, #0
 8009bae:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bb4:	b2da      	uxtb	r2, r3
 8009bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb8:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bbe:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7fd ffbe 	bl	8007b44 <disk_initialize>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8009bce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009bd2:	f003 0301 	and.w	r3, r3, #1
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d001      	beq.n	8009bde <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009bda:	2303      	movs	r3, #3
 8009bdc:	e296      	b.n	800a10c <find_volume+0x5e4>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8009bde:	79fb      	ldrb	r3, [r7, #7]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d007      	beq.n	8009bf4 <find_volume+0xcc>
 8009be4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009be8:	f003 0304 	and.w	r3, r3, #4
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d001      	beq.n	8009bf4 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8009bf0:	230a      	movs	r3, #10
 8009bf2:	e28b      	b.n	800a10c <find_volume+0x5e4>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8009bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf6:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8009bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bfc:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8009c00:	461a      	mov	r2, r3
 8009c02:	2102      	movs	r1, #2
 8009c04:	f7fe f804 	bl	8007c10 <disk_ioctl>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d10b      	bne.n	8009c26 <find_volume+0xfe>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8009c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c10:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8009c14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c18:	d305      	bcc.n	8009c26 <find_volume+0xfe>
 8009c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c1c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8009c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c24:	d901      	bls.n	8009c2a <find_volume+0x102>
 8009c26:	2301      	movs	r3, #1
 8009c28:	e270      	b.n	800a10c <find_volume+0x5e4>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8009c2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009c32:	f7ff ff0f 	bl	8009a54 <check_fs>
 8009c36:	4603      	mov	r3, r0
 8009c38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8009c3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d155      	bne.n	8009cf0 <find_volume+0x1c8>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8009c44:	2300      	movs	r3, #0
 8009c46:	643b      	str	r3, [r7, #64]	; 0x40
 8009c48:	e029      	b.n	8009c9e <find_volume+0x176>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8009c4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c4e:	011b      	lsls	r3, r3, #4
 8009c50:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009c54:	4413      	add	r3, r2
 8009c56:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8009c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c5a:	3304      	adds	r3, #4
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d012      	beq.n	8009c88 <find_volume+0x160>
 8009c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c64:	330b      	adds	r3, #11
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	061a      	lsls	r2, r3, #24
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6c:	330a      	adds	r3, #10
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	041b      	lsls	r3, r3, #16
 8009c72:	4313      	orrs	r3, r2
 8009c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c76:	3209      	adds	r2, #9
 8009c78:	7812      	ldrb	r2, [r2, #0]
 8009c7a:	0212      	lsls	r2, r2, #8
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c80:	3208      	adds	r2, #8
 8009c82:	7812      	ldrb	r2, [r2, #0]
 8009c84:	431a      	orrs	r2, r3
 8009c86:	e000      	b.n	8009c8a <find_volume+0x162>
 8009c88:	2200      	movs	r2, #0
 8009c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8009c92:	440b      	add	r3, r1
 8009c94:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8009c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	643b      	str	r3, [r7, #64]	; 0x40
 8009c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ca0:	2b03      	cmp	r3, #3
 8009ca2:	d9d2      	bls.n	8009c4a <find_volume+0x122>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d002      	beq.n	8009cb4 <find_volume+0x18c>
 8009cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cb0:	3b01      	subs	r3, #1
 8009cb2:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8009cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009cbc:	4413      	add	r3, r2
 8009cbe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009cc2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8009cc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d005      	beq.n	8009cd6 <find_volume+0x1ae>
 8009cca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009ccc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009cce:	f7ff fec1 	bl	8009a54 <check_fs>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	e000      	b.n	8009cd8 <find_volume+0x1b0>
 8009cd6:	2302      	movs	r3, #2
 8009cd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8009cdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d005      	beq.n	8009cf0 <find_volume+0x1c8>
 8009ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	643b      	str	r3, [r7, #64]	; 0x40
 8009cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cec:	2b03      	cmp	r3, #3
 8009cee:	d9e1      	bls.n	8009cb4 <find_volume+0x18c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009cf0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009cf4:	2b03      	cmp	r3, #3
 8009cf6:	d101      	bne.n	8009cfc <find_volume+0x1d4>
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e207      	b.n	800a10c <find_volume+0x5e4>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8009cfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d001      	beq.n	8009d08 <find_volume+0x1e0>
 8009d04:	230d      	movs	r3, #13
 8009d06:	e201      	b.n	800a10c <find_volume+0x5e4>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d0a:	7b1b      	ldrb	r3, [r3, #12]
 8009d0c:	021b      	lsls	r3, r3, #8
 8009d0e:	b21a      	sxth	r2, r3
 8009d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d12:	7adb      	ldrb	r3, [r3, #11]
 8009d14:	b21b      	sxth	r3, r3
 8009d16:	4313      	orrs	r3, r2
 8009d18:	b21a      	sxth	r2, r3
 8009d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d1c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8009d20:	b21b      	sxth	r3, r3
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d001      	beq.n	8009d2a <find_volume+0x202>
		return FR_NO_FILESYSTEM;
 8009d26:	230d      	movs	r3, #13
 8009d28:	e1f0      	b.n	800a10c <find_volume+0x5e4>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8009d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d2c:	7ddb      	ldrb	r3, [r3, #23]
 8009d2e:	021b      	lsls	r3, r3, #8
 8009d30:	b21a      	sxth	r2, r3
 8009d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d34:	7d9b      	ldrb	r3, [r3, #22]
 8009d36:	b21b      	sxth	r3, r3
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	b21b      	sxth	r3, r3
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8009d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d112      	bne.n	8009d6c <find_volume+0x244>
 8009d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d48:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009d4c:	061a      	lsls	r2, r3, #24
 8009d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d50:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8009d54:	041b      	lsls	r3, r3, #16
 8009d56:	4313      	orrs	r3, r2
 8009d58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d5a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8009d5e:	0212      	lsls	r2, r2, #8
 8009d60:	4313      	orrs	r3, r2
 8009d62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d64:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8009d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d70:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8009d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d76:	7c1a      	ldrb	r2, [r3, #16]
 8009d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d7a:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8009d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d80:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d006      	beq.n	8009d96 <find_volume+0x26e>
 8009d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d8a:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 8009d8e:	2b02      	cmp	r3, #2
 8009d90:	d001      	beq.n	8009d96 <find_volume+0x26e>
		return FR_NO_FILESYSTEM;
 8009d92:	230d      	movs	r3, #13
 8009d94:	e1ba      	b.n	800a10c <find_volume+0x5e4>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8009d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d98:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009da0:	fb02 f303 	mul.w	r3, r2, r3
 8009da4:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8009da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da8:	7b5a      	ldrb	r2, [r3, #13]
 8009daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dac:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8009db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db2:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d00a      	beq.n	8009dd0 <find_volume+0x2a8>
 8009dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dbc:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc4:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	4013      	ands	r3, r2
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d001      	beq.n	8009dd4 <find_volume+0x2ac>
		return FR_NO_FILESYSTEM;
 8009dd0:	230d      	movs	r3, #13
 8009dd2:	e19b      	b.n	800a10c <find_volume+0x5e4>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8009dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd6:	7c9b      	ldrb	r3, [r3, #18]
 8009dd8:	021b      	lsls	r3, r3, #8
 8009dda:	b21a      	sxth	r2, r3
 8009ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dde:	7c5b      	ldrb	r3, [r3, #17]
 8009de0:	b21b      	sxth	r3, r3
 8009de2:	4313      	orrs	r3, r2
 8009de4:	b21b      	sxth	r3, r3
 8009de6:	b29a      	uxth	r2, r3
 8009de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dea:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8009dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df0:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8009df4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009df6:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8009dfa:	0952      	lsrs	r2, r2, #5
 8009dfc:	b292      	uxth	r2, r2
 8009dfe:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e02:	fb02 f201 	mul.w	r2, r2, r1
 8009e06:	1a9b      	subs	r3, r3, r2
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d004      	beq.n	8009e18 <find_volume+0x2f0>
		return FR_NO_FILESYSTEM;
 8009e0e:	230d      	movs	r3, #13
 8009e10:	e17c      	b.n	800a10c <find_volume+0x5e4>
 8009e12:	bf00      	nop
 8009e14:	2000012c 	.word	0x2000012c

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8009e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e1a:	7d1b      	ldrb	r3, [r3, #20]
 8009e1c:	021b      	lsls	r3, r3, #8
 8009e1e:	b21a      	sxth	r2, r3
 8009e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e22:	7cdb      	ldrb	r3, [r3, #19]
 8009e24:	b21b      	sxth	r3, r3
 8009e26:	4313      	orrs	r3, r2
 8009e28:	b21b      	sxth	r3, r3
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8009e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d112      	bne.n	8009e5a <find_volume+0x332>
 8009e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e36:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009e3a:	061a      	lsls	r2, r3, #24
 8009e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e3e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009e42:	041b      	lsls	r3, r3, #16
 8009e44:	4313      	orrs	r3, r2
 8009e46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e48:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8009e4c:	0212      	lsls	r2, r2, #8
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e52:	f892 2020 	ldrb.w	r2, [r2, #32]
 8009e56:	4313      	orrs	r3, r2
 8009e58:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8009e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e5c:	7bdb      	ldrb	r3, [r3, #15]
 8009e5e:	021b      	lsls	r3, r3, #8
 8009e60:	b21a      	sxth	r2, r3
 8009e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e64:	7b9b      	ldrb	r3, [r3, #14]
 8009e66:	b21b      	sxth	r3, r3
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	b21b      	sxth	r3, r3
 8009e6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8009e6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d101      	bne.n	8009e78 <find_volume+0x350>
 8009e74:	230d      	movs	r3, #13
 8009e76:	e149      	b.n	800a10c <find_volume+0x5e4>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8009e78:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e7c:	4413      	add	r3, r2
 8009e7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e80:	f8b2 1408 	ldrh.w	r1, [r2, #1032]	; 0x408
 8009e84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e86:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8009e8a:	0952      	lsrs	r2, r2, #5
 8009e8c:	b292      	uxth	r2, r2
 8009e8e:	fbb1 f2f2 	udiv	r2, r1, r2
 8009e92:	b292      	uxth	r2, r2
 8009e94:	4413      	add	r3, r2
 8009e96:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009e98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d201      	bcs.n	8009ea4 <find_volume+0x37c>
 8009ea0:	230d      	movs	r3, #13
 8009ea2:	e133      	b.n	800a10c <find_volume+0x5e4>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8009ea4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea8:	1ad3      	subs	r3, r2, r3
 8009eaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009eac:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 8009eb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009eb4:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8009eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d101      	bne.n	8009ec0 <find_volume+0x398>
 8009ebc:	230d      	movs	r3, #13
 8009ebe:	e125      	b.n	800a10c <find_volume+0x5e4>
	fmt = FS_FAT12;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec8:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d902      	bls.n	8009ed6 <find_volume+0x3ae>
 8009ed0:	2302      	movs	r3, #2
 8009ed2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8009ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d902      	bls.n	8009ee6 <find_volume+0x3be>
 8009ee0:	2303      	movs	r3, #3
 8009ee2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8009ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee8:	1c9a      	adds	r2, r3, #2
 8009eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eec:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
	fs->volbase = bsect;								/* Volume start sector */
 8009ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009ef4:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8009ef8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009efc:	441a      	add	r2, r3
 8009efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f00:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
	fs->database = bsect + sysect;						/* Data start sector */
 8009f04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f08:	441a      	add	r2, r3
 8009f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0c:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
	if (fmt == FS_FAT32) {
 8009f10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f14:	2b03      	cmp	r3, #3
 8009f16:	d121      	bne.n	8009f5c <find_volume+0x434>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8009f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1a:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d001      	beq.n	8009f26 <find_volume+0x3fe>
 8009f22:	230d      	movs	r3, #13
 8009f24:	e0f2      	b.n	800a10c <find_volume+0x5e4>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8009f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f28:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009f2c:	061a      	lsls	r2, r3, #24
 8009f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f30:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009f34:	041b      	lsls	r3, r3, #16
 8009f36:	4313      	orrs	r3, r2
 8009f38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f3a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8009f3e:	0212      	lsls	r2, r2, #8
 8009f40:	4313      	orrs	r3, r2
 8009f42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f44:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8009f48:	431a      	orrs	r2, r3
 8009f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4c:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8009f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f52:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	647b      	str	r3, [r7, #68]	; 0x44
 8009f5a:	e025      	b.n	8009fa8 <find_volume+0x480>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8009f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f5e:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d101      	bne.n	8009f6a <find_volume+0x442>
 8009f66:	230d      	movs	r3, #13
 8009f68:	e0d0      	b.n	800a10c <find_volume+0x5e4>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8009f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6c:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8009f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f72:	441a      	add	r2, r3
 8009f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f76:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009f7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f7e:	2b02      	cmp	r3, #2
 8009f80:	d104      	bne.n	8009f8c <find_volume+0x464>
 8009f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f84:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8009f88:	005b      	lsls	r3, r3, #1
 8009f8a:	e00c      	b.n	8009fa6 <find_volume+0x47e>
 8009f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f8e:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 8009f92:	4613      	mov	r3, r2
 8009f94:	005b      	lsls	r3, r3, #1
 8009f96:	4413      	add	r3, r2
 8009f98:	085a      	lsrs	r2, r3, #1
 8009f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8009fa0:	f003 0301 	and.w	r3, r3, #1
 8009fa4:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8009fa6:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8009fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009faa:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8009fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fb8:	440b      	add	r3, r1
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009fbe:	f8b1 140a 	ldrh.w	r1, [r1, #1034]	; 0x40a
 8009fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d201      	bcs.n	8009fce <find_volume+0x4a6>
		return FR_NO_FILESYSTEM;
 8009fca:	230d      	movs	r3, #13
 8009fcc:	e09e      	b.n	800a10c <find_volume+0x5e4>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8009fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8009fd4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
 8009fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fda:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8009fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8009fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe6:	2280      	movs	r2, #128	; 0x80
 8009fe8:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8009fec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ff0:	2b03      	cmp	r3, #3
 8009ff2:	d177      	bne.n	800a0e4 <find_volume+0x5bc>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8009ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009ffa:	021b      	lsls	r3, r3, #8
 8009ffc:	b21a      	sxth	r2, r3
 8009ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a000:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a004:	b21b      	sxth	r3, r3
 800a006:	4313      	orrs	r3, r2
 800a008:	b21b      	sxth	r3, r3
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d16a      	bne.n	800a0e4 <find_volume+0x5bc>
		&& move_window(fs, bsect + 1) == FR_OK)
 800a00e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a010:	3301      	adds	r3, #1
 800a012:	4619      	mov	r1, r3
 800a014:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a016:	f7fe f88e 	bl	8008136 <move_window>
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d161      	bne.n	800a0e4 <find_volume+0x5bc>
	{
		fs->fsi_flag = 0;
 800a020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a022:	2200      	movs	r2, #0
 800a024:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a02a:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800a02e:	021b      	lsls	r3, r3, #8
 800a030:	b21a      	sxth	r2, r3
 800a032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a034:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800a038:	b21b      	sxth	r3, r3
 800a03a:	4313      	orrs	r3, r2
 800a03c:	b21b      	sxth	r3, r3
 800a03e:	4a35      	ldr	r2, [pc, #212]	; (800a114 <find_volume+0x5ec>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d14f      	bne.n	800a0e4 <find_volume+0x5bc>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800a044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a046:	78db      	ldrb	r3, [r3, #3]
 800a048:	061a      	lsls	r2, r3, #24
 800a04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04c:	789b      	ldrb	r3, [r3, #2]
 800a04e:	041b      	lsls	r3, r3, #16
 800a050:	4313      	orrs	r3, r2
 800a052:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a054:	7852      	ldrb	r2, [r2, #1]
 800a056:	0212      	lsls	r2, r2, #8
 800a058:	4313      	orrs	r3, r2
 800a05a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a05c:	7812      	ldrb	r2, [r2, #0]
 800a05e:	4313      	orrs	r3, r2
 800a060:	4a2d      	ldr	r2, [pc, #180]	; (800a118 <find_volume+0x5f0>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d13e      	bne.n	800a0e4 <find_volume+0x5bc>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800a066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a068:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800a06c:	061a      	lsls	r2, r3, #24
 800a06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a070:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800a074:	041b      	lsls	r3, r3, #16
 800a076:	4313      	orrs	r3, r2
 800a078:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a07a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800a07e:	0212      	lsls	r2, r2, #8
 800a080:	4313      	orrs	r3, r2
 800a082:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a084:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800a088:	4313      	orrs	r3, r2
 800a08a:	4a24      	ldr	r2, [pc, #144]	; (800a11c <find_volume+0x5f4>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d129      	bne.n	800a0e4 <find_volume+0x5bc>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800a090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a092:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800a096:	061a      	lsls	r2, r3, #24
 800a098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a09a:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800a09e:	041b      	lsls	r3, r3, #16
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0a4:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800a0a8:	0212      	lsls	r2, r2, #8
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0ae:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800a0b2:	431a      	orrs	r2, r3
 800a0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b6:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800a0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0bc:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800a0c0:	061a      	lsls	r2, r3, #24
 800a0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c4:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800a0c8:	041b      	lsls	r3, r3, #16
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0ce:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800a0d2:	0212      	lsls	r2, r2, #8
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0d8:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800a0dc:	431a      	orrs	r2, r3
 800a0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800a0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a0ea:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->id = ++Fsid;	/* File system mount ID */
 800a0ee:	4b0c      	ldr	r3, [pc, #48]	; (800a120 <find_volume+0x5f8>)
 800a0f0:	881b      	ldrh	r3, [r3, #0]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	b29a      	uxth	r2, r3
 800a0f6:	4b0a      	ldr	r3, [pc, #40]	; (800a120 <find_volume+0x5f8>)
 800a0f8:	801a      	strh	r2, [r3, #0]
 800a0fa:	4b09      	ldr	r3, [pc, #36]	; (800a120 <find_volume+0x5f8>)
 800a0fc:	881a      	ldrh	r2, [r3, #0]
 800a0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a100:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800a104:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a106:	f7fd ffa3 	bl	8008050 <clear_lock>
#endif

	return FR_OK;
 800a10a:	2300      	movs	r3, #0
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3758      	adds	r7, #88	; 0x58
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	ffffaa55 	.word	0xffffaa55
 800a118:	41615252 	.word	0x41615252
 800a11c:	61417272 	.word	0x61417272
 800a120:	20000130 	.word	0x20000130

0800a124 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d022      	beq.n	800a17c <validate+0x58>
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d01d      	beq.n	800a17c <validate+0x58>
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a146:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d016      	beq.n	800a17c <validate+0x58>
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a154:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 800a15e:	429a      	cmp	r2, r3
 800a160:	d10c      	bne.n	800a17c <validate+0x58>
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a168:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7fd fccf 	bl	8007b10 <disk_status>
 800a172:	4603      	mov	r3, r0
 800a174:	f003 0301 	and.w	r3, r3, #1
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d001      	beq.n	800a180 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800a17c:	2309      	movs	r3, #9
 800a17e:	e000      	b.n	800a182 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
	...

0800a18c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b088      	sub	sp, #32
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	4613      	mov	r3, r2
 800a198:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800a19e:	f107 0310 	add.w	r3, r7, #16
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7ff fc12 	bl	80099cc <get_ldnumber>
 800a1a8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	da01      	bge.n	800a1b4 <f_mount+0x28>
 800a1b0:	230b      	movs	r3, #11
 800a1b2:	e02d      	b.n	800a210 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a1b4:	4a18      	ldr	r2, [pc, #96]	; (800a218 <f_mount+0x8c>)
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1bc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a1be:	69bb      	ldr	r3, [r7, #24]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d006      	beq.n	800a1d2 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800a1c4:	69b8      	ldr	r0, [r7, #24]
 800a1c6:	f7fd ff43 	bl	8008050 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	}

	if (fs) {
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d003      	beq.n	800a1e0 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	490d      	ldr	r1, [pc, #52]	; (800a218 <f_mount+0x8c>)
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d002      	beq.n	800a1f6 <f_mount+0x6a>
 800a1f0:	79fb      	ldrb	r3, [r7, #7]
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d001      	beq.n	800a1fa <f_mount+0x6e>
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	e00a      	b.n	800a210 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800a1fa:	f107 0108 	add.w	r1, r7, #8
 800a1fe:	f107 030c 	add.w	r3, r7, #12
 800a202:	2200      	movs	r2, #0
 800a204:	4618      	mov	r0, r3
 800a206:	f7ff fc8f 	bl	8009b28 <find_volume>
 800a20a:	4603      	mov	r3, r0
 800a20c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a20e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a210:	4618      	mov	r0, r3
 800a212:	3720      	adds	r7, #32
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}
 800a218:	2000012c 	.word	0x2000012c

0800a21c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	f5ad 6d8b 	sub.w	sp, sp, #1112	; 0x458
 800a222:	af00      	add	r7, sp, #0
 800a224:	f107 030c 	add.w	r3, r7, #12
 800a228:	6018      	str	r0, [r3, #0]
 800a22a:	f107 0308 	add.w	r3, r7, #8
 800a22e:	6019      	str	r1, [r3, #0]
 800a230:	1dfb      	adds	r3, r7, #7
 800a232:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800a234:	f107 030c 	add.w	r3, r7, #12
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d101      	bne.n	800a242 <f_open+0x26>
 800a23e:	2309      	movs	r3, #9
 800a240:	e208      	b.n	800a654 <f_open+0x438>
	fp->fs = 0;			/* Clear file object */
 800a242:	f107 030c 	add.w	r3, r7, #12
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2200      	movs	r2, #0
 800a24a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800a24e:	1dfb      	adds	r3, r7, #7
 800a250:	1dfa      	adds	r2, r7, #7
 800a252:	7812      	ldrb	r2, [r2, #0]
 800a254:	f002 021f 	and.w	r2, r2, #31
 800a258:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800a25a:	1dfb      	adds	r3, r7, #7
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	f023 0301 	bic.w	r3, r3, #1
 800a262:	b2da      	uxtb	r2, r3
 800a264:	f107 0108 	add.w	r1, r7, #8
 800a268:	f107 031c 	add.w	r3, r7, #28
 800a26c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a270:	4618      	mov	r0, r3
 800a272:	f7ff fc59 	bl	8009b28 <find_volume>
 800a276:	4603      	mov	r3, r0
 800a278:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800a27c:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800a280:	2b00      	cmp	r3, #0
 800a282:	f040 81e5 	bne.w	800a650 <f_open+0x434>
		INIT_BUF(dj);
 800a286:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a28a:	f001 f875 	bl	800b378 <ff_memalloc>
 800a28e:	f8c7 044c 	str.w	r0, [r7, #1100]	; 0x44c
 800a292:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800a296:	2b00      	cmp	r3, #0
 800a298:	d101      	bne.n	800a29e <f_open+0x82>
 800a29a:	2311      	movs	r3, #17
 800a29c:	e1da      	b.n	800a654 <f_open+0x438>
 800a29e:	f107 031c 	add.w	r3, r7, #28
 800a2a2:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 800a2a6:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 800a2aa:	f107 031c 	add.w	r3, r7, #28
 800a2ae:	f107 0210 	add.w	r2, r7, #16
 800a2b2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
		res = follow_path(&dj, path);	/* Follow the file path */
 800a2b6:	f107 0308 	add.w	r3, r7, #8
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	f107 031c 	add.w	r3, r7, #28
 800a2c0:	4611      	mov	r1, r2
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7ff fb14 	bl	80098f0 <follow_path>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
		dir = dj.dir;
 800a2ce:	f107 031c 	add.w	r3, r7, #28
 800a2d2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a2d6:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a2da:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d11a      	bne.n	800a318 <f_open+0xfc>
			if (!dir)	/* Default directory itself */
 800a2e2:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d103      	bne.n	800a2f2 <f_open+0xd6>
				res = FR_INVALID_NAME;
 800a2ea:	2306      	movs	r3, #6
 800a2ec:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
 800a2f0:	e012      	b.n	800a318 <f_open+0xfc>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a2f2:	1dfb      	adds	r3, r7, #7
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	f023 0301 	bic.w	r3, r3, #1
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	bf14      	ite	ne
 800a2fe:	2301      	movne	r3, #1
 800a300:	2300      	moveq	r3, #0
 800a302:	b2db      	uxtb	r3, r3
 800a304:	461a      	mov	r2, r3
 800a306:	f107 031c 	add.w	r3, r7, #28
 800a30a:	4611      	mov	r1, r2
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7fd fd15 	bl	8007d3c <chk_lock>
 800a312:	4603      	mov	r3, r0
 800a314:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a318:	1dfb      	adds	r3, r7, #7
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	f003 031c 	and.w	r3, r3, #28
 800a320:	2b00      	cmp	r3, #0
 800a322:	f000 80cc 	beq.w	800a4be <f_open+0x2a2>
			if (res != FR_OK) {					/* No file, create new */
 800a326:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d01f      	beq.n	800a36e <f_open+0x152>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800a32e:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800a332:	2b04      	cmp	r3, #4
 800a334:	d10e      	bne.n	800a354 <f_open+0x138>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a336:	f7fd fd6d 	bl	8007e14 <enq_lock>
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d006      	beq.n	800a34e <f_open+0x132>
 800a340:	f107 031c 	add.w	r3, r7, #28
 800a344:	4618      	mov	r0, r3
 800a346:	f7ff f80d 	bl	8009364 <dir_register>
 800a34a:	4603      	mov	r3, r0
 800a34c:	e000      	b.n	800a350 <f_open+0x134>
 800a34e:	2312      	movs	r3, #18
 800a350:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a354:	1dfb      	adds	r3, r7, #7
 800a356:	1dfa      	adds	r2, r7, #7
 800a358:	7812      	ldrb	r2, [r2, #0]
 800a35a:	f042 0208 	orr.w	r2, r2, #8
 800a35e:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800a360:	f107 031c 	add.w	r3, r7, #28
 800a364:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a368:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 800a36c:	e014      	b.n	800a398 <f_open+0x17c>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a36e:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800a372:	330b      	adds	r3, #11
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	f003 0311 	and.w	r3, r3, #17
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d003      	beq.n	800a386 <f_open+0x16a>
					res = FR_DENIED;
 800a37e:	2307      	movs	r3, #7
 800a380:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
 800a384:	e008      	b.n	800a398 <f_open+0x17c>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800a386:	1dfb      	adds	r3, r7, #7
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	f003 0304 	and.w	r3, r3, #4
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d002      	beq.n	800a398 <f_open+0x17c>
						res = FR_EXIST;
 800a392:	2308      	movs	r3, #8
 800a394:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a398:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f040 80af 	bne.w	800a500 <f_open+0x2e4>
 800a3a2:	1dfb      	adds	r3, r7, #7
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	f003 0308 	and.w	r3, r3, #8
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	f000 80a8 	beq.w	800a500 <f_open+0x2e4>
				dw = GET_FATTIME();				/* Created time */
 800a3b0:	f7fd fb52 	bl	8007a58 <get_fattime>
 800a3b4:	f8c7 0448 	str.w	r0, [r7, #1096]	; 0x448
				ST_DWORD(dir + DIR_CrtTime, dw);
 800a3b8:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800a3bc:	330e      	adds	r3, #14
 800a3be:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 800a3c2:	b2d2      	uxtb	r2, r2
 800a3c4:	701a      	strb	r2, [r3, #0]
 800a3c6:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	0a1b      	lsrs	r3, r3, #8
 800a3ce:	b29a      	uxth	r2, r3
 800a3d0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800a3d4:	330f      	adds	r3, #15
 800a3d6:	b2d2      	uxtb	r2, r2
 800a3d8:	701a      	strb	r2, [r3, #0]
 800a3da:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800a3de:	0c1a      	lsrs	r2, r3, #16
 800a3e0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800a3e4:	3310      	adds	r3, #16
 800a3e6:	b2d2      	uxtb	r2, r2
 800a3e8:	701a      	strb	r2, [r3, #0]
 800a3ea:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800a3ee:	0e1a      	lsrs	r2, r3, #24
 800a3f0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800a3f4:	3311      	adds	r3, #17
 800a3f6:	b2d2      	uxtb	r2, r2
 800a3f8:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800a3fa:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800a3fe:	330b      	adds	r3, #11
 800a400:	2200      	movs	r2, #0
 800a402:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800a404:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800a408:	331c      	adds	r3, #28
 800a40a:	2200      	movs	r2, #0
 800a40c:	701a      	strb	r2, [r3, #0]
 800a40e:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800a412:	331d      	adds	r3, #29
 800a414:	2200      	movs	r2, #0
 800a416:	701a      	strb	r2, [r3, #0]
 800a418:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800a41c:	331e      	adds	r3, #30
 800a41e:	2200      	movs	r2, #0
 800a420:	701a      	strb	r2, [r3, #0]
 800a422:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800a426:	331f      	adds	r3, #31
 800a428:	2200      	movs	r2, #0
 800a42a:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800a42c:	f107 031c 	add.w	r3, r7, #28
 800a430:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a434:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 800a438:	4618      	mov	r0, r3
 800a43a:	f7fe fcee 	bl	8008e1a <ld_clust>
 800a43e:	f8c7 0444 	str.w	r0, [r7, #1092]	; 0x444
				st_clust(dir, 0);				/* cluster = 0 */
 800a442:	2100      	movs	r1, #0
 800a444:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 800a448:	f7fe fd14 	bl	8008e74 <st_clust>
				dj.fs->wflag = 1;
 800a44c:	f107 031c 	add.w	r3, r7, #28
 800a450:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a454:	2201      	movs	r2, #1
 800a456:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				if (cl) {						/* Remove the cluster chain if exist */
 800a45a:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d04e      	beq.n	800a500 <f_open+0x2e4>
					dw = dj.fs->winsect;
 800a462:	f107 031c 	add.w	r3, r7, #28
 800a466:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a46a:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 800a46e:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
					res = remove_chain(dj.fs, cl);
 800a472:	f107 031c 	add.w	r3, r7, #28
 800a476:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a47a:	f8d7 1444 	ldr.w	r1, [r7, #1092]	; 0x444
 800a47e:	4618      	mov	r0, r3
 800a480:	f7fe f984 	bl	800878c <remove_chain>
 800a484:	4603      	mov	r3, r0
 800a486:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
					if (res == FR_OK) {
 800a48a:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d136      	bne.n	800a500 <f_open+0x2e4>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800a492:	f107 031c 	add.w	r3, r7, #28
 800a496:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a49a:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 800a49e:	3a01      	subs	r2, #1
 800a4a0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
						res = move_window(dj.fs, dw);
 800a4a4:	f107 031c 	add.w	r3, r7, #28
 800a4a8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a4ac:	f8d7 1448 	ldr.w	r1, [r7, #1096]	; 0x448
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f7fd fe40 	bl	8008136 <move_window>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
 800a4bc:	e020      	b.n	800a500 <f_open+0x2e4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800a4be:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d11c      	bne.n	800a500 <f_open+0x2e4>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800a4c6:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800a4ca:	330b      	adds	r3, #11
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	f003 0310 	and.w	r3, r3, #16
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d003      	beq.n	800a4de <f_open+0x2c2>
					res = FR_NO_FILE;
 800a4d6:	2304      	movs	r3, #4
 800a4d8:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
 800a4dc:	e010      	b.n	800a500 <f_open+0x2e4>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800a4de:	1dfb      	adds	r3, r7, #7
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	f003 0302 	and.w	r3, r3, #2
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d00a      	beq.n	800a500 <f_open+0x2e4>
 800a4ea:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800a4ee:	330b      	adds	r3, #11
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	f003 0301 	and.w	r3, r3, #1
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d002      	beq.n	800a500 <f_open+0x2e4>
						res = FR_DENIED;
 800a4fa:	2307      	movs	r3, #7
 800a4fc:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
				}
			}
		}
		if (res == FR_OK) {
 800a500:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800a504:	2b00      	cmp	r3, #0
 800a506:	d13d      	bne.n	800a584 <f_open+0x368>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a508:	1dfb      	adds	r3, r7, #7
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	f003 0308 	and.w	r3, r3, #8
 800a510:	2b00      	cmp	r3, #0
 800a512:	d005      	beq.n	800a520 <f_open+0x304>
				mode |= FA__WRITTEN;
 800a514:	1dfb      	adds	r3, r7, #7
 800a516:	1dfa      	adds	r2, r7, #7
 800a518:	7812      	ldrb	r2, [r2, #0]
 800a51a:	f042 0220 	orr.w	r2, r2, #32
 800a51e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800a520:	f107 031c 	add.w	r3, r7, #28
 800a524:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a528:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800a52c:	f107 030c 	add.w	r3, r7, #12
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
			fp->dir_ptr = dir;
 800a536:	f107 030c 	add.w	r3, r7, #12
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 800a540:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a544:	1dfb      	adds	r3, r7, #7
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	f023 0301 	bic.w	r3, r3, #1
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	bf14      	ite	ne
 800a550:	2301      	movne	r3, #1
 800a552:	2300      	moveq	r3, #0
 800a554:	b2db      	uxtb	r3, r3
 800a556:	461a      	mov	r2, r3
 800a558:	f107 031c 	add.w	r3, r7, #28
 800a55c:	4611      	mov	r1, r2
 800a55e:	4618      	mov	r0, r3
 800a560:	f7fd fc7c 	bl	8007e5c <inc_lock>
 800a564:	4602      	mov	r2, r0
 800a566:	f107 030c 	add.w	r3, r7, #12
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
			if (!fp->lockid) res = FR_INT_ERR;
 800a570:	f107 030c 	add.w	r3, r7, #12
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d102      	bne.n	800a584 <f_open+0x368>
 800a57e:	2302      	movs	r3, #2
 800a580:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
					res = FR_NO_FILE;
			}
		}
#endif
		FREE_BUF();
 800a584:	f8d7 044c 	ldr.w	r0, [r7, #1100]	; 0x44c
 800a588:	f000 ff02 	bl	800b390 <ff_memfree>

		if (res == FR_OK) {
 800a58c:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800a590:	2b00      	cmp	r3, #0
 800a592:	d15d      	bne.n	800a650 <f_open+0x434>
			fp->flag = mode;					/* File access mode */
 800a594:	f107 030c 	add.w	r3, r7, #12
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	1dfa      	adds	r2, r7, #7
 800a59c:	7812      	ldrb	r2, [r2, #0]
 800a59e:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
			fp->err = 0;						/* Clear error flag */
 800a5a2:	f107 030c 	add.w	r3, r7, #12
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800a5ae:	f107 031c 	add.w	r3, r7, #28
 800a5b2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a5b6:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7fe fc2d 	bl	8008e1a <ld_clust>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	f107 030c 	add.w	r3, r7, #12
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800a5cc:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800a5d0:	331f      	adds	r3, #31
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	061a      	lsls	r2, r3, #24
 800a5d6:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800a5da:	331e      	adds	r3, #30
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	041b      	lsls	r3, r3, #16
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 800a5e6:	321d      	adds	r2, #29
 800a5e8:	7812      	ldrb	r2, [r2, #0]
 800a5ea:	0212      	lsls	r2, r2, #8
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 800a5f2:	321c      	adds	r2, #28
 800a5f4:	7812      	ldrb	r2, [r2, #0]
 800a5f6:	431a      	orrs	r2, r3
 800a5f8:	f107 030c 	add.w	r3, r7, #12
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			fp->fptr = 0;						/* File pointer */
 800a602:	f107 030c 	add.w	r3, r7, #12
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2200      	movs	r2, #0
 800a60a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
			fp->dsect = 0;
 800a60e:	f107 030c 	add.w	r3, r7, #12
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2200      	movs	r2, #0
 800a616:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800a61a:	f107 030c 	add.w	r3, r7, #12
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	2200      	movs	r2, #0
 800a622:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800a626:	f107 031c 	add.w	r3, r7, #28
 800a62a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800a62e:	f107 030c 	add.w	r3, r7, #12
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
			fp->id = fp->fs->id;
 800a638:	f107 030c 	add.w	r3, r7, #12
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a642:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800a646:	f107 030c 	add.w	r3, r7, #12
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		}
	}

	LEAVE_FF(dj.fs, res);
 800a650:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
}
 800a654:	4618      	mov	r0, r3
 800a656:	f507 678b 	add.w	r7, r7, #1112	; 0x458
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a65e:	b580      	push	{r7, lr}
 800a660:	b08a      	sub	sp, #40	; 0x28
 800a662:	af00      	add	r7, sp, #0
 800a664:	60f8      	str	r0, [r7, #12]
 800a666:	60b9      	str	r1, [r7, #8]
 800a668:	607a      	str	r2, [r7, #4]
 800a66a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	2200      	movs	r2, #0
 800a674:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800a676:	68f8      	ldr	r0, [r7, #12]
 800a678:	f7ff fd54 	bl	800a124 <validate>
 800a67c:	4603      	mov	r3, r0
 800a67e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800a680:	7dfb      	ldrb	r3, [r7, #23]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d001      	beq.n	800a68a <f_write+0x2c>
 800a686:	7dfb      	ldrb	r3, [r7, #23]
 800a688:	e1cc      	b.n	800aa24 <f_write+0x3c6>
	if (fp->err)							/* Check error */
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 800a690:	2b00      	cmp	r3, #0
 800a692:	d003      	beq.n	800a69c <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 800a69a:	e1c3      	b.n	800aa24 <f_write+0x3c6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800a6a2:	f003 0302 	and.w	r3, r3, #2
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d101      	bne.n	800a6ae <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800a6aa:	2307      	movs	r3, #7
 800a6ac:	e1ba      	b.n	800aa24 <f_write+0x3c6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	441a      	add	r2, r3
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	f080 8192 	bcs.w	800a9e8 <f_write+0x38a>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800a6c8:	e18e      	b.n	800a9e8 <f_write+0x38a>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800a6d0:	68fa      	ldr	r2, [r7, #12]
 800a6d2:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 800a6d6:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800a6da:	fbb3 f1f2 	udiv	r1, r3, r2
 800a6de:	fb02 f201 	mul.w	r2, r2, r1
 800a6e2:	1a9b      	subs	r3, r3, r2
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f040 8131 	bne.w	800a94c <f_write+0x2ee>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 800a6f6:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800a6fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6fe:	b2da      	uxtb	r2, r3
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a706:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800a70a:	3b01      	subs	r3, #1
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	4013      	ands	r3, r2
 800a710:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800a712:	7dbb      	ldrb	r3, [r7, #22]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d151      	bne.n	800a7bc <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d10f      	bne.n	800a742 <f_write+0xe4>
					clst = fp->sclust;		/* Follow from the origin */
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800a728:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800a72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d121      	bne.n	800a774 <f_write+0x116>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a736:	2100      	movs	r1, #0
 800a738:	4618      	mov	r0, r3
 800a73a:	f7fe f881 	bl	8008840 <create_chain>
 800a73e:	6278      	str	r0, [r7, #36]	; 0x24
 800a740:	e018      	b.n	800a774 <f_write+0x116>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d008      	beq.n	800a75e <f_write+0x100>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800a752:	4619      	mov	r1, r3
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f7fe f910 	bl	800897a <clmt_clust>
 800a75a:	6278      	str	r0, [r7, #36]	; 0x24
 800a75c:	e00a      	b.n	800a774 <f_write+0x116>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a76a:	4619      	mov	r1, r3
 800a76c:	4610      	mov	r0, r2
 800a76e:	f7fe f867 	bl	8008840 <create_chain>
 800a772:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a776:	2b00      	cmp	r3, #0
 800a778:	f000 813b 	beq.w	800a9f2 <f_write+0x394>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800a77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d105      	bne.n	800a78e <f_write+0x130>
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2202      	movs	r2, #2
 800a786:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800a78a:	2302      	movs	r3, #2
 800a78c:	e14a      	b.n	800aa24 <f_write+0x3c6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a794:	d105      	bne.n	800a7a2 <f_write+0x144>
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2201      	movs	r2, #1
 800a79a:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e140      	b.n	800aa24 <f_write+0x3c6>
				fp->clust = clst;			/* Update current cluster */
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7a6:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d103      	bne.n	800a7bc <f_write+0x15e>
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7b8:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800a7c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d01d      	beq.n	800a806 <f_write+0x1a8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a7d0:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800a7d4:	68f9      	ldr	r1, [r7, #12]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800a7dc:	2301      	movs	r3, #1
 800a7de:	f7fd f9f7 	bl	8007bd0 <disk_write>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d005      	beq.n	800a7f4 <f_write+0x196>
					ABORT(fp->fs, FR_DISK_ERR);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e117      	b.n	800aa24 <f_write+0x3c6>
				fp->flag &= ~FA__DIRTY;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800a7fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7fe:	b2da      	uxtb	r2, r3
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a812:	4619      	mov	r1, r3
 800a814:	4610      	mov	r0, r2
 800a816:	f7fd fd6a 	bl	80082ee <clust2sect>
 800a81a:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d105      	bne.n	800a82e <f_write+0x1d0>
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2202      	movs	r2, #2
 800a826:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800a82a:	2302      	movs	r3, #2
 800a82c:	e0fa      	b.n	800aa24 <f_write+0x3c6>
			sect += csect;
 800a82e:	7dbb      	ldrb	r3, [r7, #22]
 800a830:	693a      	ldr	r2, [r7, #16]
 800a832:	4413      	add	r3, r2
 800a834:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a83c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a840:	461a      	mov	r2, r3
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	fbb3 f3f2 	udiv	r3, r3, r2
 800a848:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a84a:	69fb      	ldr	r3, [r7, #28]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d058      	beq.n	800a902 <f_write+0x2a4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800a850:	7dba      	ldrb	r2, [r7, #22]
 800a852:	69fb      	ldr	r3, [r7, #28]
 800a854:	4413      	add	r3, r2
 800a856:	68fa      	ldr	r2, [r7, #12]
 800a858:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 800a85c:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800a860:	4293      	cmp	r3, r2
 800a862:	d908      	bls.n	800a876 <f_write+0x218>
					cc = fp->fs->csize - csect;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a86a:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800a86e:	461a      	mov	r2, r3
 800a870:	7dbb      	ldrb	r3, [r7, #22]
 800a872:	1ad3      	subs	r3, r2, r3
 800a874:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a87c:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	693a      	ldr	r2, [r7, #16]
 800a884:	69b9      	ldr	r1, [r7, #24]
 800a886:	f7fd f9a3 	bl	8007bd0 <disk_write>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d005      	beq.n	800a89c <f_write+0x23e>
					ABORT(fp->fs, FR_DISK_ERR);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2201      	movs	r2, #1
 800a894:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800a898:	2301      	movs	r3, #1
 800a89a:	e0c3      	b.n	800aa24 <f_write+0x3c6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	1ad3      	subs	r3, r2, r3
 800a8a6:	69fa      	ldr	r2, [r7, #28]
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d91f      	bls.n	800a8ec <f_write+0x28e>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800a8ac:	68f8      	ldr	r0, [r7, #12]
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	1ad3      	subs	r3, r2, r3
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 800a8be:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800a8c2:	fb02 f303 	mul.w	r3, r2, r3
 800a8c6:	69ba      	ldr	r2, [r7, #24]
 800a8c8:	18d1      	adds	r1, r2, r3
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a8d0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	f7fd f9b9 	bl	8007c4c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800a8e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8e4:	b2da      	uxtb	r2, r3
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a8f2:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	69fb      	ldr	r3, [r7, #28]
 800a8fa:	fb02 f303 	mul.w	r3, r2, r3
 800a8fe:	623b      	str	r3, [r7, #32]
				continue;
 800a900:	e05c      	b.n	800a9bc <f_write+0x35e>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800a908:	693a      	ldr	r2, [r7, #16]
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d01a      	beq.n	800a944 <f_write+0x2e6>
				if (fp->fptr < fp->fsize &&
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d212      	bcs.n	800a944 <f_write+0x2e6>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a924:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800a928:	68f9      	ldr	r1, [r7, #12]
 800a92a:	2301      	movs	r3, #1
 800a92c:	693a      	ldr	r2, [r7, #16]
 800a92e:	f7fd f92f 	bl	8007b90 <disk_read>
 800a932:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800a934:	2b00      	cmp	r3, #0
 800a936:	d005      	beq.n	800a944 <f_write+0x2e6>
						ABORT(fp->fs, FR_DISK_ERR);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2201      	movs	r2, #1
 800a93c:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800a940:	2301      	movs	r3, #1
 800a942:	e06f      	b.n	800aa24 <f_write+0x3c6>
			}
#endif
			fp->dsect = sect;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	693a      	ldr	r2, [r7, #16]
 800a948:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a952:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a956:	4618      	mov	r0, r3
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800a95e:	68fa      	ldr	r2, [r7, #12]
 800a960:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 800a964:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800a968:	fbb3 f1f2 	udiv	r1, r3, r2
 800a96c:	fb02 f201 	mul.w	r2, r2, r1
 800a970:	1a9b      	subs	r3, r3, r2
 800a972:	1ac3      	subs	r3, r0, r3
 800a974:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800a976:	6a3a      	ldr	r2, [r7, #32]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d901      	bls.n	800a982 <f_write+0x324>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800a988:	68fa      	ldr	r2, [r7, #12]
 800a98a:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 800a98e:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800a992:	fbb3 f1f2 	udiv	r1, r3, r2
 800a996:	fb02 f201 	mul.w	r2, r2, r1
 800a99a:	1a9b      	subs	r3, r3, r2
 800a99c:	68fa      	ldr	r2, [r7, #12]
 800a99e:	4413      	add	r3, r2
 800a9a0:	6a3a      	ldr	r2, [r7, #32]
 800a9a2:	69b9      	ldr	r1, [r7, #24]
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f7fd f951 	bl	8007c4c <mem_cpy>
		fp->flag |= FA__DIRTY;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800a9b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9b4:	b2da      	uxtb	r2, r3
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800a9bc:	69ba      	ldr	r2, [r7, #24]
 800a9be:	6a3b      	ldr	r3, [r7, #32]
 800a9c0:	4413      	add	r3, r2
 800a9c2:	61bb      	str	r3, [r7, #24]
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800a9ca:	6a3b      	ldr	r3, [r7, #32]
 800a9cc:	441a      	add	r2, r3
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	681a      	ldr	r2, [r3, #0]
 800a9d8:	6a3b      	ldr	r3, [r7, #32]
 800a9da:	441a      	add	r2, r3
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	601a      	str	r2, [r3, #0]
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	6a3b      	ldr	r3, [r7, #32]
 800a9e4:	1ad3      	subs	r3, r2, r3
 800a9e6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	f47f ae6d 	bne.w	800a6ca <f_write+0x6c>
 800a9f0:	e000      	b.n	800a9f4 <f_write+0x396>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a9f2:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d905      	bls.n	800aa10 <f_write+0x3b2>
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800aa16:	f043 0320 	orr.w	r3, r3, #32
 800aa1a:	b2da      	uxtb	r2, r3
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406

	LEAVE_FF(fp->fs, FR_OK);
 800aa22:	2300      	movs	r3, #0
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3728      	adds	r7, #40	; 0x28
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b086      	sub	sp, #24
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f7ff fb75 	bl	800a124 <validate>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aa3e:	7dfb      	ldrb	r3, [r7, #23]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	f040 80a8 	bne.w	800ab96 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800aa4c:	f003 0320 	and.w	r3, r3, #32
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f000 80a0 	beq.w	800ab96 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800aa5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d019      	beq.n	800aa98 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800aa6a:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800aa6e:	6879      	ldr	r1, [r7, #4]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800aa76:	2301      	movs	r3, #1
 800aa78:	f7fd f8aa 	bl	8007bd0 <disk_write>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d001      	beq.n	800aa86 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800aa82:	2301      	movs	r3, #1
 800aa84:	e088      	b.n	800ab98 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800aa8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa90:	b2da      	uxtb	r2, r3
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	4610      	mov	r0, r2
 800aaa8:	f7fd fb45 	bl	8008136 <move_window>
 800aaac:	4603      	mov	r3, r0
 800aaae:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800aab0:	7dfb      	ldrb	r3, [r7, #23]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d16f      	bne.n	800ab96 <f_sync+0x16a>
				dir = fp->dir_ptr;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800aabc:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	330b      	adds	r3, #11
 800aac2:	781a      	ldrb	r2, [r3, #0]
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	330b      	adds	r3, #11
 800aac8:	f042 0220 	orr.w	r2, r2, #32
 800aacc:	b2d2      	uxtb	r2, r2
 800aace:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	331c      	adds	r3, #28
 800aada:	b2d2      	uxtb	r2, r2
 800aadc:	701a      	strb	r2, [r3, #0]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	0a1b      	lsrs	r3, r3, #8
 800aae8:	b29a      	uxth	r2, r3
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	331d      	adds	r3, #29
 800aaee:	b2d2      	uxtb	r2, r2
 800aaf0:	701a      	strb	r2, [r3, #0]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800aaf8:	0c1a      	lsrs	r2, r3, #16
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	331e      	adds	r3, #30
 800aafe:	b2d2      	uxtb	r2, r2
 800ab00:	701a      	strb	r2, [r3, #0]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800ab08:	0e1a      	lsrs	r2, r3, #24
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	331f      	adds	r3, #31
 800ab0e:	b2d2      	uxtb	r2, r2
 800ab10:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800ab18:	4619      	mov	r1, r3
 800ab1a:	6938      	ldr	r0, [r7, #16]
 800ab1c:	f7fe f9aa 	bl	8008e74 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800ab20:	f7fc ff9a 	bl	8007a58 <get_fattime>
 800ab24:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	3316      	adds	r3, #22
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	b2d2      	uxtb	r2, r2
 800ab2e:	701a      	strb	r2, [r3, #0]
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	0a1b      	lsrs	r3, r3, #8
 800ab36:	b29a      	uxth	r2, r3
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	3317      	adds	r3, #23
 800ab3c:	b2d2      	uxtb	r2, r2
 800ab3e:	701a      	strb	r2, [r3, #0]
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	0c1a      	lsrs	r2, r3, #16
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	3318      	adds	r3, #24
 800ab48:	b2d2      	uxtb	r2, r2
 800ab4a:	701a      	strb	r2, [r3, #0]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	0e1a      	lsrs	r2, r3, #24
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	3319      	adds	r3, #25
 800ab54:	b2d2      	uxtb	r2, r2
 800ab56:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	3312      	adds	r3, #18
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	701a      	strb	r2, [r3, #0]
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	3313      	adds	r3, #19
 800ab64:	2200      	movs	r2, #0
 800ab66:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800ab6e:	f023 0320 	bic.w	r3, r3, #32
 800ab72:	b2da      	uxtb	r2, r3
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
				fp->fs->wflag = 1;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ab80:	2201      	movs	r2, #1
 800ab82:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = sync_fs(fp->fs);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7fd fb00 	bl	8008192 <sync_fs>
 800ab92:	4603      	mov	r3, r0
 800ab94:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800ab96:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3718      	adds	r7, #24
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f7ff ff3f 	bl	800aa2c <f_sync>
 800abae:	4603      	mov	r3, r0
 800abb0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800abb2:	7bfb      	ldrb	r3, [r7, #15]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d116      	bne.n	800abe6 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f7ff fab3 	bl	800a124 <validate>
 800abbe:	4603      	mov	r3, r0
 800abc0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800abc2:	7bfb      	ldrb	r3, [r7, #15]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d10e      	bne.n	800abe6 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 800abce:	4618      	mov	r0, r3
 800abd0:	f7fd f9fa 	bl	8007fc8 <dec_lock>
 800abd4:	4603      	mov	r3, r0
 800abd6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800abd8:	7bfb      	ldrb	r3, [r7, #15]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d103      	bne.n	800abe6 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2200      	movs	r2, #0
 800abe2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800abe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3710      	adds	r7, #16
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b090      	sub	sp, #64	; 0x40
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f7ff fa92 	bl	800a124 <validate>
 800ac00:	4603      	mov	r3, r0
 800ac02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800ac06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d002      	beq.n	800ac14 <f_lseek+0x24>
 800ac0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ac12:	e274      	b.n	800b0fe <f_lseek+0x50e>
	if (fp->err)						/* Check error */
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d003      	beq.n	800ac26 <f_lseek+0x36>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 800ac24:	e26b      	b.n	800b0fe <f_lseek+0x50e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	f000 8100 	beq.w	800ae32 <f_lseek+0x242>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac38:	d164      	bne.n	800ad04 <f_lseek+0x114>
			tbl = fp->cltbl;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800ac40:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ac42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac44:	1d1a      	adds	r2, r3, #4
 800ac46:	627a      	str	r2, [r7, #36]	; 0x24
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	617b      	str	r3, [r7, #20]
 800ac4c:	2302      	movs	r3, #2
 800ac4e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800ac56:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800ac58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d041      	beq.n	800ace2 <f_lseek+0xf2>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ac5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac60:	613b      	str	r3, [r7, #16]
 800ac62:	2300      	movs	r3, #0
 800ac64:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac68:	3302      	adds	r3, #2
 800ac6a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800ac6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac6e:	60fb      	str	r3, [r7, #12]
 800ac70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac72:	3301      	adds	r3, #1
 800ac74:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ac7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7fd fb56 	bl	8008330 <get_fat>
 800ac84:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800ac86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d805      	bhi.n	800ac98 <f_lseek+0xa8>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2202      	movs	r2, #2
 800ac90:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800ac94:	2302      	movs	r3, #2
 800ac96:	e232      	b.n	800b0fe <f_lseek+0x50e>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800ac98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac9e:	d105      	bne.n	800acac <f_lseek+0xbc>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2201      	movs	r2, #1
 800aca4:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800aca8:	2301      	movs	r3, #1
 800acaa:	e228      	b.n	800b0fe <f_lseek+0x50e>
					} while (cl == pcl + 1);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	3301      	adds	r3, #1
 800acb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d0da      	beq.n	800ac6c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800acb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	429a      	cmp	r2, r3
 800acbc:	d809      	bhi.n	800acd2 <f_lseek+0xe2>
						*tbl++ = ncl; *tbl++ = tcl;
 800acbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc0:	1d1a      	adds	r2, r3, #4
 800acc2:	627a      	str	r2, [r7, #36]	; 0x24
 800acc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acc6:	601a      	str	r2, [r3, #0]
 800acc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acca:	1d1a      	adds	r2, r3, #4
 800accc:	627a      	str	r2, [r7, #36]	; 0x24
 800acce:	693a      	ldr	r2, [r7, #16]
 800acd0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800acd8:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800acdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acde:	429a      	cmp	r2, r3
 800ace0:	d3bd      	bcc.n	800ac5e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800ace8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acea:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800acec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d803      	bhi.n	800acfc <f_lseek+0x10c>
				*tbl = 0;		/* Terminate table */
 800acf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf6:	2200      	movs	r2, #0
 800acf8:	601a      	str	r2, [r3, #0]
 800acfa:	e1fe      	b.n	800b0fa <f_lseek+0x50a>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800acfc:	2311      	movs	r3, #17
 800acfe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ad02:	e1fa      	b.n	800b0fa <f_lseek+0x50a>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800ad0a:	683a      	ldr	r2, [r7, #0]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d903      	bls.n	800ad18 <f_lseek+0x128>
				ofs = fp->fsize;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800ad16:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	683a      	ldr	r2, [r7, #0]
 800ad1c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
			if (ofs) {
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	f000 81e9 	beq.w	800b0fa <f_lseek+0x50a>
				fp->clust = clmt_clust(fp, ofs - 1);
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f7fd fe23 	bl	800897a <clmt_clust>
 800ad34:	4602      	mov	r2, r0
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
				dsc = clust2sect(fp->fs, fp->clust);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800ad48:	4619      	mov	r1, r3
 800ad4a:	4610      	mov	r0, r2
 800ad4c:	f7fd facf 	bl	80082ee <clust2sect>
 800ad50:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800ad52:	69bb      	ldr	r3, [r7, #24]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d105      	bne.n	800ad64 <f_lseek+0x174>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2202      	movs	r2, #2
 800ad5c:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800ad60:	2302      	movs	r3, #2
 800ad62:	e1cc      	b.n	800b0fe <f_lseek+0x50e>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	3b01      	subs	r3, #1
 800ad68:	687a      	ldr	r2, [r7, #4]
 800ad6a:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 800ad6e:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800ad72:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad76:	687a      	ldr	r2, [r7, #4]
 800ad78:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 800ad7c:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800ad80:	3a01      	subs	r2, #1
 800ad82:	4013      	ands	r3, r2
 800ad84:	69ba      	ldr	r2, [r7, #24]
 800ad86:	4413      	add	r3, r2
 800ad88:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800ad90:	687a      	ldr	r2, [r7, #4]
 800ad92:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 800ad96:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800ad9a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad9e:	fb02 f201 	mul.w	r2, r2, r1
 800ada2:	1a9b      	subs	r3, r3, r2
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	f000 81a8 	beq.w	800b0fa <f_lseek+0x50a>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800adb0:	69ba      	ldr	r2, [r7, #24]
 800adb2:	429a      	cmp	r2, r3
 800adb4:	f000 81a1 	beq.w	800b0fa <f_lseek+0x50a>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800adbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d01d      	beq.n	800ae02 <f_lseek+0x212>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800adcc:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800add0:	6879      	ldr	r1, [r7, #4]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800add8:	2301      	movs	r3, #1
 800adda:	f7fc fef9 	bl	8007bd0 <disk_write>
 800adde:	4603      	mov	r3, r0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d005      	beq.n	800adf0 <f_lseek+0x200>
							ABORT(fp->fs, FR_DISK_ERR);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2201      	movs	r2, #1
 800ade8:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800adec:	2301      	movs	r3, #1
 800adee:	e186      	b.n	800b0fe <f_lseek+0x50e>
						fp->flag &= ~FA__DIRTY;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800adf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adfa:	b2da      	uxtb	r2, r3
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ae08:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800ae0c:	6879      	ldr	r1, [r7, #4]
 800ae0e:	2301      	movs	r3, #1
 800ae10:	69ba      	ldr	r2, [r7, #24]
 800ae12:	f7fc febd 	bl	8007b90 <disk_read>
 800ae16:	4603      	mov	r3, r0
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d005      	beq.n	800ae28 <f_lseek+0x238>
						ABORT(fp->fs, FR_DISK_ERR);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800ae24:	2301      	movs	r3, #1
 800ae26:	e16a      	b.n	800b0fe <f_lseek+0x50e>
#endif
					fp->dsect = dsc;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	69ba      	ldr	r2, [r7, #24]
 800ae2c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 800ae30:	e163      	b.n	800b0fa <f_lseek+0x50a>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800ae38:	683a      	ldr	r2, [r7, #0]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d90a      	bls.n	800ae54 <f_lseek+0x264>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800ae44:	f003 0302 	and.w	r3, r3, #2
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d103      	bne.n	800ae54 <f_lseek+0x264>
#endif
			) ofs = fp->fsize;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800ae52:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800ae5a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	637b      	str	r3, [r7, #52]	; 0x34
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae64:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
		if (ofs) {
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	f000 80dd 	beq.w	800b02a <f_lseek+0x43a>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ae76:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ae82:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800ae86:	fb03 f302 	mul.w	r3, r3, r2
 800ae8a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ae8c:	6a3b      	ldr	r3, [r7, #32]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d01e      	beq.n	800aed0 <f_lseek+0x2e0>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	1e5a      	subs	r2, r3, #1
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	fbb2 f2f3 	udiv	r2, r2, r3
 800ae9c:	6a3b      	ldr	r3, [r7, #32]
 800ae9e:	1e59      	subs	r1, r3, #1
 800aea0:	69fb      	ldr	r3, [r7, #28]
 800aea2:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d312      	bcc.n	800aed0 <f_lseek+0x2e0>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800aeaa:	6a3b      	ldr	r3, [r7, #32]
 800aeac:	1e5a      	subs	r2, r3, #1
 800aeae:	69fb      	ldr	r3, [r7, #28]
 800aeb0:	425b      	negs	r3, r3
 800aeb2:	401a      	ands	r2, r3
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
				ofs -= fp->fptr;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800aec0:	683a      	ldr	r2, [r7, #0]
 800aec2:	1ad3      	subs	r3, r2, r3
 800aec4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800aecc:	63bb      	str	r3, [r7, #56]	; 0x38
 800aece:	e029      	b.n	800af24 <f_lseek+0x334>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800aed6:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800aed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d11e      	bne.n	800af1c <f_lseek+0x32c>
					clst = create_chain(fp->fs, 0);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800aee4:	2100      	movs	r1, #0
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7fd fcaa 	bl	8008840 <create_chain>
 800aeec:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800aeee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d105      	bne.n	800af00 <f_lseek+0x310>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2202      	movs	r2, #2
 800aef8:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800aefc:	2302      	movs	r3, #2
 800aefe:	e0fe      	b.n	800b0fe <f_lseek+0x50e>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800af00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af06:	d105      	bne.n	800af14 <f_lseek+0x324>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2201      	movs	r2, #1
 800af0c:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800af10:	2301      	movs	r3, #1
 800af12:	e0f4      	b.n	800b0fe <f_lseek+0x50e>
					fp->sclust = clst;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af18:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
				}
#endif
				fp->clust = clst;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af20:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
			}
			if (clst != 0) {
 800af24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af26:	2b00      	cmp	r3, #0
 800af28:	d07f      	beq.n	800b02a <f_lseek+0x43a>
				while (ofs > bcs) {						/* Cluster following loop */
 800af2a:	e047      	b.n	800afbc <f_lseek+0x3cc>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800af32:	f003 0302 	and.w	r3, r3, #2
 800af36:	2b00      	cmp	r3, #0
 800af38:	d00d      	beq.n	800af56 <f_lseek+0x366>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800af40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800af42:	4618      	mov	r0, r3
 800af44:	f7fd fc7c 	bl	8008840 <create_chain>
 800af48:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800af4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d10a      	bne.n	800af66 <f_lseek+0x376>
							ofs = bcs; break;
 800af50:	69fb      	ldr	r3, [r7, #28]
 800af52:	603b      	str	r3, [r7, #0]
 800af54:	e036      	b.n	800afc4 <f_lseek+0x3d4>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800af5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800af5e:	4618      	mov	r0, r3
 800af60:	f7fd f9e6 	bl	8008330 <get_fat>
 800af64:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800af66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af6c:	d105      	bne.n	800af7a <f_lseek+0x38a>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2201      	movs	r2, #1
 800af72:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800af76:	2301      	movs	r3, #1
 800af78:	e0c1      	b.n	800b0fe <f_lseek+0x50e>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800af7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d907      	bls.n	800af90 <f_lseek+0x3a0>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800af86:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800af8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d305      	bcc.n	800af9c <f_lseek+0x3ac>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2202      	movs	r2, #2
 800af94:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800af98:	2302      	movs	r3, #2
 800af9a:	e0b0      	b.n	800b0fe <f_lseek+0x50e>
					fp->clust = clst;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afa0:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
					fp->fptr += bcs;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800afaa:	69fb      	ldr	r3, [r7, #28]
 800afac:	441a      	add	r2, r3
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
					ofs -= bcs;
 800afb4:	683a      	ldr	r2, [r7, #0]
 800afb6:	69fb      	ldr	r3, [r7, #28]
 800afb8:	1ad3      	subs	r3, r2, r3
 800afba:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800afbc:	683a      	ldr	r2, [r7, #0]
 800afbe:	69fb      	ldr	r3, [r7, #28]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d8b3      	bhi.n	800af2c <f_lseek+0x33c>
				}
				fp->fptr += ofs;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	441a      	add	r2, r3
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
				if (ofs % SS(fp->fs)) {
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800afda:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800afde:	461a      	mov	r2, r3
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	fbb3 f1f2 	udiv	r1, r3, r2
 800afe6:	fb02 f201 	mul.w	r2, r2, r1
 800afea:	1a9b      	subs	r3, r3, r2
 800afec:	2b00      	cmp	r3, #0
 800afee:	d01c      	beq.n	800b02a <f_lseek+0x43a>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800aff6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aff8:	4618      	mov	r0, r3
 800affa:	f7fd f978 	bl	80082ee <clust2sect>
 800affe:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800b000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b002:	2b00      	cmp	r3, #0
 800b004:	d105      	bne.n	800b012 <f_lseek+0x422>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2202      	movs	r2, #2
 800b00a:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800b00e:	2302      	movs	r3, #2
 800b010:	e075      	b.n	800b0fe <f_lseek+0x50e>
					nsect += ofs / SS(fp->fs);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b018:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b01c:	461a      	mov	r2, r3
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	fbb3 f3f2 	udiv	r3, r3, r2
 800b024:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b026:	4413      	add	r3, r2
 800b028:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 800b036:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800b03a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b03e:	fb02 f201 	mul.w	r2, r2, r1
 800b042:	1a9b      	subs	r3, r3, r2
 800b044:	2b00      	cmp	r3, #0
 800b046:	d041      	beq.n	800b0cc <f_lseek+0x4dc>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800b04e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b050:	429a      	cmp	r2, r3
 800b052:	d03b      	beq.n	800b0cc <f_lseek+0x4dc>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800b05a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d01d      	beq.n	800b09e <f_lseek+0x4ae>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b068:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800b06c:	6879      	ldr	r1, [r7, #4]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800b074:	2301      	movs	r3, #1
 800b076:	f7fc fdab 	bl	8007bd0 <disk_write>
 800b07a:	4603      	mov	r3, r0
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d005      	beq.n	800b08c <f_lseek+0x49c>
					ABORT(fp->fs, FR_DISK_ERR);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2201      	movs	r2, #1
 800b084:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800b088:	2301      	movs	r3, #1
 800b08a:	e038      	b.n	800b0fe <f_lseek+0x50e>
				fp->flag &= ~FA__DIRTY;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800b092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b096:	b2da      	uxtb	r2, r3
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b0a4:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800b0a8:	6879      	ldr	r1, [r7, #4]
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0ae:	f7fc fd6f 	bl	8007b90 <disk_read>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d005      	beq.n	800b0c4 <f_lseek+0x4d4>
				ABORT(fp->fs, FR_DISK_ERR);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e01c      	b.n	800b0fe <f_lseek+0x50e>
#endif
			fp->dsect = nsect;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0c8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d90e      	bls.n	800b0fa <f_lseek+0x50a>
			fp->fsize = fp->fptr;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			fp->flag |= FA__WRITTEN;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800b0ee:	f043 0320 	orr.w	r3, r3, #32
 800b0f2:	b2da      	uxtb	r2, r3
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800b0fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3740      	adds	r7, #64	; 0x40
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}

0800b106 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800b106:	b580      	push	{r7, lr}
 800b108:	b084      	sub	sp, #16
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6078      	str	r0, [r7, #4]
 800b10e:	460b      	mov	r3, r1
 800b110:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800b112:	78fb      	ldrb	r3, [r7, #3]
 800b114:	2b0a      	cmp	r3, #10
 800b116:	d103      	bne.n	800b120 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800b118:	210d      	movs	r1, #13
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f7ff fff3 	bl	800b106 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	db25      	blt.n	800b178 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	1c5a      	adds	r2, r3, #1
 800b130:	60fa      	str	r2, [r7, #12]
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	4413      	add	r3, r2
 800b136:	78fa      	ldrb	r2, [r7, #3]
 800b138:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	2b3c      	cmp	r3, #60	; 0x3c
 800b13e:	dd12      	ble.n	800b166 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6818      	ldr	r0, [r3, #0]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f103 010c 	add.w	r1, r3, #12
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	f107 0308 	add.w	r3, r7, #8
 800b150:	f7ff fa85 	bl	800a65e <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800b154:	68ba      	ldr	r2, [r7, #8]
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	429a      	cmp	r2, r3
 800b15a:	d101      	bne.n	800b160 <putc_bfd+0x5a>
 800b15c:	2300      	movs	r3, #0
 800b15e:	e001      	b.n	800b164 <putc_bfd+0x5e>
 800b160:	f04f 33ff 	mov.w	r3, #4294967295
 800b164:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	68fa      	ldr	r2, [r7, #12]
 800b16a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	689b      	ldr	r3, [r3, #8]
 800b170:	1c5a      	adds	r2, r3, #1
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	609a      	str	r2, [r3, #8]
 800b176:	e000      	b.n	800b17a <putc_bfd+0x74>
	if (i < 0) return;
 800b178:	bf00      	nop
}
 800b17a:	3710      	adds	r7, #16
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800b180:	b590      	push	{r4, r7, lr}
 800b182:	b097      	sub	sp, #92	; 0x5c
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800b18e:	2300      	movs	r3, #0
 800b190:	613b      	str	r3, [r7, #16]
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800b196:	e009      	b.n	800b1ac <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	1c5a      	adds	r2, r3, #1
 800b19c:	607a      	str	r2, [r7, #4]
 800b19e:	781a      	ldrb	r2, [r3, #0]
 800b1a0:	f107 030c 	add.w	r3, r7, #12
 800b1a4:	4611      	mov	r1, r2
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7ff ffad 	bl	800b106 <putc_bfd>
	while (*str)			/* Put the string */
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	781b      	ldrb	r3, [r3, #0]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d1f1      	bne.n	800b198 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	db15      	blt.n	800b1e6 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800b1ba:	68f8      	ldr	r0, [r7, #12]
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	461c      	mov	r4, r3
 800b1c0:	f107 0208 	add.w	r2, r7, #8
 800b1c4:	f107 030c 	add.w	r3, r7, #12
 800b1c8:	f103 010c 	add.w	r1, r3, #12
 800b1cc:	4613      	mov	r3, r2
 800b1ce:	4622      	mov	r2, r4
 800b1d0:	f7ff fa45 	bl	800a65e <f_write>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d105      	bne.n	800b1e6 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	68ba      	ldr	r2, [r7, #8]
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d101      	bne.n	800b1e6 <f_puts+0x66>
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	e001      	b.n	800b1ea <f_puts+0x6a>
	return EOF;
 800b1e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	375c      	adds	r7, #92	; 0x5c
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd90      	pop	{r4, r7, pc}
	...

0800b1f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b087      	sub	sp, #28
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	60b9      	str	r1, [r7, #8]
 800b1fe:	4613      	mov	r3, r2
 800b200:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b202:	2301      	movs	r3, #1
 800b204:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b206:	2300      	movs	r3, #0
 800b208:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800b20a:	4b1e      	ldr	r3, [pc, #120]	; (800b284 <FATFS_LinkDriverEx+0x90>)
 800b20c:	7a5b      	ldrb	r3, [r3, #9]
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	2b01      	cmp	r3, #1
 800b212:	d831      	bhi.n	800b278 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b214:	4b1b      	ldr	r3, [pc, #108]	; (800b284 <FATFS_LinkDriverEx+0x90>)
 800b216:	7a5b      	ldrb	r3, [r3, #9]
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	461a      	mov	r2, r3
 800b21c:	4b19      	ldr	r3, [pc, #100]	; (800b284 <FATFS_LinkDriverEx+0x90>)
 800b21e:	2100      	movs	r1, #0
 800b220:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800b222:	4b18      	ldr	r3, [pc, #96]	; (800b284 <FATFS_LinkDriverEx+0x90>)
 800b224:	7a5b      	ldrb	r3, [r3, #9]
 800b226:	b2db      	uxtb	r3, r3
 800b228:	4a16      	ldr	r2, [pc, #88]	; (800b284 <FATFS_LinkDriverEx+0x90>)
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	4413      	add	r3, r2
 800b22e:	68fa      	ldr	r2, [r7, #12]
 800b230:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800b232:	4b14      	ldr	r3, [pc, #80]	; (800b284 <FATFS_LinkDriverEx+0x90>)
 800b234:	7a5b      	ldrb	r3, [r3, #9]
 800b236:	b2db      	uxtb	r3, r3
 800b238:	461a      	mov	r2, r3
 800b23a:	4b12      	ldr	r3, [pc, #72]	; (800b284 <FATFS_LinkDriverEx+0x90>)
 800b23c:	4413      	add	r3, r2
 800b23e:	79fa      	ldrb	r2, [r7, #7]
 800b240:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b242:	4b10      	ldr	r3, [pc, #64]	; (800b284 <FATFS_LinkDriverEx+0x90>)
 800b244:	7a5b      	ldrb	r3, [r3, #9]
 800b246:	b2db      	uxtb	r3, r3
 800b248:	1c5a      	adds	r2, r3, #1
 800b24a:	b2d1      	uxtb	r1, r2
 800b24c:	4a0d      	ldr	r2, [pc, #52]	; (800b284 <FATFS_LinkDriverEx+0x90>)
 800b24e:	7251      	strb	r1, [r2, #9]
 800b250:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b252:	7dbb      	ldrb	r3, [r7, #22]
 800b254:	3330      	adds	r3, #48	; 0x30
 800b256:	b2da      	uxtb	r2, r3
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	3301      	adds	r3, #1
 800b260:	223a      	movs	r2, #58	; 0x3a
 800b262:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	3302      	adds	r3, #2
 800b268:	222f      	movs	r2, #47	; 0x2f
 800b26a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	3303      	adds	r3, #3
 800b270:	2200      	movs	r2, #0
 800b272:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b274:	2300      	movs	r3, #0
 800b276:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800b278:	7dfb      	ldrb	r3, [r7, #23]
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	371c      	adds	r7, #28
 800b27e:	46bd      	mov	sp, r7
 800b280:	bc80      	pop	{r7}
 800b282:	4770      	bx	lr
 800b284:	2000014c 	.word	0x2000014c

0800b288 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b292:	2200      	movs	r2, #0
 800b294:	6839      	ldr	r1, [r7, #0]
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f7ff ffac 	bl	800b1f4 <FATFS_LinkDriverEx>
 800b29c:	4603      	mov	r3, r0
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3708      	adds	r7, #8
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
	...

0800b2a8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b085      	sub	sp, #20
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	6039      	str	r1, [r7, #0]
 800b2b2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b2b4:	88fb      	ldrh	r3, [r7, #6]
 800b2b6:	2b7f      	cmp	r3, #127	; 0x7f
 800b2b8:	d802      	bhi.n	800b2c0 <ff_convert+0x18>
		c = chr;
 800b2ba:	88fb      	ldrh	r3, [r7, #6]
 800b2bc:	81fb      	strh	r3, [r7, #14]
 800b2be:	e025      	b.n	800b30c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d00b      	beq.n	800b2de <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b2c6:	88fb      	ldrh	r3, [r7, #6]
 800b2c8:	2bff      	cmp	r3, #255	; 0xff
 800b2ca:	d805      	bhi.n	800b2d8 <ff_convert+0x30>
 800b2cc:	88fb      	ldrh	r3, [r7, #6]
 800b2ce:	3b80      	subs	r3, #128	; 0x80
 800b2d0:	4a11      	ldr	r2, [pc, #68]	; (800b318 <ff_convert+0x70>)
 800b2d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2d6:	e000      	b.n	800b2da <ff_convert+0x32>
 800b2d8:	2300      	movs	r3, #0
 800b2da:	81fb      	strh	r3, [r7, #14]
 800b2dc:	e016      	b.n	800b30c <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800b2de:	2300      	movs	r3, #0
 800b2e0:	81fb      	strh	r3, [r7, #14]
 800b2e2:	e009      	b.n	800b2f8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b2e4:	89fb      	ldrh	r3, [r7, #14]
 800b2e6:	4a0c      	ldr	r2, [pc, #48]	; (800b318 <ff_convert+0x70>)
 800b2e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2ec:	88fa      	ldrh	r2, [r7, #6]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d006      	beq.n	800b300 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b2f2:	89fb      	ldrh	r3, [r7, #14]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	81fb      	strh	r3, [r7, #14]
 800b2f8:	89fb      	ldrh	r3, [r7, #14]
 800b2fa:	2b7f      	cmp	r3, #127	; 0x7f
 800b2fc:	d9f2      	bls.n	800b2e4 <ff_convert+0x3c>
 800b2fe:	e000      	b.n	800b302 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b300:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b302:	89fb      	ldrh	r3, [r7, #14]
 800b304:	3380      	adds	r3, #128	; 0x80
 800b306:	b29b      	uxth	r3, r3
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b30c:	89fb      	ldrh	r3, [r7, #14]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3714      	adds	r7, #20
 800b312:	46bd      	mov	sp, r7
 800b314:	bc80      	pop	{r7}
 800b316:	4770      	bx	lr
 800b318:	0800cea4 	.word	0x0800cea4

0800b31c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b085      	sub	sp, #20
 800b320:	af00      	add	r7, sp, #0
 800b322:	4603      	mov	r3, r0
 800b324:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800b326:	2300      	movs	r3, #0
 800b328:	60fb      	str	r3, [r7, #12]
 800b32a:	e002      	b.n	800b332 <ff_wtoupper+0x16>
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	3301      	adds	r3, #1
 800b330:	60fb      	str	r3, [r7, #12]
 800b332:	4a0f      	ldr	r2, [pc, #60]	; (800b370 <ff_wtoupper+0x54>)
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d006      	beq.n	800b34c <ff_wtoupper+0x30>
 800b33e:	4a0c      	ldr	r2, [pc, #48]	; (800b370 <ff_wtoupper+0x54>)
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b346:	88fa      	ldrh	r2, [r7, #6]
 800b348:	429a      	cmp	r2, r3
 800b34a:	d1ef      	bne.n	800b32c <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800b34c:	4a08      	ldr	r2, [pc, #32]	; (800b370 <ff_wtoupper+0x54>)
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d004      	beq.n	800b362 <ff_wtoupper+0x46>
 800b358:	4a06      	ldr	r2, [pc, #24]	; (800b374 <ff_wtoupper+0x58>)
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b360:	e000      	b.n	800b364 <ff_wtoupper+0x48>
 800b362:	88fb      	ldrh	r3, [r7, #6]
}
 800b364:	4618      	mov	r0, r3
 800b366:	3714      	adds	r7, #20
 800b368:	46bd      	mov	sp, r7
 800b36a:	bc80      	pop	{r7}
 800b36c:	4770      	bx	lr
 800b36e:	bf00      	nop
 800b370:	0800cfa4 	.word	0x0800cfa4
 800b374:	0800d184 	.word	0x0800d184

0800b378 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
	return malloc(msize);	/* Allocate a new memory block with POSIX API */
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 f83b 	bl	800b3fc <malloc>
 800b386:	4603      	mov	r3, r0
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
	free(mblock);	/* Discard the memory block with POSIX API */
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 f837 	bl	800b40c <free>
}
 800b39e:	bf00      	nop
 800b3a0:	3708      	adds	r7, #8
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
	...

0800b3a8 <__errno>:
 800b3a8:	4b01      	ldr	r3, [pc, #4]	; (800b3b0 <__errno+0x8>)
 800b3aa:	6818      	ldr	r0, [r3, #0]
 800b3ac:	4770      	bx	lr
 800b3ae:	bf00      	nop
 800b3b0:	2000008c 	.word	0x2000008c

0800b3b4 <__libc_init_array>:
 800b3b4:	b570      	push	{r4, r5, r6, lr}
 800b3b6:	2600      	movs	r6, #0
 800b3b8:	4d0c      	ldr	r5, [pc, #48]	; (800b3ec <__libc_init_array+0x38>)
 800b3ba:	4c0d      	ldr	r4, [pc, #52]	; (800b3f0 <__libc_init_array+0x3c>)
 800b3bc:	1b64      	subs	r4, r4, r5
 800b3be:	10a4      	asrs	r4, r4, #2
 800b3c0:	42a6      	cmp	r6, r4
 800b3c2:	d109      	bne.n	800b3d8 <__libc_init_array+0x24>
 800b3c4:	f001 fbfa 	bl	800cbbc <_init>
 800b3c8:	2600      	movs	r6, #0
 800b3ca:	4d0a      	ldr	r5, [pc, #40]	; (800b3f4 <__libc_init_array+0x40>)
 800b3cc:	4c0a      	ldr	r4, [pc, #40]	; (800b3f8 <__libc_init_array+0x44>)
 800b3ce:	1b64      	subs	r4, r4, r5
 800b3d0:	10a4      	asrs	r4, r4, #2
 800b3d2:	42a6      	cmp	r6, r4
 800b3d4:	d105      	bne.n	800b3e2 <__libc_init_array+0x2e>
 800b3d6:	bd70      	pop	{r4, r5, r6, pc}
 800b3d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3dc:	4798      	blx	r3
 800b3de:	3601      	adds	r6, #1
 800b3e0:	e7ee      	b.n	800b3c0 <__libc_init_array+0xc>
 800b3e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3e6:	4798      	blx	r3
 800b3e8:	3601      	adds	r6, #1
 800b3ea:	e7f2      	b.n	800b3d2 <__libc_init_array+0x1e>
 800b3ec:	0800d3d8 	.word	0x0800d3d8
 800b3f0:	0800d3d8 	.word	0x0800d3d8
 800b3f4:	0800d3d8 	.word	0x0800d3d8
 800b3f8:	0800d3dc 	.word	0x0800d3dc

0800b3fc <malloc>:
 800b3fc:	4b02      	ldr	r3, [pc, #8]	; (800b408 <malloc+0xc>)
 800b3fe:	4601      	mov	r1, r0
 800b400:	6818      	ldr	r0, [r3, #0]
 800b402:	f000 b85f 	b.w	800b4c4 <_malloc_r>
 800b406:	bf00      	nop
 800b408:	2000008c 	.word	0x2000008c

0800b40c <free>:
 800b40c:	4b02      	ldr	r3, [pc, #8]	; (800b418 <free+0xc>)
 800b40e:	4601      	mov	r1, r0
 800b410:	6818      	ldr	r0, [r3, #0]
 800b412:	f000 b80b 	b.w	800b42c <_free_r>
 800b416:	bf00      	nop
 800b418:	2000008c 	.word	0x2000008c

0800b41c <memset>:
 800b41c:	4603      	mov	r3, r0
 800b41e:	4402      	add	r2, r0
 800b420:	4293      	cmp	r3, r2
 800b422:	d100      	bne.n	800b426 <memset+0xa>
 800b424:	4770      	bx	lr
 800b426:	f803 1b01 	strb.w	r1, [r3], #1
 800b42a:	e7f9      	b.n	800b420 <memset+0x4>

0800b42c <_free_r>:
 800b42c:	b538      	push	{r3, r4, r5, lr}
 800b42e:	4605      	mov	r5, r0
 800b430:	2900      	cmp	r1, #0
 800b432:	d043      	beq.n	800b4bc <_free_r+0x90>
 800b434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b438:	1f0c      	subs	r4, r1, #4
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	bfb8      	it	lt
 800b43e:	18e4      	addlt	r4, r4, r3
 800b440:	f000 f8ca 	bl	800b5d8 <__malloc_lock>
 800b444:	4a1e      	ldr	r2, [pc, #120]	; (800b4c0 <_free_r+0x94>)
 800b446:	6813      	ldr	r3, [r2, #0]
 800b448:	4610      	mov	r0, r2
 800b44a:	b933      	cbnz	r3, 800b45a <_free_r+0x2e>
 800b44c:	6063      	str	r3, [r4, #4]
 800b44e:	6014      	str	r4, [r2, #0]
 800b450:	4628      	mov	r0, r5
 800b452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b456:	f000 b8c5 	b.w	800b5e4 <__malloc_unlock>
 800b45a:	42a3      	cmp	r3, r4
 800b45c:	d90a      	bls.n	800b474 <_free_r+0x48>
 800b45e:	6821      	ldr	r1, [r4, #0]
 800b460:	1862      	adds	r2, r4, r1
 800b462:	4293      	cmp	r3, r2
 800b464:	bf01      	itttt	eq
 800b466:	681a      	ldreq	r2, [r3, #0]
 800b468:	685b      	ldreq	r3, [r3, #4]
 800b46a:	1852      	addeq	r2, r2, r1
 800b46c:	6022      	streq	r2, [r4, #0]
 800b46e:	6063      	str	r3, [r4, #4]
 800b470:	6004      	str	r4, [r0, #0]
 800b472:	e7ed      	b.n	800b450 <_free_r+0x24>
 800b474:	461a      	mov	r2, r3
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	b10b      	cbz	r3, 800b47e <_free_r+0x52>
 800b47a:	42a3      	cmp	r3, r4
 800b47c:	d9fa      	bls.n	800b474 <_free_r+0x48>
 800b47e:	6811      	ldr	r1, [r2, #0]
 800b480:	1850      	adds	r0, r2, r1
 800b482:	42a0      	cmp	r0, r4
 800b484:	d10b      	bne.n	800b49e <_free_r+0x72>
 800b486:	6820      	ldr	r0, [r4, #0]
 800b488:	4401      	add	r1, r0
 800b48a:	1850      	adds	r0, r2, r1
 800b48c:	4283      	cmp	r3, r0
 800b48e:	6011      	str	r1, [r2, #0]
 800b490:	d1de      	bne.n	800b450 <_free_r+0x24>
 800b492:	6818      	ldr	r0, [r3, #0]
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	4401      	add	r1, r0
 800b498:	6011      	str	r1, [r2, #0]
 800b49a:	6053      	str	r3, [r2, #4]
 800b49c:	e7d8      	b.n	800b450 <_free_r+0x24>
 800b49e:	d902      	bls.n	800b4a6 <_free_r+0x7a>
 800b4a0:	230c      	movs	r3, #12
 800b4a2:	602b      	str	r3, [r5, #0]
 800b4a4:	e7d4      	b.n	800b450 <_free_r+0x24>
 800b4a6:	6820      	ldr	r0, [r4, #0]
 800b4a8:	1821      	adds	r1, r4, r0
 800b4aa:	428b      	cmp	r3, r1
 800b4ac:	bf01      	itttt	eq
 800b4ae:	6819      	ldreq	r1, [r3, #0]
 800b4b0:	685b      	ldreq	r3, [r3, #4]
 800b4b2:	1809      	addeq	r1, r1, r0
 800b4b4:	6021      	streq	r1, [r4, #0]
 800b4b6:	6063      	str	r3, [r4, #4]
 800b4b8:	6054      	str	r4, [r2, #4]
 800b4ba:	e7c9      	b.n	800b450 <_free_r+0x24>
 800b4bc:	bd38      	pop	{r3, r4, r5, pc}
 800b4be:	bf00      	nop
 800b4c0:	20000158 	.word	0x20000158

0800b4c4 <_malloc_r>:
 800b4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4c6:	1ccd      	adds	r5, r1, #3
 800b4c8:	f025 0503 	bic.w	r5, r5, #3
 800b4cc:	3508      	adds	r5, #8
 800b4ce:	2d0c      	cmp	r5, #12
 800b4d0:	bf38      	it	cc
 800b4d2:	250c      	movcc	r5, #12
 800b4d4:	2d00      	cmp	r5, #0
 800b4d6:	4606      	mov	r6, r0
 800b4d8:	db01      	blt.n	800b4de <_malloc_r+0x1a>
 800b4da:	42a9      	cmp	r1, r5
 800b4dc:	d903      	bls.n	800b4e6 <_malloc_r+0x22>
 800b4de:	230c      	movs	r3, #12
 800b4e0:	6033      	str	r3, [r6, #0]
 800b4e2:	2000      	movs	r0, #0
 800b4e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4e6:	f000 f877 	bl	800b5d8 <__malloc_lock>
 800b4ea:	4921      	ldr	r1, [pc, #132]	; (800b570 <_malloc_r+0xac>)
 800b4ec:	680a      	ldr	r2, [r1, #0]
 800b4ee:	4614      	mov	r4, r2
 800b4f0:	b99c      	cbnz	r4, 800b51a <_malloc_r+0x56>
 800b4f2:	4f20      	ldr	r7, [pc, #128]	; (800b574 <_malloc_r+0xb0>)
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	b923      	cbnz	r3, 800b502 <_malloc_r+0x3e>
 800b4f8:	4621      	mov	r1, r4
 800b4fa:	4630      	mov	r0, r6
 800b4fc:	f000 f83c 	bl	800b578 <_sbrk_r>
 800b500:	6038      	str	r0, [r7, #0]
 800b502:	4629      	mov	r1, r5
 800b504:	4630      	mov	r0, r6
 800b506:	f000 f837 	bl	800b578 <_sbrk_r>
 800b50a:	1c43      	adds	r3, r0, #1
 800b50c:	d123      	bne.n	800b556 <_malloc_r+0x92>
 800b50e:	230c      	movs	r3, #12
 800b510:	4630      	mov	r0, r6
 800b512:	6033      	str	r3, [r6, #0]
 800b514:	f000 f866 	bl	800b5e4 <__malloc_unlock>
 800b518:	e7e3      	b.n	800b4e2 <_malloc_r+0x1e>
 800b51a:	6823      	ldr	r3, [r4, #0]
 800b51c:	1b5b      	subs	r3, r3, r5
 800b51e:	d417      	bmi.n	800b550 <_malloc_r+0x8c>
 800b520:	2b0b      	cmp	r3, #11
 800b522:	d903      	bls.n	800b52c <_malloc_r+0x68>
 800b524:	6023      	str	r3, [r4, #0]
 800b526:	441c      	add	r4, r3
 800b528:	6025      	str	r5, [r4, #0]
 800b52a:	e004      	b.n	800b536 <_malloc_r+0x72>
 800b52c:	6863      	ldr	r3, [r4, #4]
 800b52e:	42a2      	cmp	r2, r4
 800b530:	bf0c      	ite	eq
 800b532:	600b      	streq	r3, [r1, #0]
 800b534:	6053      	strne	r3, [r2, #4]
 800b536:	4630      	mov	r0, r6
 800b538:	f000 f854 	bl	800b5e4 <__malloc_unlock>
 800b53c:	f104 000b 	add.w	r0, r4, #11
 800b540:	1d23      	adds	r3, r4, #4
 800b542:	f020 0007 	bic.w	r0, r0, #7
 800b546:	1ac2      	subs	r2, r0, r3
 800b548:	d0cc      	beq.n	800b4e4 <_malloc_r+0x20>
 800b54a:	1a1b      	subs	r3, r3, r0
 800b54c:	50a3      	str	r3, [r4, r2]
 800b54e:	e7c9      	b.n	800b4e4 <_malloc_r+0x20>
 800b550:	4622      	mov	r2, r4
 800b552:	6864      	ldr	r4, [r4, #4]
 800b554:	e7cc      	b.n	800b4f0 <_malloc_r+0x2c>
 800b556:	1cc4      	adds	r4, r0, #3
 800b558:	f024 0403 	bic.w	r4, r4, #3
 800b55c:	42a0      	cmp	r0, r4
 800b55e:	d0e3      	beq.n	800b528 <_malloc_r+0x64>
 800b560:	1a21      	subs	r1, r4, r0
 800b562:	4630      	mov	r0, r6
 800b564:	f000 f808 	bl	800b578 <_sbrk_r>
 800b568:	3001      	adds	r0, #1
 800b56a:	d1dd      	bne.n	800b528 <_malloc_r+0x64>
 800b56c:	e7cf      	b.n	800b50e <_malloc_r+0x4a>
 800b56e:	bf00      	nop
 800b570:	20000158 	.word	0x20000158
 800b574:	2000015c 	.word	0x2000015c

0800b578 <_sbrk_r>:
 800b578:	b538      	push	{r3, r4, r5, lr}
 800b57a:	2300      	movs	r3, #0
 800b57c:	4d05      	ldr	r5, [pc, #20]	; (800b594 <_sbrk_r+0x1c>)
 800b57e:	4604      	mov	r4, r0
 800b580:	4608      	mov	r0, r1
 800b582:	602b      	str	r3, [r5, #0]
 800b584:	f7f8 fadc 	bl	8003b40 <_sbrk>
 800b588:	1c43      	adds	r3, r0, #1
 800b58a:	d102      	bne.n	800b592 <_sbrk_r+0x1a>
 800b58c:	682b      	ldr	r3, [r5, #0]
 800b58e:	b103      	cbz	r3, 800b592 <_sbrk_r+0x1a>
 800b590:	6023      	str	r3, [r4, #0]
 800b592:	bd38      	pop	{r3, r4, r5, pc}
 800b594:	200014fc 	.word	0x200014fc

0800b598 <siprintf>:
 800b598:	b40e      	push	{r1, r2, r3}
 800b59a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b59e:	b500      	push	{lr}
 800b5a0:	b09c      	sub	sp, #112	; 0x70
 800b5a2:	ab1d      	add	r3, sp, #116	; 0x74
 800b5a4:	9002      	str	r0, [sp, #8]
 800b5a6:	9006      	str	r0, [sp, #24]
 800b5a8:	9107      	str	r1, [sp, #28]
 800b5aa:	9104      	str	r1, [sp, #16]
 800b5ac:	4808      	ldr	r0, [pc, #32]	; (800b5d0 <siprintf+0x38>)
 800b5ae:	4909      	ldr	r1, [pc, #36]	; (800b5d4 <siprintf+0x3c>)
 800b5b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5b4:	9105      	str	r1, [sp, #20]
 800b5b6:	6800      	ldr	r0, [r0, #0]
 800b5b8:	a902      	add	r1, sp, #8
 800b5ba:	9301      	str	r3, [sp, #4]
 800b5bc:	f000 f874 	bl	800b6a8 <_svfiprintf_r>
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	9b02      	ldr	r3, [sp, #8]
 800b5c4:	701a      	strb	r2, [r3, #0]
 800b5c6:	b01c      	add	sp, #112	; 0x70
 800b5c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5cc:	b003      	add	sp, #12
 800b5ce:	4770      	bx	lr
 800b5d0:	2000008c 	.word	0x2000008c
 800b5d4:	ffff0208 	.word	0xffff0208

0800b5d8 <__malloc_lock>:
 800b5d8:	4801      	ldr	r0, [pc, #4]	; (800b5e0 <__malloc_lock+0x8>)
 800b5da:	f000 bafb 	b.w	800bbd4 <__retarget_lock_acquire_recursive>
 800b5de:	bf00      	nop
 800b5e0:	20001504 	.word	0x20001504

0800b5e4 <__malloc_unlock>:
 800b5e4:	4801      	ldr	r0, [pc, #4]	; (800b5ec <__malloc_unlock+0x8>)
 800b5e6:	f000 baf6 	b.w	800bbd6 <__retarget_lock_release_recursive>
 800b5ea:	bf00      	nop
 800b5ec:	20001504 	.word	0x20001504

0800b5f0 <__ssputs_r>:
 800b5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f4:	688e      	ldr	r6, [r1, #8]
 800b5f6:	4682      	mov	sl, r0
 800b5f8:	429e      	cmp	r6, r3
 800b5fa:	460c      	mov	r4, r1
 800b5fc:	4690      	mov	r8, r2
 800b5fe:	461f      	mov	r7, r3
 800b600:	d838      	bhi.n	800b674 <__ssputs_r+0x84>
 800b602:	898a      	ldrh	r2, [r1, #12]
 800b604:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b608:	d032      	beq.n	800b670 <__ssputs_r+0x80>
 800b60a:	6825      	ldr	r5, [r4, #0]
 800b60c:	6909      	ldr	r1, [r1, #16]
 800b60e:	3301      	adds	r3, #1
 800b610:	eba5 0901 	sub.w	r9, r5, r1
 800b614:	6965      	ldr	r5, [r4, #20]
 800b616:	444b      	add	r3, r9
 800b618:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b61c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b620:	106d      	asrs	r5, r5, #1
 800b622:	429d      	cmp	r5, r3
 800b624:	bf38      	it	cc
 800b626:	461d      	movcc	r5, r3
 800b628:	0553      	lsls	r3, r2, #21
 800b62a:	d531      	bpl.n	800b690 <__ssputs_r+0xa0>
 800b62c:	4629      	mov	r1, r5
 800b62e:	f7ff ff49 	bl	800b4c4 <_malloc_r>
 800b632:	4606      	mov	r6, r0
 800b634:	b950      	cbnz	r0, 800b64c <__ssputs_r+0x5c>
 800b636:	230c      	movs	r3, #12
 800b638:	f04f 30ff 	mov.w	r0, #4294967295
 800b63c:	f8ca 3000 	str.w	r3, [sl]
 800b640:	89a3      	ldrh	r3, [r4, #12]
 800b642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b646:	81a3      	strh	r3, [r4, #12]
 800b648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b64c:	464a      	mov	r2, r9
 800b64e:	6921      	ldr	r1, [r4, #16]
 800b650:	f000 fad0 	bl	800bbf4 <memcpy>
 800b654:	89a3      	ldrh	r3, [r4, #12]
 800b656:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b65a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b65e:	81a3      	strh	r3, [r4, #12]
 800b660:	6126      	str	r6, [r4, #16]
 800b662:	444e      	add	r6, r9
 800b664:	6026      	str	r6, [r4, #0]
 800b666:	463e      	mov	r6, r7
 800b668:	6165      	str	r5, [r4, #20]
 800b66a:	eba5 0509 	sub.w	r5, r5, r9
 800b66e:	60a5      	str	r5, [r4, #8]
 800b670:	42be      	cmp	r6, r7
 800b672:	d900      	bls.n	800b676 <__ssputs_r+0x86>
 800b674:	463e      	mov	r6, r7
 800b676:	4632      	mov	r2, r6
 800b678:	4641      	mov	r1, r8
 800b67a:	6820      	ldr	r0, [r4, #0]
 800b67c:	f000 fac8 	bl	800bc10 <memmove>
 800b680:	68a3      	ldr	r3, [r4, #8]
 800b682:	6822      	ldr	r2, [r4, #0]
 800b684:	1b9b      	subs	r3, r3, r6
 800b686:	4432      	add	r2, r6
 800b688:	2000      	movs	r0, #0
 800b68a:	60a3      	str	r3, [r4, #8]
 800b68c:	6022      	str	r2, [r4, #0]
 800b68e:	e7db      	b.n	800b648 <__ssputs_r+0x58>
 800b690:	462a      	mov	r2, r5
 800b692:	f000 fad7 	bl	800bc44 <_realloc_r>
 800b696:	4606      	mov	r6, r0
 800b698:	2800      	cmp	r0, #0
 800b69a:	d1e1      	bne.n	800b660 <__ssputs_r+0x70>
 800b69c:	4650      	mov	r0, sl
 800b69e:	6921      	ldr	r1, [r4, #16]
 800b6a0:	f7ff fec4 	bl	800b42c <_free_r>
 800b6a4:	e7c7      	b.n	800b636 <__ssputs_r+0x46>
	...

0800b6a8 <_svfiprintf_r>:
 800b6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ac:	4698      	mov	r8, r3
 800b6ae:	898b      	ldrh	r3, [r1, #12]
 800b6b0:	4607      	mov	r7, r0
 800b6b2:	061b      	lsls	r3, r3, #24
 800b6b4:	460d      	mov	r5, r1
 800b6b6:	4614      	mov	r4, r2
 800b6b8:	b09d      	sub	sp, #116	; 0x74
 800b6ba:	d50e      	bpl.n	800b6da <_svfiprintf_r+0x32>
 800b6bc:	690b      	ldr	r3, [r1, #16]
 800b6be:	b963      	cbnz	r3, 800b6da <_svfiprintf_r+0x32>
 800b6c0:	2140      	movs	r1, #64	; 0x40
 800b6c2:	f7ff feff 	bl	800b4c4 <_malloc_r>
 800b6c6:	6028      	str	r0, [r5, #0]
 800b6c8:	6128      	str	r0, [r5, #16]
 800b6ca:	b920      	cbnz	r0, 800b6d6 <_svfiprintf_r+0x2e>
 800b6cc:	230c      	movs	r3, #12
 800b6ce:	603b      	str	r3, [r7, #0]
 800b6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d4:	e0d1      	b.n	800b87a <_svfiprintf_r+0x1d2>
 800b6d6:	2340      	movs	r3, #64	; 0x40
 800b6d8:	616b      	str	r3, [r5, #20]
 800b6da:	2300      	movs	r3, #0
 800b6dc:	9309      	str	r3, [sp, #36]	; 0x24
 800b6de:	2320      	movs	r3, #32
 800b6e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6e4:	2330      	movs	r3, #48	; 0x30
 800b6e6:	f04f 0901 	mov.w	r9, #1
 800b6ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b894 <_svfiprintf_r+0x1ec>
 800b6f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6f6:	4623      	mov	r3, r4
 800b6f8:	469a      	mov	sl, r3
 800b6fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6fe:	b10a      	cbz	r2, 800b704 <_svfiprintf_r+0x5c>
 800b700:	2a25      	cmp	r2, #37	; 0x25
 800b702:	d1f9      	bne.n	800b6f8 <_svfiprintf_r+0x50>
 800b704:	ebba 0b04 	subs.w	fp, sl, r4
 800b708:	d00b      	beq.n	800b722 <_svfiprintf_r+0x7a>
 800b70a:	465b      	mov	r3, fp
 800b70c:	4622      	mov	r2, r4
 800b70e:	4629      	mov	r1, r5
 800b710:	4638      	mov	r0, r7
 800b712:	f7ff ff6d 	bl	800b5f0 <__ssputs_r>
 800b716:	3001      	adds	r0, #1
 800b718:	f000 80aa 	beq.w	800b870 <_svfiprintf_r+0x1c8>
 800b71c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b71e:	445a      	add	r2, fp
 800b720:	9209      	str	r2, [sp, #36]	; 0x24
 800b722:	f89a 3000 	ldrb.w	r3, [sl]
 800b726:	2b00      	cmp	r3, #0
 800b728:	f000 80a2 	beq.w	800b870 <_svfiprintf_r+0x1c8>
 800b72c:	2300      	movs	r3, #0
 800b72e:	f04f 32ff 	mov.w	r2, #4294967295
 800b732:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b736:	f10a 0a01 	add.w	sl, sl, #1
 800b73a:	9304      	str	r3, [sp, #16]
 800b73c:	9307      	str	r3, [sp, #28]
 800b73e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b742:	931a      	str	r3, [sp, #104]	; 0x68
 800b744:	4654      	mov	r4, sl
 800b746:	2205      	movs	r2, #5
 800b748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b74c:	4851      	ldr	r0, [pc, #324]	; (800b894 <_svfiprintf_r+0x1ec>)
 800b74e:	f000 fa43 	bl	800bbd8 <memchr>
 800b752:	9a04      	ldr	r2, [sp, #16]
 800b754:	b9d8      	cbnz	r0, 800b78e <_svfiprintf_r+0xe6>
 800b756:	06d0      	lsls	r0, r2, #27
 800b758:	bf44      	itt	mi
 800b75a:	2320      	movmi	r3, #32
 800b75c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b760:	0711      	lsls	r1, r2, #28
 800b762:	bf44      	itt	mi
 800b764:	232b      	movmi	r3, #43	; 0x2b
 800b766:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b76a:	f89a 3000 	ldrb.w	r3, [sl]
 800b76e:	2b2a      	cmp	r3, #42	; 0x2a
 800b770:	d015      	beq.n	800b79e <_svfiprintf_r+0xf6>
 800b772:	4654      	mov	r4, sl
 800b774:	2000      	movs	r0, #0
 800b776:	f04f 0c0a 	mov.w	ip, #10
 800b77a:	9a07      	ldr	r2, [sp, #28]
 800b77c:	4621      	mov	r1, r4
 800b77e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b782:	3b30      	subs	r3, #48	; 0x30
 800b784:	2b09      	cmp	r3, #9
 800b786:	d94e      	bls.n	800b826 <_svfiprintf_r+0x17e>
 800b788:	b1b0      	cbz	r0, 800b7b8 <_svfiprintf_r+0x110>
 800b78a:	9207      	str	r2, [sp, #28]
 800b78c:	e014      	b.n	800b7b8 <_svfiprintf_r+0x110>
 800b78e:	eba0 0308 	sub.w	r3, r0, r8
 800b792:	fa09 f303 	lsl.w	r3, r9, r3
 800b796:	4313      	orrs	r3, r2
 800b798:	46a2      	mov	sl, r4
 800b79a:	9304      	str	r3, [sp, #16]
 800b79c:	e7d2      	b.n	800b744 <_svfiprintf_r+0x9c>
 800b79e:	9b03      	ldr	r3, [sp, #12]
 800b7a0:	1d19      	adds	r1, r3, #4
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	9103      	str	r1, [sp, #12]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	bfbb      	ittet	lt
 800b7aa:	425b      	neglt	r3, r3
 800b7ac:	f042 0202 	orrlt.w	r2, r2, #2
 800b7b0:	9307      	strge	r3, [sp, #28]
 800b7b2:	9307      	strlt	r3, [sp, #28]
 800b7b4:	bfb8      	it	lt
 800b7b6:	9204      	strlt	r2, [sp, #16]
 800b7b8:	7823      	ldrb	r3, [r4, #0]
 800b7ba:	2b2e      	cmp	r3, #46	; 0x2e
 800b7bc:	d10c      	bne.n	800b7d8 <_svfiprintf_r+0x130>
 800b7be:	7863      	ldrb	r3, [r4, #1]
 800b7c0:	2b2a      	cmp	r3, #42	; 0x2a
 800b7c2:	d135      	bne.n	800b830 <_svfiprintf_r+0x188>
 800b7c4:	9b03      	ldr	r3, [sp, #12]
 800b7c6:	3402      	adds	r4, #2
 800b7c8:	1d1a      	adds	r2, r3, #4
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	9203      	str	r2, [sp, #12]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	bfb8      	it	lt
 800b7d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b7d6:	9305      	str	r3, [sp, #20]
 800b7d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b8a4 <_svfiprintf_r+0x1fc>
 800b7dc:	2203      	movs	r2, #3
 800b7de:	4650      	mov	r0, sl
 800b7e0:	7821      	ldrb	r1, [r4, #0]
 800b7e2:	f000 f9f9 	bl	800bbd8 <memchr>
 800b7e6:	b140      	cbz	r0, 800b7fa <_svfiprintf_r+0x152>
 800b7e8:	2340      	movs	r3, #64	; 0x40
 800b7ea:	eba0 000a 	sub.w	r0, r0, sl
 800b7ee:	fa03 f000 	lsl.w	r0, r3, r0
 800b7f2:	9b04      	ldr	r3, [sp, #16]
 800b7f4:	3401      	adds	r4, #1
 800b7f6:	4303      	orrs	r3, r0
 800b7f8:	9304      	str	r3, [sp, #16]
 800b7fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7fe:	2206      	movs	r2, #6
 800b800:	4825      	ldr	r0, [pc, #148]	; (800b898 <_svfiprintf_r+0x1f0>)
 800b802:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b806:	f000 f9e7 	bl	800bbd8 <memchr>
 800b80a:	2800      	cmp	r0, #0
 800b80c:	d038      	beq.n	800b880 <_svfiprintf_r+0x1d8>
 800b80e:	4b23      	ldr	r3, [pc, #140]	; (800b89c <_svfiprintf_r+0x1f4>)
 800b810:	bb1b      	cbnz	r3, 800b85a <_svfiprintf_r+0x1b2>
 800b812:	9b03      	ldr	r3, [sp, #12]
 800b814:	3307      	adds	r3, #7
 800b816:	f023 0307 	bic.w	r3, r3, #7
 800b81a:	3308      	adds	r3, #8
 800b81c:	9303      	str	r3, [sp, #12]
 800b81e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b820:	4433      	add	r3, r6
 800b822:	9309      	str	r3, [sp, #36]	; 0x24
 800b824:	e767      	b.n	800b6f6 <_svfiprintf_r+0x4e>
 800b826:	460c      	mov	r4, r1
 800b828:	2001      	movs	r0, #1
 800b82a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b82e:	e7a5      	b.n	800b77c <_svfiprintf_r+0xd4>
 800b830:	2300      	movs	r3, #0
 800b832:	f04f 0c0a 	mov.w	ip, #10
 800b836:	4619      	mov	r1, r3
 800b838:	3401      	adds	r4, #1
 800b83a:	9305      	str	r3, [sp, #20]
 800b83c:	4620      	mov	r0, r4
 800b83e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b842:	3a30      	subs	r2, #48	; 0x30
 800b844:	2a09      	cmp	r2, #9
 800b846:	d903      	bls.n	800b850 <_svfiprintf_r+0x1a8>
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d0c5      	beq.n	800b7d8 <_svfiprintf_r+0x130>
 800b84c:	9105      	str	r1, [sp, #20]
 800b84e:	e7c3      	b.n	800b7d8 <_svfiprintf_r+0x130>
 800b850:	4604      	mov	r4, r0
 800b852:	2301      	movs	r3, #1
 800b854:	fb0c 2101 	mla	r1, ip, r1, r2
 800b858:	e7f0      	b.n	800b83c <_svfiprintf_r+0x194>
 800b85a:	ab03      	add	r3, sp, #12
 800b85c:	9300      	str	r3, [sp, #0]
 800b85e:	462a      	mov	r2, r5
 800b860:	4638      	mov	r0, r7
 800b862:	4b0f      	ldr	r3, [pc, #60]	; (800b8a0 <_svfiprintf_r+0x1f8>)
 800b864:	a904      	add	r1, sp, #16
 800b866:	f3af 8000 	nop.w
 800b86a:	1c42      	adds	r2, r0, #1
 800b86c:	4606      	mov	r6, r0
 800b86e:	d1d6      	bne.n	800b81e <_svfiprintf_r+0x176>
 800b870:	89ab      	ldrh	r3, [r5, #12]
 800b872:	065b      	lsls	r3, r3, #25
 800b874:	f53f af2c 	bmi.w	800b6d0 <_svfiprintf_r+0x28>
 800b878:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b87a:	b01d      	add	sp, #116	; 0x74
 800b87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b880:	ab03      	add	r3, sp, #12
 800b882:	9300      	str	r3, [sp, #0]
 800b884:	462a      	mov	r2, r5
 800b886:	4638      	mov	r0, r7
 800b888:	4b05      	ldr	r3, [pc, #20]	; (800b8a0 <_svfiprintf_r+0x1f8>)
 800b88a:	a904      	add	r1, sp, #16
 800b88c:	f000 f87c 	bl	800b988 <_printf_i>
 800b890:	e7eb      	b.n	800b86a <_svfiprintf_r+0x1c2>
 800b892:	bf00      	nop
 800b894:	0800d364 	.word	0x0800d364
 800b898:	0800d36e 	.word	0x0800d36e
 800b89c:	00000000 	.word	0x00000000
 800b8a0:	0800b5f1 	.word	0x0800b5f1
 800b8a4:	0800d36a 	.word	0x0800d36a

0800b8a8 <_printf_common>:
 800b8a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8ac:	4616      	mov	r6, r2
 800b8ae:	4699      	mov	r9, r3
 800b8b0:	688a      	ldr	r2, [r1, #8]
 800b8b2:	690b      	ldr	r3, [r1, #16]
 800b8b4:	4607      	mov	r7, r0
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	bfb8      	it	lt
 800b8ba:	4613      	movlt	r3, r2
 800b8bc:	6033      	str	r3, [r6, #0]
 800b8be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b8c2:	460c      	mov	r4, r1
 800b8c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b8c8:	b10a      	cbz	r2, 800b8ce <_printf_common+0x26>
 800b8ca:	3301      	adds	r3, #1
 800b8cc:	6033      	str	r3, [r6, #0]
 800b8ce:	6823      	ldr	r3, [r4, #0]
 800b8d0:	0699      	lsls	r1, r3, #26
 800b8d2:	bf42      	ittt	mi
 800b8d4:	6833      	ldrmi	r3, [r6, #0]
 800b8d6:	3302      	addmi	r3, #2
 800b8d8:	6033      	strmi	r3, [r6, #0]
 800b8da:	6825      	ldr	r5, [r4, #0]
 800b8dc:	f015 0506 	ands.w	r5, r5, #6
 800b8e0:	d106      	bne.n	800b8f0 <_printf_common+0x48>
 800b8e2:	f104 0a19 	add.w	sl, r4, #25
 800b8e6:	68e3      	ldr	r3, [r4, #12]
 800b8e8:	6832      	ldr	r2, [r6, #0]
 800b8ea:	1a9b      	subs	r3, r3, r2
 800b8ec:	42ab      	cmp	r3, r5
 800b8ee:	dc28      	bgt.n	800b942 <_printf_common+0x9a>
 800b8f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b8f4:	1e13      	subs	r3, r2, #0
 800b8f6:	6822      	ldr	r2, [r4, #0]
 800b8f8:	bf18      	it	ne
 800b8fa:	2301      	movne	r3, #1
 800b8fc:	0692      	lsls	r2, r2, #26
 800b8fe:	d42d      	bmi.n	800b95c <_printf_common+0xb4>
 800b900:	4649      	mov	r1, r9
 800b902:	4638      	mov	r0, r7
 800b904:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b908:	47c0      	blx	r8
 800b90a:	3001      	adds	r0, #1
 800b90c:	d020      	beq.n	800b950 <_printf_common+0xa8>
 800b90e:	6823      	ldr	r3, [r4, #0]
 800b910:	68e5      	ldr	r5, [r4, #12]
 800b912:	f003 0306 	and.w	r3, r3, #6
 800b916:	2b04      	cmp	r3, #4
 800b918:	bf18      	it	ne
 800b91a:	2500      	movne	r5, #0
 800b91c:	6832      	ldr	r2, [r6, #0]
 800b91e:	f04f 0600 	mov.w	r6, #0
 800b922:	68a3      	ldr	r3, [r4, #8]
 800b924:	bf08      	it	eq
 800b926:	1aad      	subeq	r5, r5, r2
 800b928:	6922      	ldr	r2, [r4, #16]
 800b92a:	bf08      	it	eq
 800b92c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b930:	4293      	cmp	r3, r2
 800b932:	bfc4      	itt	gt
 800b934:	1a9b      	subgt	r3, r3, r2
 800b936:	18ed      	addgt	r5, r5, r3
 800b938:	341a      	adds	r4, #26
 800b93a:	42b5      	cmp	r5, r6
 800b93c:	d11a      	bne.n	800b974 <_printf_common+0xcc>
 800b93e:	2000      	movs	r0, #0
 800b940:	e008      	b.n	800b954 <_printf_common+0xac>
 800b942:	2301      	movs	r3, #1
 800b944:	4652      	mov	r2, sl
 800b946:	4649      	mov	r1, r9
 800b948:	4638      	mov	r0, r7
 800b94a:	47c0      	blx	r8
 800b94c:	3001      	adds	r0, #1
 800b94e:	d103      	bne.n	800b958 <_printf_common+0xb0>
 800b950:	f04f 30ff 	mov.w	r0, #4294967295
 800b954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b958:	3501      	adds	r5, #1
 800b95a:	e7c4      	b.n	800b8e6 <_printf_common+0x3e>
 800b95c:	2030      	movs	r0, #48	; 0x30
 800b95e:	18e1      	adds	r1, r4, r3
 800b960:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b964:	1c5a      	adds	r2, r3, #1
 800b966:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b96a:	4422      	add	r2, r4
 800b96c:	3302      	adds	r3, #2
 800b96e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b972:	e7c5      	b.n	800b900 <_printf_common+0x58>
 800b974:	2301      	movs	r3, #1
 800b976:	4622      	mov	r2, r4
 800b978:	4649      	mov	r1, r9
 800b97a:	4638      	mov	r0, r7
 800b97c:	47c0      	blx	r8
 800b97e:	3001      	adds	r0, #1
 800b980:	d0e6      	beq.n	800b950 <_printf_common+0xa8>
 800b982:	3601      	adds	r6, #1
 800b984:	e7d9      	b.n	800b93a <_printf_common+0x92>
	...

0800b988 <_printf_i>:
 800b988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b98c:	460c      	mov	r4, r1
 800b98e:	7e27      	ldrb	r7, [r4, #24]
 800b990:	4691      	mov	r9, r2
 800b992:	2f78      	cmp	r7, #120	; 0x78
 800b994:	4680      	mov	r8, r0
 800b996:	469a      	mov	sl, r3
 800b998:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b99a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b99e:	d807      	bhi.n	800b9b0 <_printf_i+0x28>
 800b9a0:	2f62      	cmp	r7, #98	; 0x62
 800b9a2:	d80a      	bhi.n	800b9ba <_printf_i+0x32>
 800b9a4:	2f00      	cmp	r7, #0
 800b9a6:	f000 80d9 	beq.w	800bb5c <_printf_i+0x1d4>
 800b9aa:	2f58      	cmp	r7, #88	; 0x58
 800b9ac:	f000 80a4 	beq.w	800baf8 <_printf_i+0x170>
 800b9b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b9b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b9b8:	e03a      	b.n	800ba30 <_printf_i+0xa8>
 800b9ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b9be:	2b15      	cmp	r3, #21
 800b9c0:	d8f6      	bhi.n	800b9b0 <_printf_i+0x28>
 800b9c2:	a001      	add	r0, pc, #4	; (adr r0, 800b9c8 <_printf_i+0x40>)
 800b9c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b9c8:	0800ba21 	.word	0x0800ba21
 800b9cc:	0800ba35 	.word	0x0800ba35
 800b9d0:	0800b9b1 	.word	0x0800b9b1
 800b9d4:	0800b9b1 	.word	0x0800b9b1
 800b9d8:	0800b9b1 	.word	0x0800b9b1
 800b9dc:	0800b9b1 	.word	0x0800b9b1
 800b9e0:	0800ba35 	.word	0x0800ba35
 800b9e4:	0800b9b1 	.word	0x0800b9b1
 800b9e8:	0800b9b1 	.word	0x0800b9b1
 800b9ec:	0800b9b1 	.word	0x0800b9b1
 800b9f0:	0800b9b1 	.word	0x0800b9b1
 800b9f4:	0800bb43 	.word	0x0800bb43
 800b9f8:	0800ba65 	.word	0x0800ba65
 800b9fc:	0800bb25 	.word	0x0800bb25
 800ba00:	0800b9b1 	.word	0x0800b9b1
 800ba04:	0800b9b1 	.word	0x0800b9b1
 800ba08:	0800bb65 	.word	0x0800bb65
 800ba0c:	0800b9b1 	.word	0x0800b9b1
 800ba10:	0800ba65 	.word	0x0800ba65
 800ba14:	0800b9b1 	.word	0x0800b9b1
 800ba18:	0800b9b1 	.word	0x0800b9b1
 800ba1c:	0800bb2d 	.word	0x0800bb2d
 800ba20:	680b      	ldr	r3, [r1, #0]
 800ba22:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ba26:	1d1a      	adds	r2, r3, #4
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	600a      	str	r2, [r1, #0]
 800ba2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba30:	2301      	movs	r3, #1
 800ba32:	e0a4      	b.n	800bb7e <_printf_i+0x1f6>
 800ba34:	6825      	ldr	r5, [r4, #0]
 800ba36:	6808      	ldr	r0, [r1, #0]
 800ba38:	062e      	lsls	r6, r5, #24
 800ba3a:	f100 0304 	add.w	r3, r0, #4
 800ba3e:	d50a      	bpl.n	800ba56 <_printf_i+0xce>
 800ba40:	6805      	ldr	r5, [r0, #0]
 800ba42:	600b      	str	r3, [r1, #0]
 800ba44:	2d00      	cmp	r5, #0
 800ba46:	da03      	bge.n	800ba50 <_printf_i+0xc8>
 800ba48:	232d      	movs	r3, #45	; 0x2d
 800ba4a:	426d      	negs	r5, r5
 800ba4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba50:	230a      	movs	r3, #10
 800ba52:	485e      	ldr	r0, [pc, #376]	; (800bbcc <_printf_i+0x244>)
 800ba54:	e019      	b.n	800ba8a <_printf_i+0x102>
 800ba56:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ba5a:	6805      	ldr	r5, [r0, #0]
 800ba5c:	600b      	str	r3, [r1, #0]
 800ba5e:	bf18      	it	ne
 800ba60:	b22d      	sxthne	r5, r5
 800ba62:	e7ef      	b.n	800ba44 <_printf_i+0xbc>
 800ba64:	680b      	ldr	r3, [r1, #0]
 800ba66:	6825      	ldr	r5, [r4, #0]
 800ba68:	1d18      	adds	r0, r3, #4
 800ba6a:	6008      	str	r0, [r1, #0]
 800ba6c:	0628      	lsls	r0, r5, #24
 800ba6e:	d501      	bpl.n	800ba74 <_printf_i+0xec>
 800ba70:	681d      	ldr	r5, [r3, #0]
 800ba72:	e002      	b.n	800ba7a <_printf_i+0xf2>
 800ba74:	0669      	lsls	r1, r5, #25
 800ba76:	d5fb      	bpl.n	800ba70 <_printf_i+0xe8>
 800ba78:	881d      	ldrh	r5, [r3, #0]
 800ba7a:	2f6f      	cmp	r7, #111	; 0x6f
 800ba7c:	bf0c      	ite	eq
 800ba7e:	2308      	moveq	r3, #8
 800ba80:	230a      	movne	r3, #10
 800ba82:	4852      	ldr	r0, [pc, #328]	; (800bbcc <_printf_i+0x244>)
 800ba84:	2100      	movs	r1, #0
 800ba86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba8a:	6866      	ldr	r6, [r4, #4]
 800ba8c:	2e00      	cmp	r6, #0
 800ba8e:	bfa8      	it	ge
 800ba90:	6821      	ldrge	r1, [r4, #0]
 800ba92:	60a6      	str	r6, [r4, #8]
 800ba94:	bfa4      	itt	ge
 800ba96:	f021 0104 	bicge.w	r1, r1, #4
 800ba9a:	6021      	strge	r1, [r4, #0]
 800ba9c:	b90d      	cbnz	r5, 800baa2 <_printf_i+0x11a>
 800ba9e:	2e00      	cmp	r6, #0
 800baa0:	d04d      	beq.n	800bb3e <_printf_i+0x1b6>
 800baa2:	4616      	mov	r6, r2
 800baa4:	fbb5 f1f3 	udiv	r1, r5, r3
 800baa8:	fb03 5711 	mls	r7, r3, r1, r5
 800baac:	5dc7      	ldrb	r7, [r0, r7]
 800baae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bab2:	462f      	mov	r7, r5
 800bab4:	42bb      	cmp	r3, r7
 800bab6:	460d      	mov	r5, r1
 800bab8:	d9f4      	bls.n	800baa4 <_printf_i+0x11c>
 800baba:	2b08      	cmp	r3, #8
 800babc:	d10b      	bne.n	800bad6 <_printf_i+0x14e>
 800babe:	6823      	ldr	r3, [r4, #0]
 800bac0:	07df      	lsls	r7, r3, #31
 800bac2:	d508      	bpl.n	800bad6 <_printf_i+0x14e>
 800bac4:	6923      	ldr	r3, [r4, #16]
 800bac6:	6861      	ldr	r1, [r4, #4]
 800bac8:	4299      	cmp	r1, r3
 800baca:	bfde      	ittt	le
 800bacc:	2330      	movle	r3, #48	; 0x30
 800bace:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bad2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bad6:	1b92      	subs	r2, r2, r6
 800bad8:	6122      	str	r2, [r4, #16]
 800bada:	464b      	mov	r3, r9
 800badc:	4621      	mov	r1, r4
 800bade:	4640      	mov	r0, r8
 800bae0:	f8cd a000 	str.w	sl, [sp]
 800bae4:	aa03      	add	r2, sp, #12
 800bae6:	f7ff fedf 	bl	800b8a8 <_printf_common>
 800baea:	3001      	adds	r0, #1
 800baec:	d14c      	bne.n	800bb88 <_printf_i+0x200>
 800baee:	f04f 30ff 	mov.w	r0, #4294967295
 800baf2:	b004      	add	sp, #16
 800baf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baf8:	4834      	ldr	r0, [pc, #208]	; (800bbcc <_printf_i+0x244>)
 800bafa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bafe:	680e      	ldr	r6, [r1, #0]
 800bb00:	6823      	ldr	r3, [r4, #0]
 800bb02:	f856 5b04 	ldr.w	r5, [r6], #4
 800bb06:	061f      	lsls	r7, r3, #24
 800bb08:	600e      	str	r6, [r1, #0]
 800bb0a:	d514      	bpl.n	800bb36 <_printf_i+0x1ae>
 800bb0c:	07d9      	lsls	r1, r3, #31
 800bb0e:	bf44      	itt	mi
 800bb10:	f043 0320 	orrmi.w	r3, r3, #32
 800bb14:	6023      	strmi	r3, [r4, #0]
 800bb16:	b91d      	cbnz	r5, 800bb20 <_printf_i+0x198>
 800bb18:	6823      	ldr	r3, [r4, #0]
 800bb1a:	f023 0320 	bic.w	r3, r3, #32
 800bb1e:	6023      	str	r3, [r4, #0]
 800bb20:	2310      	movs	r3, #16
 800bb22:	e7af      	b.n	800ba84 <_printf_i+0xfc>
 800bb24:	6823      	ldr	r3, [r4, #0]
 800bb26:	f043 0320 	orr.w	r3, r3, #32
 800bb2a:	6023      	str	r3, [r4, #0]
 800bb2c:	2378      	movs	r3, #120	; 0x78
 800bb2e:	4828      	ldr	r0, [pc, #160]	; (800bbd0 <_printf_i+0x248>)
 800bb30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bb34:	e7e3      	b.n	800bafe <_printf_i+0x176>
 800bb36:	065e      	lsls	r6, r3, #25
 800bb38:	bf48      	it	mi
 800bb3a:	b2ad      	uxthmi	r5, r5
 800bb3c:	e7e6      	b.n	800bb0c <_printf_i+0x184>
 800bb3e:	4616      	mov	r6, r2
 800bb40:	e7bb      	b.n	800baba <_printf_i+0x132>
 800bb42:	680b      	ldr	r3, [r1, #0]
 800bb44:	6826      	ldr	r6, [r4, #0]
 800bb46:	1d1d      	adds	r5, r3, #4
 800bb48:	6960      	ldr	r0, [r4, #20]
 800bb4a:	600d      	str	r5, [r1, #0]
 800bb4c:	0635      	lsls	r5, r6, #24
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	d501      	bpl.n	800bb56 <_printf_i+0x1ce>
 800bb52:	6018      	str	r0, [r3, #0]
 800bb54:	e002      	b.n	800bb5c <_printf_i+0x1d4>
 800bb56:	0671      	lsls	r1, r6, #25
 800bb58:	d5fb      	bpl.n	800bb52 <_printf_i+0x1ca>
 800bb5a:	8018      	strh	r0, [r3, #0]
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	4616      	mov	r6, r2
 800bb60:	6123      	str	r3, [r4, #16]
 800bb62:	e7ba      	b.n	800bada <_printf_i+0x152>
 800bb64:	680b      	ldr	r3, [r1, #0]
 800bb66:	1d1a      	adds	r2, r3, #4
 800bb68:	600a      	str	r2, [r1, #0]
 800bb6a:	681e      	ldr	r6, [r3, #0]
 800bb6c:	2100      	movs	r1, #0
 800bb6e:	4630      	mov	r0, r6
 800bb70:	6862      	ldr	r2, [r4, #4]
 800bb72:	f000 f831 	bl	800bbd8 <memchr>
 800bb76:	b108      	cbz	r0, 800bb7c <_printf_i+0x1f4>
 800bb78:	1b80      	subs	r0, r0, r6
 800bb7a:	6060      	str	r0, [r4, #4]
 800bb7c:	6863      	ldr	r3, [r4, #4]
 800bb7e:	6123      	str	r3, [r4, #16]
 800bb80:	2300      	movs	r3, #0
 800bb82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb86:	e7a8      	b.n	800bada <_printf_i+0x152>
 800bb88:	4632      	mov	r2, r6
 800bb8a:	4649      	mov	r1, r9
 800bb8c:	4640      	mov	r0, r8
 800bb8e:	6923      	ldr	r3, [r4, #16]
 800bb90:	47d0      	blx	sl
 800bb92:	3001      	adds	r0, #1
 800bb94:	d0ab      	beq.n	800baee <_printf_i+0x166>
 800bb96:	6823      	ldr	r3, [r4, #0]
 800bb98:	079b      	lsls	r3, r3, #30
 800bb9a:	d413      	bmi.n	800bbc4 <_printf_i+0x23c>
 800bb9c:	68e0      	ldr	r0, [r4, #12]
 800bb9e:	9b03      	ldr	r3, [sp, #12]
 800bba0:	4298      	cmp	r0, r3
 800bba2:	bfb8      	it	lt
 800bba4:	4618      	movlt	r0, r3
 800bba6:	e7a4      	b.n	800baf2 <_printf_i+0x16a>
 800bba8:	2301      	movs	r3, #1
 800bbaa:	4632      	mov	r2, r6
 800bbac:	4649      	mov	r1, r9
 800bbae:	4640      	mov	r0, r8
 800bbb0:	47d0      	blx	sl
 800bbb2:	3001      	adds	r0, #1
 800bbb4:	d09b      	beq.n	800baee <_printf_i+0x166>
 800bbb6:	3501      	adds	r5, #1
 800bbb8:	68e3      	ldr	r3, [r4, #12]
 800bbba:	9903      	ldr	r1, [sp, #12]
 800bbbc:	1a5b      	subs	r3, r3, r1
 800bbbe:	42ab      	cmp	r3, r5
 800bbc0:	dcf2      	bgt.n	800bba8 <_printf_i+0x220>
 800bbc2:	e7eb      	b.n	800bb9c <_printf_i+0x214>
 800bbc4:	2500      	movs	r5, #0
 800bbc6:	f104 0619 	add.w	r6, r4, #25
 800bbca:	e7f5      	b.n	800bbb8 <_printf_i+0x230>
 800bbcc:	0800d375 	.word	0x0800d375
 800bbd0:	0800d386 	.word	0x0800d386

0800bbd4 <__retarget_lock_acquire_recursive>:
 800bbd4:	4770      	bx	lr

0800bbd6 <__retarget_lock_release_recursive>:
 800bbd6:	4770      	bx	lr

0800bbd8 <memchr>:
 800bbd8:	4603      	mov	r3, r0
 800bbda:	b510      	push	{r4, lr}
 800bbdc:	b2c9      	uxtb	r1, r1
 800bbde:	4402      	add	r2, r0
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	d101      	bne.n	800bbea <memchr+0x12>
 800bbe6:	2000      	movs	r0, #0
 800bbe8:	e003      	b.n	800bbf2 <memchr+0x1a>
 800bbea:	7804      	ldrb	r4, [r0, #0]
 800bbec:	3301      	adds	r3, #1
 800bbee:	428c      	cmp	r4, r1
 800bbf0:	d1f6      	bne.n	800bbe0 <memchr+0x8>
 800bbf2:	bd10      	pop	{r4, pc}

0800bbf4 <memcpy>:
 800bbf4:	440a      	add	r2, r1
 800bbf6:	4291      	cmp	r1, r2
 800bbf8:	f100 33ff 	add.w	r3, r0, #4294967295
 800bbfc:	d100      	bne.n	800bc00 <memcpy+0xc>
 800bbfe:	4770      	bx	lr
 800bc00:	b510      	push	{r4, lr}
 800bc02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc06:	4291      	cmp	r1, r2
 800bc08:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc0c:	d1f9      	bne.n	800bc02 <memcpy+0xe>
 800bc0e:	bd10      	pop	{r4, pc}

0800bc10 <memmove>:
 800bc10:	4288      	cmp	r0, r1
 800bc12:	b510      	push	{r4, lr}
 800bc14:	eb01 0402 	add.w	r4, r1, r2
 800bc18:	d902      	bls.n	800bc20 <memmove+0x10>
 800bc1a:	4284      	cmp	r4, r0
 800bc1c:	4623      	mov	r3, r4
 800bc1e:	d807      	bhi.n	800bc30 <memmove+0x20>
 800bc20:	1e43      	subs	r3, r0, #1
 800bc22:	42a1      	cmp	r1, r4
 800bc24:	d008      	beq.n	800bc38 <memmove+0x28>
 800bc26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc2e:	e7f8      	b.n	800bc22 <memmove+0x12>
 800bc30:	4601      	mov	r1, r0
 800bc32:	4402      	add	r2, r0
 800bc34:	428a      	cmp	r2, r1
 800bc36:	d100      	bne.n	800bc3a <memmove+0x2a>
 800bc38:	bd10      	pop	{r4, pc}
 800bc3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc42:	e7f7      	b.n	800bc34 <memmove+0x24>

0800bc44 <_realloc_r>:
 800bc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc46:	4607      	mov	r7, r0
 800bc48:	4614      	mov	r4, r2
 800bc4a:	460e      	mov	r6, r1
 800bc4c:	b921      	cbnz	r1, 800bc58 <_realloc_r+0x14>
 800bc4e:	4611      	mov	r1, r2
 800bc50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bc54:	f7ff bc36 	b.w	800b4c4 <_malloc_r>
 800bc58:	b922      	cbnz	r2, 800bc64 <_realloc_r+0x20>
 800bc5a:	f7ff fbe7 	bl	800b42c <_free_r>
 800bc5e:	4625      	mov	r5, r4
 800bc60:	4628      	mov	r0, r5
 800bc62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc64:	f000 f814 	bl	800bc90 <_malloc_usable_size_r>
 800bc68:	42a0      	cmp	r0, r4
 800bc6a:	d20f      	bcs.n	800bc8c <_realloc_r+0x48>
 800bc6c:	4621      	mov	r1, r4
 800bc6e:	4638      	mov	r0, r7
 800bc70:	f7ff fc28 	bl	800b4c4 <_malloc_r>
 800bc74:	4605      	mov	r5, r0
 800bc76:	2800      	cmp	r0, #0
 800bc78:	d0f2      	beq.n	800bc60 <_realloc_r+0x1c>
 800bc7a:	4631      	mov	r1, r6
 800bc7c:	4622      	mov	r2, r4
 800bc7e:	f7ff ffb9 	bl	800bbf4 <memcpy>
 800bc82:	4631      	mov	r1, r6
 800bc84:	4638      	mov	r0, r7
 800bc86:	f7ff fbd1 	bl	800b42c <_free_r>
 800bc8a:	e7e9      	b.n	800bc60 <_realloc_r+0x1c>
 800bc8c:	4635      	mov	r5, r6
 800bc8e:	e7e7      	b.n	800bc60 <_realloc_r+0x1c>

0800bc90 <_malloc_usable_size_r>:
 800bc90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc94:	1f18      	subs	r0, r3, #4
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	bfbc      	itt	lt
 800bc9a:	580b      	ldrlt	r3, [r1, r0]
 800bc9c:	18c0      	addlt	r0, r0, r3
 800bc9e:	4770      	bx	lr

0800bca0 <pow>:
 800bca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bca4:	461f      	mov	r7, r3
 800bca6:	4680      	mov	r8, r0
 800bca8:	4689      	mov	r9, r1
 800bcaa:	4616      	mov	r6, r2
 800bcac:	f000 f8a4 	bl	800bdf8 <__ieee754_pow>
 800bcb0:	4b4d      	ldr	r3, [pc, #308]	; (800bde8 <pow+0x148>)
 800bcb2:	4604      	mov	r4, r0
 800bcb4:	f993 3000 	ldrsb.w	r3, [r3]
 800bcb8:	460d      	mov	r5, r1
 800bcba:	3301      	adds	r3, #1
 800bcbc:	d015      	beq.n	800bcea <pow+0x4a>
 800bcbe:	4632      	mov	r2, r6
 800bcc0:	463b      	mov	r3, r7
 800bcc2:	4630      	mov	r0, r6
 800bcc4:	4639      	mov	r1, r7
 800bcc6:	f7f4 fe99 	bl	80009fc <__aeabi_dcmpun>
 800bcca:	b970      	cbnz	r0, 800bcea <pow+0x4a>
 800bccc:	4642      	mov	r2, r8
 800bcce:	464b      	mov	r3, r9
 800bcd0:	4640      	mov	r0, r8
 800bcd2:	4649      	mov	r1, r9
 800bcd4:	f7f4 fe92 	bl	80009fc <__aeabi_dcmpun>
 800bcd8:	2200      	movs	r2, #0
 800bcda:	2300      	movs	r3, #0
 800bcdc:	b148      	cbz	r0, 800bcf2 <pow+0x52>
 800bcde:	4630      	mov	r0, r6
 800bce0:	4639      	mov	r1, r7
 800bce2:	f7f4 fe59 	bl	8000998 <__aeabi_dcmpeq>
 800bce6:	2800      	cmp	r0, #0
 800bce8:	d17b      	bne.n	800bde2 <pow+0x142>
 800bcea:	4620      	mov	r0, r4
 800bcec:	4629      	mov	r1, r5
 800bcee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcf2:	4640      	mov	r0, r8
 800bcf4:	4649      	mov	r1, r9
 800bcf6:	f7f4 fe4f 	bl	8000998 <__aeabi_dcmpeq>
 800bcfa:	b1e0      	cbz	r0, 800bd36 <pow+0x96>
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	2300      	movs	r3, #0
 800bd00:	4630      	mov	r0, r6
 800bd02:	4639      	mov	r1, r7
 800bd04:	f7f4 fe48 	bl	8000998 <__aeabi_dcmpeq>
 800bd08:	2800      	cmp	r0, #0
 800bd0a:	d16a      	bne.n	800bde2 <pow+0x142>
 800bd0c:	4630      	mov	r0, r6
 800bd0e:	4639      	mov	r1, r7
 800bd10:	f000 fe37 	bl	800c982 <finite>
 800bd14:	2800      	cmp	r0, #0
 800bd16:	d0e8      	beq.n	800bcea <pow+0x4a>
 800bd18:	2200      	movs	r2, #0
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	4630      	mov	r0, r6
 800bd1e:	4639      	mov	r1, r7
 800bd20:	f7f4 fe44 	bl	80009ac <__aeabi_dcmplt>
 800bd24:	2800      	cmp	r0, #0
 800bd26:	d0e0      	beq.n	800bcea <pow+0x4a>
 800bd28:	f7ff fb3e 	bl	800b3a8 <__errno>
 800bd2c:	2321      	movs	r3, #33	; 0x21
 800bd2e:	2400      	movs	r4, #0
 800bd30:	6003      	str	r3, [r0, #0]
 800bd32:	4d2e      	ldr	r5, [pc, #184]	; (800bdec <pow+0x14c>)
 800bd34:	e7d9      	b.n	800bcea <pow+0x4a>
 800bd36:	4620      	mov	r0, r4
 800bd38:	4629      	mov	r1, r5
 800bd3a:	f000 fe22 	bl	800c982 <finite>
 800bd3e:	bba8      	cbnz	r0, 800bdac <pow+0x10c>
 800bd40:	4640      	mov	r0, r8
 800bd42:	4649      	mov	r1, r9
 800bd44:	f000 fe1d 	bl	800c982 <finite>
 800bd48:	b380      	cbz	r0, 800bdac <pow+0x10c>
 800bd4a:	4630      	mov	r0, r6
 800bd4c:	4639      	mov	r1, r7
 800bd4e:	f000 fe18 	bl	800c982 <finite>
 800bd52:	b358      	cbz	r0, 800bdac <pow+0x10c>
 800bd54:	4622      	mov	r2, r4
 800bd56:	462b      	mov	r3, r5
 800bd58:	4620      	mov	r0, r4
 800bd5a:	4629      	mov	r1, r5
 800bd5c:	f7f4 fe4e 	bl	80009fc <__aeabi_dcmpun>
 800bd60:	b160      	cbz	r0, 800bd7c <pow+0xdc>
 800bd62:	f7ff fb21 	bl	800b3a8 <__errno>
 800bd66:	2321      	movs	r3, #33	; 0x21
 800bd68:	2200      	movs	r2, #0
 800bd6a:	6003      	str	r3, [r0, #0]
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	4610      	mov	r0, r2
 800bd70:	4619      	mov	r1, r3
 800bd72:	f7f4 fcd3 	bl	800071c <__aeabi_ddiv>
 800bd76:	4604      	mov	r4, r0
 800bd78:	460d      	mov	r5, r1
 800bd7a:	e7b6      	b.n	800bcea <pow+0x4a>
 800bd7c:	f7ff fb14 	bl	800b3a8 <__errno>
 800bd80:	2322      	movs	r3, #34	; 0x22
 800bd82:	2200      	movs	r2, #0
 800bd84:	6003      	str	r3, [r0, #0]
 800bd86:	4649      	mov	r1, r9
 800bd88:	2300      	movs	r3, #0
 800bd8a:	4640      	mov	r0, r8
 800bd8c:	f7f4 fe0e 	bl	80009ac <__aeabi_dcmplt>
 800bd90:	2400      	movs	r4, #0
 800bd92:	b148      	cbz	r0, 800bda8 <pow+0x108>
 800bd94:	4630      	mov	r0, r6
 800bd96:	4639      	mov	r1, r7
 800bd98:	f000 fe00 	bl	800c99c <rint>
 800bd9c:	4632      	mov	r2, r6
 800bd9e:	463b      	mov	r3, r7
 800bda0:	f7f4 fdfa 	bl	8000998 <__aeabi_dcmpeq>
 800bda4:	2800      	cmp	r0, #0
 800bda6:	d0c4      	beq.n	800bd32 <pow+0x92>
 800bda8:	4d11      	ldr	r5, [pc, #68]	; (800bdf0 <pow+0x150>)
 800bdaa:	e79e      	b.n	800bcea <pow+0x4a>
 800bdac:	2200      	movs	r2, #0
 800bdae:	2300      	movs	r3, #0
 800bdb0:	4620      	mov	r0, r4
 800bdb2:	4629      	mov	r1, r5
 800bdb4:	f7f4 fdf0 	bl	8000998 <__aeabi_dcmpeq>
 800bdb8:	2800      	cmp	r0, #0
 800bdba:	d096      	beq.n	800bcea <pow+0x4a>
 800bdbc:	4640      	mov	r0, r8
 800bdbe:	4649      	mov	r1, r9
 800bdc0:	f000 fddf 	bl	800c982 <finite>
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	d090      	beq.n	800bcea <pow+0x4a>
 800bdc8:	4630      	mov	r0, r6
 800bdca:	4639      	mov	r1, r7
 800bdcc:	f000 fdd9 	bl	800c982 <finite>
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	d08a      	beq.n	800bcea <pow+0x4a>
 800bdd4:	f7ff fae8 	bl	800b3a8 <__errno>
 800bdd8:	2322      	movs	r3, #34	; 0x22
 800bdda:	2400      	movs	r4, #0
 800bddc:	2500      	movs	r5, #0
 800bdde:	6003      	str	r3, [r0, #0]
 800bde0:	e783      	b.n	800bcea <pow+0x4a>
 800bde2:	2400      	movs	r4, #0
 800bde4:	4d03      	ldr	r5, [pc, #12]	; (800bdf4 <pow+0x154>)
 800bde6:	e780      	b.n	800bcea <pow+0x4a>
 800bde8:	200000f0 	.word	0x200000f0
 800bdec:	fff00000 	.word	0xfff00000
 800bdf0:	7ff00000 	.word	0x7ff00000
 800bdf4:	3ff00000 	.word	0x3ff00000

0800bdf8 <__ieee754_pow>:
 800bdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdfc:	b093      	sub	sp, #76	; 0x4c
 800bdfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be02:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800be06:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800be0a:	ea55 0302 	orrs.w	r3, r5, r2
 800be0e:	4607      	mov	r7, r0
 800be10:	4688      	mov	r8, r1
 800be12:	f000 84bf 	beq.w	800c794 <__ieee754_pow+0x99c>
 800be16:	4b7e      	ldr	r3, [pc, #504]	; (800c010 <__ieee754_pow+0x218>)
 800be18:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800be1c:	429c      	cmp	r4, r3
 800be1e:	4689      	mov	r9, r1
 800be20:	4682      	mov	sl, r0
 800be22:	dc09      	bgt.n	800be38 <__ieee754_pow+0x40>
 800be24:	d103      	bne.n	800be2e <__ieee754_pow+0x36>
 800be26:	b978      	cbnz	r0, 800be48 <__ieee754_pow+0x50>
 800be28:	42a5      	cmp	r5, r4
 800be2a:	dd02      	ble.n	800be32 <__ieee754_pow+0x3a>
 800be2c:	e00c      	b.n	800be48 <__ieee754_pow+0x50>
 800be2e:	429d      	cmp	r5, r3
 800be30:	dc02      	bgt.n	800be38 <__ieee754_pow+0x40>
 800be32:	429d      	cmp	r5, r3
 800be34:	d10e      	bne.n	800be54 <__ieee754_pow+0x5c>
 800be36:	b16a      	cbz	r2, 800be54 <__ieee754_pow+0x5c>
 800be38:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800be3c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800be40:	ea54 030a 	orrs.w	r3, r4, sl
 800be44:	f000 84a6 	beq.w	800c794 <__ieee754_pow+0x99c>
 800be48:	4872      	ldr	r0, [pc, #456]	; (800c014 <__ieee754_pow+0x21c>)
 800be4a:	b013      	add	sp, #76	; 0x4c
 800be4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be50:	f000 bd9e 	b.w	800c990 <nan>
 800be54:	f1b9 0f00 	cmp.w	r9, #0
 800be58:	da39      	bge.n	800bece <__ieee754_pow+0xd6>
 800be5a:	4b6f      	ldr	r3, [pc, #444]	; (800c018 <__ieee754_pow+0x220>)
 800be5c:	429d      	cmp	r5, r3
 800be5e:	dc54      	bgt.n	800bf0a <__ieee754_pow+0x112>
 800be60:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800be64:	429d      	cmp	r5, r3
 800be66:	f340 84a6 	ble.w	800c7b6 <__ieee754_pow+0x9be>
 800be6a:	152b      	asrs	r3, r5, #20
 800be6c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800be70:	2b14      	cmp	r3, #20
 800be72:	dd0f      	ble.n	800be94 <__ieee754_pow+0x9c>
 800be74:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800be78:	fa22 f103 	lsr.w	r1, r2, r3
 800be7c:	fa01 f303 	lsl.w	r3, r1, r3
 800be80:	4293      	cmp	r3, r2
 800be82:	f040 8498 	bne.w	800c7b6 <__ieee754_pow+0x9be>
 800be86:	f001 0101 	and.w	r1, r1, #1
 800be8a:	f1c1 0302 	rsb	r3, r1, #2
 800be8e:	9300      	str	r3, [sp, #0]
 800be90:	b182      	cbz	r2, 800beb4 <__ieee754_pow+0xbc>
 800be92:	e05e      	b.n	800bf52 <__ieee754_pow+0x15a>
 800be94:	2a00      	cmp	r2, #0
 800be96:	d15a      	bne.n	800bf4e <__ieee754_pow+0x156>
 800be98:	f1c3 0314 	rsb	r3, r3, #20
 800be9c:	fa45 f103 	asr.w	r1, r5, r3
 800bea0:	fa01 f303 	lsl.w	r3, r1, r3
 800bea4:	42ab      	cmp	r3, r5
 800bea6:	f040 8483 	bne.w	800c7b0 <__ieee754_pow+0x9b8>
 800beaa:	f001 0101 	and.w	r1, r1, #1
 800beae:	f1c1 0302 	rsb	r3, r1, #2
 800beb2:	9300      	str	r3, [sp, #0]
 800beb4:	4b59      	ldr	r3, [pc, #356]	; (800c01c <__ieee754_pow+0x224>)
 800beb6:	429d      	cmp	r5, r3
 800beb8:	d130      	bne.n	800bf1c <__ieee754_pow+0x124>
 800beba:	2e00      	cmp	r6, #0
 800bebc:	f280 8474 	bge.w	800c7a8 <__ieee754_pow+0x9b0>
 800bec0:	463a      	mov	r2, r7
 800bec2:	4643      	mov	r3, r8
 800bec4:	2000      	movs	r0, #0
 800bec6:	4955      	ldr	r1, [pc, #340]	; (800c01c <__ieee754_pow+0x224>)
 800bec8:	f7f4 fc28 	bl	800071c <__aeabi_ddiv>
 800becc:	e02f      	b.n	800bf2e <__ieee754_pow+0x136>
 800bece:	2300      	movs	r3, #0
 800bed0:	9300      	str	r3, [sp, #0]
 800bed2:	2a00      	cmp	r2, #0
 800bed4:	d13d      	bne.n	800bf52 <__ieee754_pow+0x15a>
 800bed6:	4b4e      	ldr	r3, [pc, #312]	; (800c010 <__ieee754_pow+0x218>)
 800bed8:	429d      	cmp	r5, r3
 800beda:	d1eb      	bne.n	800beb4 <__ieee754_pow+0xbc>
 800bedc:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800bee0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bee4:	ea53 030a 	orrs.w	r3, r3, sl
 800bee8:	f000 8454 	beq.w	800c794 <__ieee754_pow+0x99c>
 800beec:	4b4c      	ldr	r3, [pc, #304]	; (800c020 <__ieee754_pow+0x228>)
 800beee:	429c      	cmp	r4, r3
 800bef0:	dd0d      	ble.n	800bf0e <__ieee754_pow+0x116>
 800bef2:	2e00      	cmp	r6, #0
 800bef4:	f280 8454 	bge.w	800c7a0 <__ieee754_pow+0x9a8>
 800bef8:	f04f 0b00 	mov.w	fp, #0
 800befc:	f04f 0c00 	mov.w	ip, #0
 800bf00:	4658      	mov	r0, fp
 800bf02:	4661      	mov	r1, ip
 800bf04:	b013      	add	sp, #76	; 0x4c
 800bf06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf0a:	2302      	movs	r3, #2
 800bf0c:	e7e0      	b.n	800bed0 <__ieee754_pow+0xd8>
 800bf0e:	2e00      	cmp	r6, #0
 800bf10:	daf2      	bge.n	800bef8 <__ieee754_pow+0x100>
 800bf12:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800bf16:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800bf1a:	e7f1      	b.n	800bf00 <__ieee754_pow+0x108>
 800bf1c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800bf20:	d108      	bne.n	800bf34 <__ieee754_pow+0x13c>
 800bf22:	463a      	mov	r2, r7
 800bf24:	4643      	mov	r3, r8
 800bf26:	4638      	mov	r0, r7
 800bf28:	4641      	mov	r1, r8
 800bf2a:	f7f4 facd 	bl	80004c8 <__aeabi_dmul>
 800bf2e:	4683      	mov	fp, r0
 800bf30:	468c      	mov	ip, r1
 800bf32:	e7e5      	b.n	800bf00 <__ieee754_pow+0x108>
 800bf34:	4b3b      	ldr	r3, [pc, #236]	; (800c024 <__ieee754_pow+0x22c>)
 800bf36:	429e      	cmp	r6, r3
 800bf38:	d10b      	bne.n	800bf52 <__ieee754_pow+0x15a>
 800bf3a:	f1b9 0f00 	cmp.w	r9, #0
 800bf3e:	db08      	blt.n	800bf52 <__ieee754_pow+0x15a>
 800bf40:	4638      	mov	r0, r7
 800bf42:	4641      	mov	r1, r8
 800bf44:	b013      	add	sp, #76	; 0x4c
 800bf46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf4a:	f000 bc6b 	b.w	800c824 <__ieee754_sqrt>
 800bf4e:	2300      	movs	r3, #0
 800bf50:	9300      	str	r3, [sp, #0]
 800bf52:	4638      	mov	r0, r7
 800bf54:	4641      	mov	r1, r8
 800bf56:	f000 fd11 	bl	800c97c <fabs>
 800bf5a:	4683      	mov	fp, r0
 800bf5c:	468c      	mov	ip, r1
 800bf5e:	f1ba 0f00 	cmp.w	sl, #0
 800bf62:	d129      	bne.n	800bfb8 <__ieee754_pow+0x1c0>
 800bf64:	b124      	cbz	r4, 800bf70 <__ieee754_pow+0x178>
 800bf66:	4b2d      	ldr	r3, [pc, #180]	; (800c01c <__ieee754_pow+0x224>)
 800bf68:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d123      	bne.n	800bfb8 <__ieee754_pow+0x1c0>
 800bf70:	2e00      	cmp	r6, #0
 800bf72:	da07      	bge.n	800bf84 <__ieee754_pow+0x18c>
 800bf74:	465a      	mov	r2, fp
 800bf76:	4663      	mov	r3, ip
 800bf78:	2000      	movs	r0, #0
 800bf7a:	4928      	ldr	r1, [pc, #160]	; (800c01c <__ieee754_pow+0x224>)
 800bf7c:	f7f4 fbce 	bl	800071c <__aeabi_ddiv>
 800bf80:	4683      	mov	fp, r0
 800bf82:	468c      	mov	ip, r1
 800bf84:	f1b9 0f00 	cmp.w	r9, #0
 800bf88:	daba      	bge.n	800bf00 <__ieee754_pow+0x108>
 800bf8a:	9b00      	ldr	r3, [sp, #0]
 800bf8c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bf90:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bf94:	4323      	orrs	r3, r4
 800bf96:	d108      	bne.n	800bfaa <__ieee754_pow+0x1b2>
 800bf98:	465a      	mov	r2, fp
 800bf9a:	4663      	mov	r3, ip
 800bf9c:	4658      	mov	r0, fp
 800bf9e:	4661      	mov	r1, ip
 800bfa0:	f7f4 f8da 	bl	8000158 <__aeabi_dsub>
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	e78e      	b.n	800bec8 <__ieee754_pow+0xd0>
 800bfaa:	9b00      	ldr	r3, [sp, #0]
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d1a7      	bne.n	800bf00 <__ieee754_pow+0x108>
 800bfb0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800bfb4:	469c      	mov	ip, r3
 800bfb6:	e7a3      	b.n	800bf00 <__ieee754_pow+0x108>
 800bfb8:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800bfbc:	3b01      	subs	r3, #1
 800bfbe:	930c      	str	r3, [sp, #48]	; 0x30
 800bfc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bfc2:	9b00      	ldr	r3, [sp, #0]
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	d104      	bne.n	800bfd2 <__ieee754_pow+0x1da>
 800bfc8:	463a      	mov	r2, r7
 800bfca:	4643      	mov	r3, r8
 800bfcc:	4638      	mov	r0, r7
 800bfce:	4641      	mov	r1, r8
 800bfd0:	e7e6      	b.n	800bfa0 <__ieee754_pow+0x1a8>
 800bfd2:	4b15      	ldr	r3, [pc, #84]	; (800c028 <__ieee754_pow+0x230>)
 800bfd4:	429d      	cmp	r5, r3
 800bfd6:	f340 80f9 	ble.w	800c1cc <__ieee754_pow+0x3d4>
 800bfda:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bfde:	429d      	cmp	r5, r3
 800bfe0:	4b0f      	ldr	r3, [pc, #60]	; (800c020 <__ieee754_pow+0x228>)
 800bfe2:	dd09      	ble.n	800bff8 <__ieee754_pow+0x200>
 800bfe4:	429c      	cmp	r4, r3
 800bfe6:	dc0c      	bgt.n	800c002 <__ieee754_pow+0x20a>
 800bfe8:	2e00      	cmp	r6, #0
 800bfea:	da85      	bge.n	800bef8 <__ieee754_pow+0x100>
 800bfec:	a306      	add	r3, pc, #24	; (adr r3, 800c008 <__ieee754_pow+0x210>)
 800bfee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff2:	4610      	mov	r0, r2
 800bff4:	4619      	mov	r1, r3
 800bff6:	e798      	b.n	800bf2a <__ieee754_pow+0x132>
 800bff8:	429c      	cmp	r4, r3
 800bffa:	dbf5      	blt.n	800bfe8 <__ieee754_pow+0x1f0>
 800bffc:	4b07      	ldr	r3, [pc, #28]	; (800c01c <__ieee754_pow+0x224>)
 800bffe:	429c      	cmp	r4, r3
 800c000:	dd14      	ble.n	800c02c <__ieee754_pow+0x234>
 800c002:	2e00      	cmp	r6, #0
 800c004:	dcf2      	bgt.n	800bfec <__ieee754_pow+0x1f4>
 800c006:	e777      	b.n	800bef8 <__ieee754_pow+0x100>
 800c008:	8800759c 	.word	0x8800759c
 800c00c:	7e37e43c 	.word	0x7e37e43c
 800c010:	7ff00000 	.word	0x7ff00000
 800c014:	0800d369 	.word	0x0800d369
 800c018:	433fffff 	.word	0x433fffff
 800c01c:	3ff00000 	.word	0x3ff00000
 800c020:	3fefffff 	.word	0x3fefffff
 800c024:	3fe00000 	.word	0x3fe00000
 800c028:	41e00000 	.word	0x41e00000
 800c02c:	4661      	mov	r1, ip
 800c02e:	2200      	movs	r2, #0
 800c030:	4658      	mov	r0, fp
 800c032:	4b61      	ldr	r3, [pc, #388]	; (800c1b8 <__ieee754_pow+0x3c0>)
 800c034:	f7f4 f890 	bl	8000158 <__aeabi_dsub>
 800c038:	a355      	add	r3, pc, #340	; (adr r3, 800c190 <__ieee754_pow+0x398>)
 800c03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03e:	4604      	mov	r4, r0
 800c040:	460d      	mov	r5, r1
 800c042:	f7f4 fa41 	bl	80004c8 <__aeabi_dmul>
 800c046:	a354      	add	r3, pc, #336	; (adr r3, 800c198 <__ieee754_pow+0x3a0>)
 800c048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c04c:	4606      	mov	r6, r0
 800c04e:	460f      	mov	r7, r1
 800c050:	4620      	mov	r0, r4
 800c052:	4629      	mov	r1, r5
 800c054:	f7f4 fa38 	bl	80004c8 <__aeabi_dmul>
 800c058:	2200      	movs	r2, #0
 800c05a:	4682      	mov	sl, r0
 800c05c:	468b      	mov	fp, r1
 800c05e:	4620      	mov	r0, r4
 800c060:	4629      	mov	r1, r5
 800c062:	4b56      	ldr	r3, [pc, #344]	; (800c1bc <__ieee754_pow+0x3c4>)
 800c064:	f7f4 fa30 	bl	80004c8 <__aeabi_dmul>
 800c068:	4602      	mov	r2, r0
 800c06a:	460b      	mov	r3, r1
 800c06c:	a14c      	add	r1, pc, #304	; (adr r1, 800c1a0 <__ieee754_pow+0x3a8>)
 800c06e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c072:	f7f4 f871 	bl	8000158 <__aeabi_dsub>
 800c076:	4622      	mov	r2, r4
 800c078:	462b      	mov	r3, r5
 800c07a:	f7f4 fa25 	bl	80004c8 <__aeabi_dmul>
 800c07e:	4602      	mov	r2, r0
 800c080:	460b      	mov	r3, r1
 800c082:	2000      	movs	r0, #0
 800c084:	494e      	ldr	r1, [pc, #312]	; (800c1c0 <__ieee754_pow+0x3c8>)
 800c086:	f7f4 f867 	bl	8000158 <__aeabi_dsub>
 800c08a:	4622      	mov	r2, r4
 800c08c:	462b      	mov	r3, r5
 800c08e:	4680      	mov	r8, r0
 800c090:	4689      	mov	r9, r1
 800c092:	4620      	mov	r0, r4
 800c094:	4629      	mov	r1, r5
 800c096:	f7f4 fa17 	bl	80004c8 <__aeabi_dmul>
 800c09a:	4602      	mov	r2, r0
 800c09c:	460b      	mov	r3, r1
 800c09e:	4640      	mov	r0, r8
 800c0a0:	4649      	mov	r1, r9
 800c0a2:	f7f4 fa11 	bl	80004c8 <__aeabi_dmul>
 800c0a6:	a340      	add	r3, pc, #256	; (adr r3, 800c1a8 <__ieee754_pow+0x3b0>)
 800c0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ac:	f7f4 fa0c 	bl	80004c8 <__aeabi_dmul>
 800c0b0:	4602      	mov	r2, r0
 800c0b2:	460b      	mov	r3, r1
 800c0b4:	4650      	mov	r0, sl
 800c0b6:	4659      	mov	r1, fp
 800c0b8:	f7f4 f84e 	bl	8000158 <__aeabi_dsub>
 800c0bc:	f04f 0a00 	mov.w	sl, #0
 800c0c0:	4602      	mov	r2, r0
 800c0c2:	460b      	mov	r3, r1
 800c0c4:	4604      	mov	r4, r0
 800c0c6:	460d      	mov	r5, r1
 800c0c8:	4630      	mov	r0, r6
 800c0ca:	4639      	mov	r1, r7
 800c0cc:	f7f4 f846 	bl	800015c <__adddf3>
 800c0d0:	4632      	mov	r2, r6
 800c0d2:	463b      	mov	r3, r7
 800c0d4:	4650      	mov	r0, sl
 800c0d6:	468b      	mov	fp, r1
 800c0d8:	f7f4 f83e 	bl	8000158 <__aeabi_dsub>
 800c0dc:	4602      	mov	r2, r0
 800c0de:	460b      	mov	r3, r1
 800c0e0:	4620      	mov	r0, r4
 800c0e2:	4629      	mov	r1, r5
 800c0e4:	f7f4 f838 	bl	8000158 <__aeabi_dsub>
 800c0e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c0ec:	9b00      	ldr	r3, [sp, #0]
 800c0ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c0f0:	3b01      	subs	r3, #1
 800c0f2:	4313      	orrs	r3, r2
 800c0f4:	f04f 0600 	mov.w	r6, #0
 800c0f8:	f04f 0200 	mov.w	r2, #0
 800c0fc:	bf0c      	ite	eq
 800c0fe:	4b31      	ldreq	r3, [pc, #196]	; (800c1c4 <__ieee754_pow+0x3cc>)
 800c100:	4b2d      	ldrne	r3, [pc, #180]	; (800c1b8 <__ieee754_pow+0x3c0>)
 800c102:	4604      	mov	r4, r0
 800c104:	460d      	mov	r5, r1
 800c106:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c10a:	e9cd 2300 	strd	r2, r3, [sp]
 800c10e:	4632      	mov	r2, r6
 800c110:	463b      	mov	r3, r7
 800c112:	f7f4 f821 	bl	8000158 <__aeabi_dsub>
 800c116:	4652      	mov	r2, sl
 800c118:	465b      	mov	r3, fp
 800c11a:	f7f4 f9d5 	bl	80004c8 <__aeabi_dmul>
 800c11e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c122:	4680      	mov	r8, r0
 800c124:	4689      	mov	r9, r1
 800c126:	4620      	mov	r0, r4
 800c128:	4629      	mov	r1, r5
 800c12a:	f7f4 f9cd 	bl	80004c8 <__aeabi_dmul>
 800c12e:	4602      	mov	r2, r0
 800c130:	460b      	mov	r3, r1
 800c132:	4640      	mov	r0, r8
 800c134:	4649      	mov	r1, r9
 800c136:	f7f4 f811 	bl	800015c <__adddf3>
 800c13a:	4632      	mov	r2, r6
 800c13c:	463b      	mov	r3, r7
 800c13e:	4680      	mov	r8, r0
 800c140:	4689      	mov	r9, r1
 800c142:	4650      	mov	r0, sl
 800c144:	4659      	mov	r1, fp
 800c146:	f7f4 f9bf 	bl	80004c8 <__aeabi_dmul>
 800c14a:	4604      	mov	r4, r0
 800c14c:	460d      	mov	r5, r1
 800c14e:	460b      	mov	r3, r1
 800c150:	4602      	mov	r2, r0
 800c152:	4649      	mov	r1, r9
 800c154:	4640      	mov	r0, r8
 800c156:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c15a:	f7f3 ffff 	bl	800015c <__adddf3>
 800c15e:	4b1a      	ldr	r3, [pc, #104]	; (800c1c8 <__ieee754_pow+0x3d0>)
 800c160:	4682      	mov	sl, r0
 800c162:	4299      	cmp	r1, r3
 800c164:	460f      	mov	r7, r1
 800c166:	460e      	mov	r6, r1
 800c168:	f340 82ed 	ble.w	800c746 <__ieee754_pow+0x94e>
 800c16c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c170:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c174:	4303      	orrs	r3, r0
 800c176:	f000 81e7 	beq.w	800c548 <__ieee754_pow+0x750>
 800c17a:	a30d      	add	r3, pc, #52	; (adr r3, 800c1b0 <__ieee754_pow+0x3b8>)
 800c17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c180:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c184:	f7f4 f9a0 	bl	80004c8 <__aeabi_dmul>
 800c188:	a309      	add	r3, pc, #36	; (adr r3, 800c1b0 <__ieee754_pow+0x3b8>)
 800c18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18e:	e6cc      	b.n	800bf2a <__ieee754_pow+0x132>
 800c190:	60000000 	.word	0x60000000
 800c194:	3ff71547 	.word	0x3ff71547
 800c198:	f85ddf44 	.word	0xf85ddf44
 800c19c:	3e54ae0b 	.word	0x3e54ae0b
 800c1a0:	55555555 	.word	0x55555555
 800c1a4:	3fd55555 	.word	0x3fd55555
 800c1a8:	652b82fe 	.word	0x652b82fe
 800c1ac:	3ff71547 	.word	0x3ff71547
 800c1b0:	8800759c 	.word	0x8800759c
 800c1b4:	7e37e43c 	.word	0x7e37e43c
 800c1b8:	3ff00000 	.word	0x3ff00000
 800c1bc:	3fd00000 	.word	0x3fd00000
 800c1c0:	3fe00000 	.word	0x3fe00000
 800c1c4:	bff00000 	.word	0xbff00000
 800c1c8:	408fffff 	.word	0x408fffff
 800c1cc:	4bd4      	ldr	r3, [pc, #848]	; (800c520 <__ieee754_pow+0x728>)
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	ea09 0303 	and.w	r3, r9, r3
 800c1d4:	b943      	cbnz	r3, 800c1e8 <__ieee754_pow+0x3f0>
 800c1d6:	4658      	mov	r0, fp
 800c1d8:	4661      	mov	r1, ip
 800c1da:	4bd2      	ldr	r3, [pc, #840]	; (800c524 <__ieee754_pow+0x72c>)
 800c1dc:	f7f4 f974 	bl	80004c8 <__aeabi_dmul>
 800c1e0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c1e4:	4683      	mov	fp, r0
 800c1e6:	460c      	mov	r4, r1
 800c1e8:	1523      	asrs	r3, r4, #20
 800c1ea:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c1ee:	4413      	add	r3, r2
 800c1f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c1f2:	4bcd      	ldr	r3, [pc, #820]	; (800c528 <__ieee754_pow+0x730>)
 800c1f4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c1f8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c1fc:	429c      	cmp	r4, r3
 800c1fe:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c202:	dd08      	ble.n	800c216 <__ieee754_pow+0x41e>
 800c204:	4bc9      	ldr	r3, [pc, #804]	; (800c52c <__ieee754_pow+0x734>)
 800c206:	429c      	cmp	r4, r3
 800c208:	f340 819c 	ble.w	800c544 <__ieee754_pow+0x74c>
 800c20c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c20e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c212:	3301      	adds	r3, #1
 800c214:	930b      	str	r3, [sp, #44]	; 0x2c
 800c216:	2600      	movs	r6, #0
 800c218:	00f3      	lsls	r3, r6, #3
 800c21a:	930d      	str	r3, [sp, #52]	; 0x34
 800c21c:	4bc4      	ldr	r3, [pc, #784]	; (800c530 <__ieee754_pow+0x738>)
 800c21e:	4658      	mov	r0, fp
 800c220:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c224:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c228:	4629      	mov	r1, r5
 800c22a:	461a      	mov	r2, r3
 800c22c:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800c230:	4623      	mov	r3, r4
 800c232:	f7f3 ff91 	bl	8000158 <__aeabi_dsub>
 800c236:	46da      	mov	sl, fp
 800c238:	462b      	mov	r3, r5
 800c23a:	4652      	mov	r2, sl
 800c23c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c240:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c244:	f7f3 ff8a 	bl	800015c <__adddf3>
 800c248:	4602      	mov	r2, r0
 800c24a:	460b      	mov	r3, r1
 800c24c:	2000      	movs	r0, #0
 800c24e:	49b9      	ldr	r1, [pc, #740]	; (800c534 <__ieee754_pow+0x73c>)
 800c250:	f7f4 fa64 	bl	800071c <__aeabi_ddiv>
 800c254:	4602      	mov	r2, r0
 800c256:	460b      	mov	r3, r1
 800c258:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c25c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c260:	f7f4 f932 	bl	80004c8 <__aeabi_dmul>
 800c264:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c268:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800c26c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c270:	2300      	movs	r3, #0
 800c272:	2200      	movs	r2, #0
 800c274:	46ab      	mov	fp, r5
 800c276:	106d      	asrs	r5, r5, #1
 800c278:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c27c:	9304      	str	r3, [sp, #16]
 800c27e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c282:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c286:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800c28a:	4640      	mov	r0, r8
 800c28c:	4649      	mov	r1, r9
 800c28e:	4614      	mov	r4, r2
 800c290:	461d      	mov	r5, r3
 800c292:	f7f4 f919 	bl	80004c8 <__aeabi_dmul>
 800c296:	4602      	mov	r2, r0
 800c298:	460b      	mov	r3, r1
 800c29a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c29e:	f7f3 ff5b 	bl	8000158 <__aeabi_dsub>
 800c2a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c2a6:	4606      	mov	r6, r0
 800c2a8:	460f      	mov	r7, r1
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	4629      	mov	r1, r5
 800c2ae:	f7f3 ff53 	bl	8000158 <__aeabi_dsub>
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	4650      	mov	r0, sl
 800c2b8:	4659      	mov	r1, fp
 800c2ba:	f7f3 ff4d 	bl	8000158 <__aeabi_dsub>
 800c2be:	4642      	mov	r2, r8
 800c2c0:	464b      	mov	r3, r9
 800c2c2:	f7f4 f901 	bl	80004c8 <__aeabi_dmul>
 800c2c6:	4602      	mov	r2, r0
 800c2c8:	460b      	mov	r3, r1
 800c2ca:	4630      	mov	r0, r6
 800c2cc:	4639      	mov	r1, r7
 800c2ce:	f7f3 ff43 	bl	8000158 <__aeabi_dsub>
 800c2d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c2d6:	f7f4 f8f7 	bl	80004c8 <__aeabi_dmul>
 800c2da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c2e2:	4610      	mov	r0, r2
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	f7f4 f8ef 	bl	80004c8 <__aeabi_dmul>
 800c2ea:	a37b      	add	r3, pc, #492	; (adr r3, 800c4d8 <__ieee754_pow+0x6e0>)
 800c2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f0:	4604      	mov	r4, r0
 800c2f2:	460d      	mov	r5, r1
 800c2f4:	f7f4 f8e8 	bl	80004c8 <__aeabi_dmul>
 800c2f8:	a379      	add	r3, pc, #484	; (adr r3, 800c4e0 <__ieee754_pow+0x6e8>)
 800c2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2fe:	f7f3 ff2d 	bl	800015c <__adddf3>
 800c302:	4622      	mov	r2, r4
 800c304:	462b      	mov	r3, r5
 800c306:	f7f4 f8df 	bl	80004c8 <__aeabi_dmul>
 800c30a:	a377      	add	r3, pc, #476	; (adr r3, 800c4e8 <__ieee754_pow+0x6f0>)
 800c30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c310:	f7f3 ff24 	bl	800015c <__adddf3>
 800c314:	4622      	mov	r2, r4
 800c316:	462b      	mov	r3, r5
 800c318:	f7f4 f8d6 	bl	80004c8 <__aeabi_dmul>
 800c31c:	a374      	add	r3, pc, #464	; (adr r3, 800c4f0 <__ieee754_pow+0x6f8>)
 800c31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c322:	f7f3 ff1b 	bl	800015c <__adddf3>
 800c326:	4622      	mov	r2, r4
 800c328:	462b      	mov	r3, r5
 800c32a:	f7f4 f8cd 	bl	80004c8 <__aeabi_dmul>
 800c32e:	a372      	add	r3, pc, #456	; (adr r3, 800c4f8 <__ieee754_pow+0x700>)
 800c330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c334:	f7f3 ff12 	bl	800015c <__adddf3>
 800c338:	4622      	mov	r2, r4
 800c33a:	462b      	mov	r3, r5
 800c33c:	f7f4 f8c4 	bl	80004c8 <__aeabi_dmul>
 800c340:	a36f      	add	r3, pc, #444	; (adr r3, 800c500 <__ieee754_pow+0x708>)
 800c342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c346:	f7f3 ff09 	bl	800015c <__adddf3>
 800c34a:	4622      	mov	r2, r4
 800c34c:	4606      	mov	r6, r0
 800c34e:	460f      	mov	r7, r1
 800c350:	462b      	mov	r3, r5
 800c352:	4620      	mov	r0, r4
 800c354:	4629      	mov	r1, r5
 800c356:	f7f4 f8b7 	bl	80004c8 <__aeabi_dmul>
 800c35a:	4602      	mov	r2, r0
 800c35c:	460b      	mov	r3, r1
 800c35e:	4630      	mov	r0, r6
 800c360:	4639      	mov	r1, r7
 800c362:	f7f4 f8b1 	bl	80004c8 <__aeabi_dmul>
 800c366:	4604      	mov	r4, r0
 800c368:	460d      	mov	r5, r1
 800c36a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c36e:	4642      	mov	r2, r8
 800c370:	464b      	mov	r3, r9
 800c372:	f7f3 fef3 	bl	800015c <__adddf3>
 800c376:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c37a:	f7f4 f8a5 	bl	80004c8 <__aeabi_dmul>
 800c37e:	4622      	mov	r2, r4
 800c380:	462b      	mov	r3, r5
 800c382:	f7f3 feeb 	bl	800015c <__adddf3>
 800c386:	4642      	mov	r2, r8
 800c388:	4606      	mov	r6, r0
 800c38a:	460f      	mov	r7, r1
 800c38c:	464b      	mov	r3, r9
 800c38e:	4640      	mov	r0, r8
 800c390:	4649      	mov	r1, r9
 800c392:	f7f4 f899 	bl	80004c8 <__aeabi_dmul>
 800c396:	2200      	movs	r2, #0
 800c398:	4b67      	ldr	r3, [pc, #412]	; (800c538 <__ieee754_pow+0x740>)
 800c39a:	4682      	mov	sl, r0
 800c39c:	468b      	mov	fp, r1
 800c39e:	f7f3 fedd 	bl	800015c <__adddf3>
 800c3a2:	4632      	mov	r2, r6
 800c3a4:	463b      	mov	r3, r7
 800c3a6:	f7f3 fed9 	bl	800015c <__adddf3>
 800c3aa:	9c04      	ldr	r4, [sp, #16]
 800c3ac:	460d      	mov	r5, r1
 800c3ae:	4622      	mov	r2, r4
 800c3b0:	460b      	mov	r3, r1
 800c3b2:	4640      	mov	r0, r8
 800c3b4:	4649      	mov	r1, r9
 800c3b6:	f7f4 f887 	bl	80004c8 <__aeabi_dmul>
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	4680      	mov	r8, r0
 800c3be:	4689      	mov	r9, r1
 800c3c0:	4620      	mov	r0, r4
 800c3c2:	4629      	mov	r1, r5
 800c3c4:	4b5c      	ldr	r3, [pc, #368]	; (800c538 <__ieee754_pow+0x740>)
 800c3c6:	f7f3 fec7 	bl	8000158 <__aeabi_dsub>
 800c3ca:	4652      	mov	r2, sl
 800c3cc:	465b      	mov	r3, fp
 800c3ce:	f7f3 fec3 	bl	8000158 <__aeabi_dsub>
 800c3d2:	4602      	mov	r2, r0
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	4630      	mov	r0, r6
 800c3d8:	4639      	mov	r1, r7
 800c3da:	f7f3 febd 	bl	8000158 <__aeabi_dsub>
 800c3de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c3e2:	f7f4 f871 	bl	80004c8 <__aeabi_dmul>
 800c3e6:	4622      	mov	r2, r4
 800c3e8:	4606      	mov	r6, r0
 800c3ea:	460f      	mov	r7, r1
 800c3ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c3f0:	462b      	mov	r3, r5
 800c3f2:	f7f4 f869 	bl	80004c8 <__aeabi_dmul>
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	4630      	mov	r0, r6
 800c3fc:	4639      	mov	r1, r7
 800c3fe:	f7f3 fead 	bl	800015c <__adddf3>
 800c402:	4606      	mov	r6, r0
 800c404:	460f      	mov	r7, r1
 800c406:	4602      	mov	r2, r0
 800c408:	460b      	mov	r3, r1
 800c40a:	4640      	mov	r0, r8
 800c40c:	4649      	mov	r1, r9
 800c40e:	f7f3 fea5 	bl	800015c <__adddf3>
 800c412:	a33d      	add	r3, pc, #244	; (adr r3, 800c508 <__ieee754_pow+0x710>)
 800c414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c418:	9c04      	ldr	r4, [sp, #16]
 800c41a:	460d      	mov	r5, r1
 800c41c:	4620      	mov	r0, r4
 800c41e:	f7f4 f853 	bl	80004c8 <__aeabi_dmul>
 800c422:	4642      	mov	r2, r8
 800c424:	464b      	mov	r3, r9
 800c426:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c42a:	4620      	mov	r0, r4
 800c42c:	4629      	mov	r1, r5
 800c42e:	f7f3 fe93 	bl	8000158 <__aeabi_dsub>
 800c432:	4602      	mov	r2, r0
 800c434:	460b      	mov	r3, r1
 800c436:	4630      	mov	r0, r6
 800c438:	4639      	mov	r1, r7
 800c43a:	f7f3 fe8d 	bl	8000158 <__aeabi_dsub>
 800c43e:	a334      	add	r3, pc, #208	; (adr r3, 800c510 <__ieee754_pow+0x718>)
 800c440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c444:	f7f4 f840 	bl	80004c8 <__aeabi_dmul>
 800c448:	a333      	add	r3, pc, #204	; (adr r3, 800c518 <__ieee754_pow+0x720>)
 800c44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44e:	4606      	mov	r6, r0
 800c450:	460f      	mov	r7, r1
 800c452:	4620      	mov	r0, r4
 800c454:	4629      	mov	r1, r5
 800c456:	f7f4 f837 	bl	80004c8 <__aeabi_dmul>
 800c45a:	4602      	mov	r2, r0
 800c45c:	460b      	mov	r3, r1
 800c45e:	4630      	mov	r0, r6
 800c460:	4639      	mov	r1, r7
 800c462:	f7f3 fe7b 	bl	800015c <__adddf3>
 800c466:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c468:	4b34      	ldr	r3, [pc, #208]	; (800c53c <__ieee754_pow+0x744>)
 800c46a:	4413      	add	r3, r2
 800c46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c470:	f7f3 fe74 	bl	800015c <__adddf3>
 800c474:	4680      	mov	r8, r0
 800c476:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c478:	4689      	mov	r9, r1
 800c47a:	f7f3 ffbb 	bl	80003f4 <__aeabi_i2d>
 800c47e:	4604      	mov	r4, r0
 800c480:	460d      	mov	r5, r1
 800c482:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c484:	4b2e      	ldr	r3, [pc, #184]	; (800c540 <__ieee754_pow+0x748>)
 800c486:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c48a:	4413      	add	r3, r2
 800c48c:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c490:	4642      	mov	r2, r8
 800c492:	464b      	mov	r3, r9
 800c494:	f7f3 fe62 	bl	800015c <__adddf3>
 800c498:	4632      	mov	r2, r6
 800c49a:	463b      	mov	r3, r7
 800c49c:	f7f3 fe5e 	bl	800015c <__adddf3>
 800c4a0:	4622      	mov	r2, r4
 800c4a2:	462b      	mov	r3, r5
 800c4a4:	f7f3 fe5a 	bl	800015c <__adddf3>
 800c4a8:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c4ac:	4622      	mov	r2, r4
 800c4ae:	462b      	mov	r3, r5
 800c4b0:	4650      	mov	r0, sl
 800c4b2:	468b      	mov	fp, r1
 800c4b4:	f7f3 fe50 	bl	8000158 <__aeabi_dsub>
 800c4b8:	4632      	mov	r2, r6
 800c4ba:	463b      	mov	r3, r7
 800c4bc:	f7f3 fe4c 	bl	8000158 <__aeabi_dsub>
 800c4c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c4c4:	f7f3 fe48 	bl	8000158 <__aeabi_dsub>
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	460b      	mov	r3, r1
 800c4cc:	4640      	mov	r0, r8
 800c4ce:	4649      	mov	r1, r9
 800c4d0:	e608      	b.n	800c0e4 <__ieee754_pow+0x2ec>
 800c4d2:	bf00      	nop
 800c4d4:	f3af 8000 	nop.w
 800c4d8:	4a454eef 	.word	0x4a454eef
 800c4dc:	3fca7e28 	.word	0x3fca7e28
 800c4e0:	93c9db65 	.word	0x93c9db65
 800c4e4:	3fcd864a 	.word	0x3fcd864a
 800c4e8:	a91d4101 	.word	0xa91d4101
 800c4ec:	3fd17460 	.word	0x3fd17460
 800c4f0:	518f264d 	.word	0x518f264d
 800c4f4:	3fd55555 	.word	0x3fd55555
 800c4f8:	db6fabff 	.word	0xdb6fabff
 800c4fc:	3fdb6db6 	.word	0x3fdb6db6
 800c500:	33333303 	.word	0x33333303
 800c504:	3fe33333 	.word	0x3fe33333
 800c508:	e0000000 	.word	0xe0000000
 800c50c:	3feec709 	.word	0x3feec709
 800c510:	dc3a03fd 	.word	0xdc3a03fd
 800c514:	3feec709 	.word	0x3feec709
 800c518:	145b01f5 	.word	0x145b01f5
 800c51c:	be3e2fe0 	.word	0xbe3e2fe0
 800c520:	7ff00000 	.word	0x7ff00000
 800c524:	43400000 	.word	0x43400000
 800c528:	0003988e 	.word	0x0003988e
 800c52c:	000bb679 	.word	0x000bb679
 800c530:	0800d398 	.word	0x0800d398
 800c534:	3ff00000 	.word	0x3ff00000
 800c538:	40080000 	.word	0x40080000
 800c53c:	0800d3b8 	.word	0x0800d3b8
 800c540:	0800d3a8 	.word	0x0800d3a8
 800c544:	2601      	movs	r6, #1
 800c546:	e667      	b.n	800c218 <__ieee754_pow+0x420>
 800c548:	a39d      	add	r3, pc, #628	; (adr r3, 800c7c0 <__ieee754_pow+0x9c8>)
 800c54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c54e:	4640      	mov	r0, r8
 800c550:	4649      	mov	r1, r9
 800c552:	f7f3 fe03 	bl	800015c <__adddf3>
 800c556:	4622      	mov	r2, r4
 800c558:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c55c:	462b      	mov	r3, r5
 800c55e:	4650      	mov	r0, sl
 800c560:	4639      	mov	r1, r7
 800c562:	f7f3 fdf9 	bl	8000158 <__aeabi_dsub>
 800c566:	4602      	mov	r2, r0
 800c568:	460b      	mov	r3, r1
 800c56a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c56e:	f7f4 fa3b 	bl	80009e8 <__aeabi_dcmpgt>
 800c572:	2800      	cmp	r0, #0
 800c574:	f47f ae01 	bne.w	800c17a <__ieee754_pow+0x382>
 800c578:	4aa5      	ldr	r2, [pc, #660]	; (800c810 <__ieee754_pow+0xa18>)
 800c57a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800c57e:	4293      	cmp	r3, r2
 800c580:	f340 8103 	ble.w	800c78a <__ieee754_pow+0x992>
 800c584:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c588:	2000      	movs	r0, #0
 800c58a:	151b      	asrs	r3, r3, #20
 800c58c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c590:	fa4a f303 	asr.w	r3, sl, r3
 800c594:	4433      	add	r3, r6
 800c596:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c59a:	4f9e      	ldr	r7, [pc, #632]	; (800c814 <__ieee754_pow+0xa1c>)
 800c59c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c5a0:	4117      	asrs	r7, r2
 800c5a2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c5a6:	ea23 0107 	bic.w	r1, r3, r7
 800c5aa:	f1c2 0214 	rsb	r2, r2, #20
 800c5ae:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	fa4a fa02 	asr.w	sl, sl, r2
 800c5b8:	2e00      	cmp	r6, #0
 800c5ba:	4602      	mov	r2, r0
 800c5bc:	4629      	mov	r1, r5
 800c5be:	4620      	mov	r0, r4
 800c5c0:	bfb8      	it	lt
 800c5c2:	f1ca 0a00 	rsblt	sl, sl, #0
 800c5c6:	f7f3 fdc7 	bl	8000158 <__aeabi_dsub>
 800c5ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5d2:	2400      	movs	r4, #0
 800c5d4:	4642      	mov	r2, r8
 800c5d6:	464b      	mov	r3, r9
 800c5d8:	f7f3 fdc0 	bl	800015c <__adddf3>
 800c5dc:	a37a      	add	r3, pc, #488	; (adr r3, 800c7c8 <__ieee754_pow+0x9d0>)
 800c5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	460d      	mov	r5, r1
 800c5e6:	f7f3 ff6f 	bl	80004c8 <__aeabi_dmul>
 800c5ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c5ee:	4606      	mov	r6, r0
 800c5f0:	460f      	mov	r7, r1
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	4629      	mov	r1, r5
 800c5f6:	f7f3 fdaf 	bl	8000158 <__aeabi_dsub>
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	4640      	mov	r0, r8
 800c600:	4649      	mov	r1, r9
 800c602:	f7f3 fda9 	bl	8000158 <__aeabi_dsub>
 800c606:	a372      	add	r3, pc, #456	; (adr r3, 800c7d0 <__ieee754_pow+0x9d8>)
 800c608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c60c:	f7f3 ff5c 	bl	80004c8 <__aeabi_dmul>
 800c610:	a371      	add	r3, pc, #452	; (adr r3, 800c7d8 <__ieee754_pow+0x9e0>)
 800c612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c616:	4680      	mov	r8, r0
 800c618:	4689      	mov	r9, r1
 800c61a:	4620      	mov	r0, r4
 800c61c:	4629      	mov	r1, r5
 800c61e:	f7f3 ff53 	bl	80004c8 <__aeabi_dmul>
 800c622:	4602      	mov	r2, r0
 800c624:	460b      	mov	r3, r1
 800c626:	4640      	mov	r0, r8
 800c628:	4649      	mov	r1, r9
 800c62a:	f7f3 fd97 	bl	800015c <__adddf3>
 800c62e:	4604      	mov	r4, r0
 800c630:	460d      	mov	r5, r1
 800c632:	4602      	mov	r2, r0
 800c634:	460b      	mov	r3, r1
 800c636:	4630      	mov	r0, r6
 800c638:	4639      	mov	r1, r7
 800c63a:	f7f3 fd8f 	bl	800015c <__adddf3>
 800c63e:	4632      	mov	r2, r6
 800c640:	463b      	mov	r3, r7
 800c642:	4680      	mov	r8, r0
 800c644:	4689      	mov	r9, r1
 800c646:	f7f3 fd87 	bl	8000158 <__aeabi_dsub>
 800c64a:	4602      	mov	r2, r0
 800c64c:	460b      	mov	r3, r1
 800c64e:	4620      	mov	r0, r4
 800c650:	4629      	mov	r1, r5
 800c652:	f7f3 fd81 	bl	8000158 <__aeabi_dsub>
 800c656:	4642      	mov	r2, r8
 800c658:	4606      	mov	r6, r0
 800c65a:	460f      	mov	r7, r1
 800c65c:	464b      	mov	r3, r9
 800c65e:	4640      	mov	r0, r8
 800c660:	4649      	mov	r1, r9
 800c662:	f7f3 ff31 	bl	80004c8 <__aeabi_dmul>
 800c666:	a35e      	add	r3, pc, #376	; (adr r3, 800c7e0 <__ieee754_pow+0x9e8>)
 800c668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66c:	4604      	mov	r4, r0
 800c66e:	460d      	mov	r5, r1
 800c670:	f7f3 ff2a 	bl	80004c8 <__aeabi_dmul>
 800c674:	a35c      	add	r3, pc, #368	; (adr r3, 800c7e8 <__ieee754_pow+0x9f0>)
 800c676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c67a:	f7f3 fd6d 	bl	8000158 <__aeabi_dsub>
 800c67e:	4622      	mov	r2, r4
 800c680:	462b      	mov	r3, r5
 800c682:	f7f3 ff21 	bl	80004c8 <__aeabi_dmul>
 800c686:	a35a      	add	r3, pc, #360	; (adr r3, 800c7f0 <__ieee754_pow+0x9f8>)
 800c688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68c:	f7f3 fd66 	bl	800015c <__adddf3>
 800c690:	4622      	mov	r2, r4
 800c692:	462b      	mov	r3, r5
 800c694:	f7f3 ff18 	bl	80004c8 <__aeabi_dmul>
 800c698:	a357      	add	r3, pc, #348	; (adr r3, 800c7f8 <__ieee754_pow+0xa00>)
 800c69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69e:	f7f3 fd5b 	bl	8000158 <__aeabi_dsub>
 800c6a2:	4622      	mov	r2, r4
 800c6a4:	462b      	mov	r3, r5
 800c6a6:	f7f3 ff0f 	bl	80004c8 <__aeabi_dmul>
 800c6aa:	a355      	add	r3, pc, #340	; (adr r3, 800c800 <__ieee754_pow+0xa08>)
 800c6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b0:	f7f3 fd54 	bl	800015c <__adddf3>
 800c6b4:	4622      	mov	r2, r4
 800c6b6:	462b      	mov	r3, r5
 800c6b8:	f7f3 ff06 	bl	80004c8 <__aeabi_dmul>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	460b      	mov	r3, r1
 800c6c0:	4640      	mov	r0, r8
 800c6c2:	4649      	mov	r1, r9
 800c6c4:	f7f3 fd48 	bl	8000158 <__aeabi_dsub>
 800c6c8:	4604      	mov	r4, r0
 800c6ca:	460d      	mov	r5, r1
 800c6cc:	4602      	mov	r2, r0
 800c6ce:	460b      	mov	r3, r1
 800c6d0:	4640      	mov	r0, r8
 800c6d2:	4649      	mov	r1, r9
 800c6d4:	f7f3 fef8 	bl	80004c8 <__aeabi_dmul>
 800c6d8:	2200      	movs	r2, #0
 800c6da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	4629      	mov	r1, r5
 800c6e6:	f7f3 fd37 	bl	8000158 <__aeabi_dsub>
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	460b      	mov	r3, r1
 800c6ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6f2:	f7f4 f813 	bl	800071c <__aeabi_ddiv>
 800c6f6:	4632      	mov	r2, r6
 800c6f8:	4604      	mov	r4, r0
 800c6fa:	460d      	mov	r5, r1
 800c6fc:	463b      	mov	r3, r7
 800c6fe:	4640      	mov	r0, r8
 800c700:	4649      	mov	r1, r9
 800c702:	f7f3 fee1 	bl	80004c8 <__aeabi_dmul>
 800c706:	4632      	mov	r2, r6
 800c708:	463b      	mov	r3, r7
 800c70a:	f7f3 fd27 	bl	800015c <__adddf3>
 800c70e:	4602      	mov	r2, r0
 800c710:	460b      	mov	r3, r1
 800c712:	4620      	mov	r0, r4
 800c714:	4629      	mov	r1, r5
 800c716:	f7f3 fd1f 	bl	8000158 <__aeabi_dsub>
 800c71a:	4642      	mov	r2, r8
 800c71c:	464b      	mov	r3, r9
 800c71e:	f7f3 fd1b 	bl	8000158 <__aeabi_dsub>
 800c722:	4602      	mov	r2, r0
 800c724:	460b      	mov	r3, r1
 800c726:	2000      	movs	r0, #0
 800c728:	493b      	ldr	r1, [pc, #236]	; (800c818 <__ieee754_pow+0xa20>)
 800c72a:	f7f3 fd15 	bl	8000158 <__aeabi_dsub>
 800c72e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800c732:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c736:	da2b      	bge.n	800c790 <__ieee754_pow+0x998>
 800c738:	4652      	mov	r2, sl
 800c73a:	f000 f9b9 	bl	800cab0 <scalbn>
 800c73e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c742:	f7ff bbf2 	b.w	800bf2a <__ieee754_pow+0x132>
 800c746:	4b35      	ldr	r3, [pc, #212]	; (800c81c <__ieee754_pow+0xa24>)
 800c748:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800c74c:	429f      	cmp	r7, r3
 800c74e:	f77f af13 	ble.w	800c578 <__ieee754_pow+0x780>
 800c752:	4b33      	ldr	r3, [pc, #204]	; (800c820 <__ieee754_pow+0xa28>)
 800c754:	440b      	add	r3, r1
 800c756:	4303      	orrs	r3, r0
 800c758:	d00b      	beq.n	800c772 <__ieee754_pow+0x97a>
 800c75a:	a32b      	add	r3, pc, #172	; (adr r3, 800c808 <__ieee754_pow+0xa10>)
 800c75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c760:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c764:	f7f3 feb0 	bl	80004c8 <__aeabi_dmul>
 800c768:	a327      	add	r3, pc, #156	; (adr r3, 800c808 <__ieee754_pow+0xa10>)
 800c76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76e:	f7ff bbdc 	b.w	800bf2a <__ieee754_pow+0x132>
 800c772:	4622      	mov	r2, r4
 800c774:	462b      	mov	r3, r5
 800c776:	f7f3 fcef 	bl	8000158 <__aeabi_dsub>
 800c77a:	4642      	mov	r2, r8
 800c77c:	464b      	mov	r3, r9
 800c77e:	f7f4 f929 	bl	80009d4 <__aeabi_dcmpge>
 800c782:	2800      	cmp	r0, #0
 800c784:	f43f aef8 	beq.w	800c578 <__ieee754_pow+0x780>
 800c788:	e7e7      	b.n	800c75a <__ieee754_pow+0x962>
 800c78a:	f04f 0a00 	mov.w	sl, #0
 800c78e:	e71e      	b.n	800c5ce <__ieee754_pow+0x7d6>
 800c790:	4621      	mov	r1, r4
 800c792:	e7d4      	b.n	800c73e <__ieee754_pow+0x946>
 800c794:	f04f 0b00 	mov.w	fp, #0
 800c798:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c818 <__ieee754_pow+0xa20>
 800c79c:	f7ff bbb0 	b.w	800bf00 <__ieee754_pow+0x108>
 800c7a0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800c7a4:	f7ff bbac 	b.w	800bf00 <__ieee754_pow+0x108>
 800c7a8:	4638      	mov	r0, r7
 800c7aa:	4641      	mov	r1, r8
 800c7ac:	f7ff bbbf 	b.w	800bf2e <__ieee754_pow+0x136>
 800c7b0:	9200      	str	r2, [sp, #0]
 800c7b2:	f7ff bb7f 	b.w	800beb4 <__ieee754_pow+0xbc>
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	f7ff bb69 	b.w	800be8e <__ieee754_pow+0x96>
 800c7bc:	f3af 8000 	nop.w
 800c7c0:	652b82fe 	.word	0x652b82fe
 800c7c4:	3c971547 	.word	0x3c971547
 800c7c8:	00000000 	.word	0x00000000
 800c7cc:	3fe62e43 	.word	0x3fe62e43
 800c7d0:	fefa39ef 	.word	0xfefa39ef
 800c7d4:	3fe62e42 	.word	0x3fe62e42
 800c7d8:	0ca86c39 	.word	0x0ca86c39
 800c7dc:	be205c61 	.word	0xbe205c61
 800c7e0:	72bea4d0 	.word	0x72bea4d0
 800c7e4:	3e663769 	.word	0x3e663769
 800c7e8:	c5d26bf1 	.word	0xc5d26bf1
 800c7ec:	3ebbbd41 	.word	0x3ebbbd41
 800c7f0:	af25de2c 	.word	0xaf25de2c
 800c7f4:	3f11566a 	.word	0x3f11566a
 800c7f8:	16bebd93 	.word	0x16bebd93
 800c7fc:	3f66c16c 	.word	0x3f66c16c
 800c800:	5555553e 	.word	0x5555553e
 800c804:	3fc55555 	.word	0x3fc55555
 800c808:	c2f8f359 	.word	0xc2f8f359
 800c80c:	01a56e1f 	.word	0x01a56e1f
 800c810:	3fe00000 	.word	0x3fe00000
 800c814:	000fffff 	.word	0x000fffff
 800c818:	3ff00000 	.word	0x3ff00000
 800c81c:	4090cbff 	.word	0x4090cbff
 800c820:	3f6f3400 	.word	0x3f6f3400

0800c824 <__ieee754_sqrt>:
 800c824:	f8df c150 	ldr.w	ip, [pc, #336]	; 800c978 <__ieee754_sqrt+0x154>
 800c828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c82c:	ea3c 0c01 	bics.w	ip, ip, r1
 800c830:	460b      	mov	r3, r1
 800c832:	4606      	mov	r6, r0
 800c834:	460d      	mov	r5, r1
 800c836:	460a      	mov	r2, r1
 800c838:	4607      	mov	r7, r0
 800c83a:	4604      	mov	r4, r0
 800c83c:	d10e      	bne.n	800c85c <__ieee754_sqrt+0x38>
 800c83e:	4602      	mov	r2, r0
 800c840:	f7f3 fe42 	bl	80004c8 <__aeabi_dmul>
 800c844:	4602      	mov	r2, r0
 800c846:	460b      	mov	r3, r1
 800c848:	4630      	mov	r0, r6
 800c84a:	4629      	mov	r1, r5
 800c84c:	f7f3 fc86 	bl	800015c <__adddf3>
 800c850:	4606      	mov	r6, r0
 800c852:	460d      	mov	r5, r1
 800c854:	4630      	mov	r0, r6
 800c856:	4629      	mov	r1, r5
 800c858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c85c:	2900      	cmp	r1, #0
 800c85e:	dc0d      	bgt.n	800c87c <__ieee754_sqrt+0x58>
 800c860:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800c864:	ea5c 0707 	orrs.w	r7, ip, r7
 800c868:	d0f4      	beq.n	800c854 <__ieee754_sqrt+0x30>
 800c86a:	b139      	cbz	r1, 800c87c <__ieee754_sqrt+0x58>
 800c86c:	4602      	mov	r2, r0
 800c86e:	f7f3 fc73 	bl	8000158 <__aeabi_dsub>
 800c872:	4602      	mov	r2, r0
 800c874:	460b      	mov	r3, r1
 800c876:	f7f3 ff51 	bl	800071c <__aeabi_ddiv>
 800c87a:	e7e9      	b.n	800c850 <__ieee754_sqrt+0x2c>
 800c87c:	1512      	asrs	r2, r2, #20
 800c87e:	d074      	beq.n	800c96a <__ieee754_sqrt+0x146>
 800c880:	2000      	movs	r0, #0
 800c882:	07d5      	lsls	r5, r2, #31
 800c884:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c888:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800c88c:	bf5e      	ittt	pl
 800c88e:	0fe3      	lsrpl	r3, r4, #31
 800c890:	0064      	lslpl	r4, r4, #1
 800c892:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800c896:	0fe3      	lsrs	r3, r4, #31
 800c898:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c89c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800c8a0:	2516      	movs	r5, #22
 800c8a2:	4601      	mov	r1, r0
 800c8a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c8a8:	1076      	asrs	r6, r6, #1
 800c8aa:	0064      	lsls	r4, r4, #1
 800c8ac:	188f      	adds	r7, r1, r2
 800c8ae:	429f      	cmp	r7, r3
 800c8b0:	bfde      	ittt	le
 800c8b2:	1bdb      	suble	r3, r3, r7
 800c8b4:	18b9      	addle	r1, r7, r2
 800c8b6:	1880      	addle	r0, r0, r2
 800c8b8:	005b      	lsls	r3, r3, #1
 800c8ba:	3d01      	subs	r5, #1
 800c8bc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800c8c0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c8c4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c8c8:	d1f0      	bne.n	800c8ac <__ieee754_sqrt+0x88>
 800c8ca:	462a      	mov	r2, r5
 800c8cc:	f04f 0e20 	mov.w	lr, #32
 800c8d0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800c8d4:	428b      	cmp	r3, r1
 800c8d6:	eb07 0c05 	add.w	ip, r7, r5
 800c8da:	dc02      	bgt.n	800c8e2 <__ieee754_sqrt+0xbe>
 800c8dc:	d113      	bne.n	800c906 <__ieee754_sqrt+0xe2>
 800c8de:	45a4      	cmp	ip, r4
 800c8e0:	d811      	bhi.n	800c906 <__ieee754_sqrt+0xe2>
 800c8e2:	f1bc 0f00 	cmp.w	ip, #0
 800c8e6:	eb0c 0507 	add.w	r5, ip, r7
 800c8ea:	da43      	bge.n	800c974 <__ieee754_sqrt+0x150>
 800c8ec:	2d00      	cmp	r5, #0
 800c8ee:	db41      	blt.n	800c974 <__ieee754_sqrt+0x150>
 800c8f0:	f101 0801 	add.w	r8, r1, #1
 800c8f4:	1a5b      	subs	r3, r3, r1
 800c8f6:	4641      	mov	r1, r8
 800c8f8:	45a4      	cmp	ip, r4
 800c8fa:	bf88      	it	hi
 800c8fc:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c900:	eba4 040c 	sub.w	r4, r4, ip
 800c904:	443a      	add	r2, r7
 800c906:	005b      	lsls	r3, r3, #1
 800c908:	f1be 0e01 	subs.w	lr, lr, #1
 800c90c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800c910:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800c914:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c918:	d1dc      	bne.n	800c8d4 <__ieee754_sqrt+0xb0>
 800c91a:	4323      	orrs	r3, r4
 800c91c:	d006      	beq.n	800c92c <__ieee754_sqrt+0x108>
 800c91e:	1c54      	adds	r4, r2, #1
 800c920:	bf0b      	itete	eq
 800c922:	4672      	moveq	r2, lr
 800c924:	3201      	addne	r2, #1
 800c926:	3001      	addeq	r0, #1
 800c928:	f022 0201 	bicne.w	r2, r2, #1
 800c92c:	1043      	asrs	r3, r0, #1
 800c92e:	07c1      	lsls	r1, r0, #31
 800c930:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c934:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c938:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c93c:	bf48      	it	mi
 800c93e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c942:	4610      	mov	r0, r2
 800c944:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800c948:	e782      	b.n	800c850 <__ieee754_sqrt+0x2c>
 800c94a:	0ae3      	lsrs	r3, r4, #11
 800c94c:	3915      	subs	r1, #21
 800c94e:	0564      	lsls	r4, r4, #21
 800c950:	2b00      	cmp	r3, #0
 800c952:	d0fa      	beq.n	800c94a <__ieee754_sqrt+0x126>
 800c954:	02de      	lsls	r6, r3, #11
 800c956:	d50a      	bpl.n	800c96e <__ieee754_sqrt+0x14a>
 800c958:	f1c2 0020 	rsb	r0, r2, #32
 800c95c:	fa24 f000 	lsr.w	r0, r4, r0
 800c960:	1e55      	subs	r5, r2, #1
 800c962:	4094      	lsls	r4, r2
 800c964:	4303      	orrs	r3, r0
 800c966:	1b4a      	subs	r2, r1, r5
 800c968:	e78a      	b.n	800c880 <__ieee754_sqrt+0x5c>
 800c96a:	4611      	mov	r1, r2
 800c96c:	e7f0      	b.n	800c950 <__ieee754_sqrt+0x12c>
 800c96e:	005b      	lsls	r3, r3, #1
 800c970:	3201      	adds	r2, #1
 800c972:	e7ef      	b.n	800c954 <__ieee754_sqrt+0x130>
 800c974:	4688      	mov	r8, r1
 800c976:	e7bd      	b.n	800c8f4 <__ieee754_sqrt+0xd0>
 800c978:	7ff00000 	.word	0x7ff00000

0800c97c <fabs>:
 800c97c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c980:	4770      	bx	lr

0800c982 <finite>:
 800c982:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800c986:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c98a:	0fc0      	lsrs	r0, r0, #31
 800c98c:	4770      	bx	lr
	...

0800c990 <nan>:
 800c990:	2000      	movs	r0, #0
 800c992:	4901      	ldr	r1, [pc, #4]	; (800c998 <nan+0x8>)
 800c994:	4770      	bx	lr
 800c996:	bf00      	nop
 800c998:	7ff80000 	.word	0x7ff80000

0800c99c <rint>:
 800c99c:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800c9a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9a2:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800c9a6:	2f13      	cmp	r7, #19
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	460b      	mov	r3, r1
 800c9ac:	460c      	mov	r4, r1
 800c9ae:	4605      	mov	r5, r0
 800c9b0:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800c9b4:	dc59      	bgt.n	800ca6a <rint+0xce>
 800c9b6:	2f00      	cmp	r7, #0
 800c9b8:	da2a      	bge.n	800ca10 <rint+0x74>
 800c9ba:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c9be:	4301      	orrs	r1, r0
 800c9c0:	d022      	beq.n	800ca08 <rint+0x6c>
 800c9c2:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800c9c6:	4301      	orrs	r1, r0
 800c9c8:	424d      	negs	r5, r1
 800c9ca:	430d      	orrs	r5, r1
 800c9cc:	4936      	ldr	r1, [pc, #216]	; (800caa8 <rint+0x10c>)
 800c9ce:	0c5c      	lsrs	r4, r3, #17
 800c9d0:	0b2d      	lsrs	r5, r5, #12
 800c9d2:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800c9d6:	0464      	lsls	r4, r4, #17
 800c9d8:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c9dc:	ea45 0304 	orr.w	r3, r5, r4
 800c9e0:	e9d1 4500 	ldrd	r4, r5, [r1]
 800c9e4:	4620      	mov	r0, r4
 800c9e6:	4629      	mov	r1, r5
 800c9e8:	f7f3 fbb8 	bl	800015c <__adddf3>
 800c9ec:	e9cd 0100 	strd	r0, r1, [sp]
 800c9f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c9f4:	462b      	mov	r3, r5
 800c9f6:	4622      	mov	r2, r4
 800c9f8:	f7f3 fbae 	bl	8000158 <__aeabi_dsub>
 800c9fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ca00:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800ca04:	4602      	mov	r2, r0
 800ca06:	460b      	mov	r3, r1
 800ca08:	4610      	mov	r0, r2
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	b003      	add	sp, #12
 800ca0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca10:	4926      	ldr	r1, [pc, #152]	; (800caac <rint+0x110>)
 800ca12:	4139      	asrs	r1, r7
 800ca14:	ea03 0001 	and.w	r0, r3, r1
 800ca18:	4310      	orrs	r0, r2
 800ca1a:	d0f5      	beq.n	800ca08 <rint+0x6c>
 800ca1c:	084b      	lsrs	r3, r1, #1
 800ca1e:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800ca22:	ea52 0501 	orrs.w	r5, r2, r1
 800ca26:	d00c      	beq.n	800ca42 <rint+0xa6>
 800ca28:	ea24 0303 	bic.w	r3, r4, r3
 800ca2c:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800ca30:	2f13      	cmp	r7, #19
 800ca32:	bf0c      	ite	eq
 800ca34:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800ca38:	2500      	movne	r5, #0
 800ca3a:	fa44 f707 	asr.w	r7, r4, r7
 800ca3e:	ea43 0407 	orr.w	r4, r3, r7
 800ca42:	4919      	ldr	r1, [pc, #100]	; (800caa8 <rint+0x10c>)
 800ca44:	4623      	mov	r3, r4
 800ca46:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800ca4a:	462a      	mov	r2, r5
 800ca4c:	e9d6 4500 	ldrd	r4, r5, [r6]
 800ca50:	4620      	mov	r0, r4
 800ca52:	4629      	mov	r1, r5
 800ca54:	f7f3 fb82 	bl	800015c <__adddf3>
 800ca58:	e9cd 0100 	strd	r0, r1, [sp]
 800ca5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca60:	4622      	mov	r2, r4
 800ca62:	462b      	mov	r3, r5
 800ca64:	f7f3 fb78 	bl	8000158 <__aeabi_dsub>
 800ca68:	e7cc      	b.n	800ca04 <rint+0x68>
 800ca6a:	2f33      	cmp	r7, #51	; 0x33
 800ca6c:	dd05      	ble.n	800ca7a <rint+0xde>
 800ca6e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800ca72:	d1c9      	bne.n	800ca08 <rint+0x6c>
 800ca74:	f7f3 fb72 	bl	800015c <__adddf3>
 800ca78:	e7c4      	b.n	800ca04 <rint+0x68>
 800ca7a:	f04f 31ff 	mov.w	r1, #4294967295
 800ca7e:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800ca82:	fa21 f10c 	lsr.w	r1, r1, ip
 800ca86:	4208      	tst	r0, r1
 800ca88:	d0be      	beq.n	800ca08 <rint+0x6c>
 800ca8a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800ca8e:	bf18      	it	ne
 800ca90:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800ca94:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800ca98:	bf1e      	ittt	ne
 800ca9a:	ea20 0303 	bicne.w	r3, r0, r3
 800ca9e:	fa45 fc0c 	asrne.w	ip, r5, ip
 800caa2:	ea43 050c 	orrne.w	r5, r3, ip
 800caa6:	e7cc      	b.n	800ca42 <rint+0xa6>
 800caa8:	0800d3c8 	.word	0x0800d3c8
 800caac:	000fffff 	.word	0x000fffff

0800cab0 <scalbn>:
 800cab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cab2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800cab6:	4604      	mov	r4, r0
 800cab8:	460d      	mov	r5, r1
 800caba:	4617      	mov	r7, r2
 800cabc:	460b      	mov	r3, r1
 800cabe:	b996      	cbnz	r6, 800cae6 <scalbn+0x36>
 800cac0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cac4:	4303      	orrs	r3, r0
 800cac6:	d039      	beq.n	800cb3c <scalbn+0x8c>
 800cac8:	4b35      	ldr	r3, [pc, #212]	; (800cba0 <scalbn+0xf0>)
 800caca:	2200      	movs	r2, #0
 800cacc:	f7f3 fcfc 	bl	80004c8 <__aeabi_dmul>
 800cad0:	4b34      	ldr	r3, [pc, #208]	; (800cba4 <scalbn+0xf4>)
 800cad2:	4604      	mov	r4, r0
 800cad4:	429f      	cmp	r7, r3
 800cad6:	460d      	mov	r5, r1
 800cad8:	da0f      	bge.n	800cafa <scalbn+0x4a>
 800cada:	a32d      	add	r3, pc, #180	; (adr r3, 800cb90 <scalbn+0xe0>)
 800cadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae0:	f7f3 fcf2 	bl	80004c8 <__aeabi_dmul>
 800cae4:	e006      	b.n	800caf4 <scalbn+0x44>
 800cae6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800caea:	4296      	cmp	r6, r2
 800caec:	d10a      	bne.n	800cb04 <scalbn+0x54>
 800caee:	4602      	mov	r2, r0
 800caf0:	f7f3 fb34 	bl	800015c <__adddf3>
 800caf4:	4604      	mov	r4, r0
 800caf6:	460d      	mov	r5, r1
 800caf8:	e020      	b.n	800cb3c <scalbn+0x8c>
 800cafa:	460b      	mov	r3, r1
 800cafc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800cb00:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800cb04:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800cb08:	19b9      	adds	r1, r7, r6
 800cb0a:	4291      	cmp	r1, r2
 800cb0c:	dd0e      	ble.n	800cb2c <scalbn+0x7c>
 800cb0e:	a322      	add	r3, pc, #136	; (adr r3, 800cb98 <scalbn+0xe8>)
 800cb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb14:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800cb18:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800cb1c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800cb20:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800cb24:	4820      	ldr	r0, [pc, #128]	; (800cba8 <scalbn+0xf8>)
 800cb26:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800cb2a:	e7d9      	b.n	800cae0 <scalbn+0x30>
 800cb2c:	2900      	cmp	r1, #0
 800cb2e:	dd08      	ble.n	800cb42 <scalbn+0x92>
 800cb30:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cb34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cb38:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800cb3c:	4620      	mov	r0, r4
 800cb3e:	4629      	mov	r1, r5
 800cb40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb42:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800cb46:	da16      	bge.n	800cb76 <scalbn+0xc6>
 800cb48:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cb4c:	429f      	cmp	r7, r3
 800cb4e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800cb52:	dd08      	ble.n	800cb66 <scalbn+0xb6>
 800cb54:	4c15      	ldr	r4, [pc, #84]	; (800cbac <scalbn+0xfc>)
 800cb56:	4814      	ldr	r0, [pc, #80]	; (800cba8 <scalbn+0xf8>)
 800cb58:	f363 74df 	bfi	r4, r3, #31, #1
 800cb5c:	a30e      	add	r3, pc, #56	; (adr r3, 800cb98 <scalbn+0xe8>)
 800cb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb62:	4621      	mov	r1, r4
 800cb64:	e7bc      	b.n	800cae0 <scalbn+0x30>
 800cb66:	4c12      	ldr	r4, [pc, #72]	; (800cbb0 <scalbn+0x100>)
 800cb68:	4812      	ldr	r0, [pc, #72]	; (800cbb4 <scalbn+0x104>)
 800cb6a:	f363 74df 	bfi	r4, r3, #31, #1
 800cb6e:	a308      	add	r3, pc, #32	; (adr r3, 800cb90 <scalbn+0xe0>)
 800cb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb74:	e7f5      	b.n	800cb62 <scalbn+0xb2>
 800cb76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cb7a:	3136      	adds	r1, #54	; 0x36
 800cb7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cb80:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800cb84:	4620      	mov	r0, r4
 800cb86:	4629      	mov	r1, r5
 800cb88:	2200      	movs	r2, #0
 800cb8a:	4b0b      	ldr	r3, [pc, #44]	; (800cbb8 <scalbn+0x108>)
 800cb8c:	e7a8      	b.n	800cae0 <scalbn+0x30>
 800cb8e:	bf00      	nop
 800cb90:	c2f8f359 	.word	0xc2f8f359
 800cb94:	01a56e1f 	.word	0x01a56e1f
 800cb98:	8800759c 	.word	0x8800759c
 800cb9c:	7e37e43c 	.word	0x7e37e43c
 800cba0:	43500000 	.word	0x43500000
 800cba4:	ffff3cb0 	.word	0xffff3cb0
 800cba8:	8800759c 	.word	0x8800759c
 800cbac:	7e37e43c 	.word	0x7e37e43c
 800cbb0:	01a56e1f 	.word	0x01a56e1f
 800cbb4:	c2f8f359 	.word	0xc2f8f359
 800cbb8:	3c900000 	.word	0x3c900000

0800cbbc <_init>:
 800cbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbbe:	bf00      	nop
 800cbc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbc2:	bc08      	pop	{r3}
 800cbc4:	469e      	mov	lr, r3
 800cbc6:	4770      	bx	lr

0800cbc8 <_fini>:
 800cbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbca:	bf00      	nop
 800cbcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbce:	bc08      	pop	{r3}
 800cbd0:	469e      	mov	lr, r3
 800cbd2:	4770      	bx	lr
